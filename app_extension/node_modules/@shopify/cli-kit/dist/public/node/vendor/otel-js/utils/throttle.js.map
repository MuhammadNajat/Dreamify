{"version":3,"file":"throttle.js","sourceRoot":"","sources":["../../../../../../src/public/node/vendor/otel-js/utils/throttle.ts"],"names":[],"mappings":"AAOA,MAAM,UAAU,QAAQ,CACtB,IAAO,EACP,IAAY,EACZ,EAAC,OAAO,GAAG,IAAI,EAAE,QAAQ,GAAG,IAAI,KAAqB,EAAE;IAEvD,IAAI,QAA8B,CAAA;IAClC,IAAI,MAAqB,CAAA;IACzB,IAAI,OAAY,CAAA;IAChB,IAAI,OAAO,GAAyC,IAAI,CAAA;IACxD,IAAI,QAAQ,GAAG,CAAC,CAAA;IAEhB,SAAS,KAAK;QACZ,QAAQ,GAAG,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QAC7C,OAAO,GAAG,IAAI,CAAA;QACd,IAAI,QAAQ,EAAE;YACZ,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;SACvC;QACD,OAAO,GAAG,IAAI,CAAA;QACd,QAAQ,GAAG,IAAI,CAAA;IACjB,CAAC;IAED,OAAO,UAAqB,GAAG,IAAmB;QAChD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,QAAQ,IAAI,OAAO,KAAK,KAAK;YAAE,QAAQ,GAAG,GAAG,CAAA;QAElD,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAA;QACzC,6EAA6E;QAC7E,OAAO,GAAG,IAAI,CAAA;QACd,QAAQ,GAAG,IAAI,CAAA;QACf,IAAI,SAAS,IAAI,CAAC,IAAI,SAAS,GAAG,IAAI,EAAE;YACtC,IAAI,OAAO,EAAE;gBACX,YAAY,CAAC,OAAO,CAAC,CAAA;gBACrB,OAAO,GAAG,IAAI,CAAA;aACf;YACD,QAAQ,GAAG,GAAG,CAAA;YACd,IAAI,QAAQ,EAAE;gBACZ,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAA;aACvC;YACD,OAAO,GAAG,IAAI,CAAA;YACd,QAAQ,GAAG,IAAI,CAAA;SAChB;aAAM,IAAI,CAAC,OAAO,IAAI,QAAQ,KAAK,KAAK,EAAE;YACzC,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;SACvC;QACD,OAAO,MAAM,CAAA;IACf,CAAC,CAAA;AACH,CAAC","sourcesContent":["type ThrottledFunction<T extends (...args: any) => any> = (...args: Parameters<T>) => ReturnType<T>\n\ninterface ThrottleOptions {\n  leading?: boolean\n  trailing?: boolean\n}\n\nexport function throttle<T extends (...args: any) => any>(\n  func: T,\n  wait: number,\n  {leading = true, trailing = true}: ThrottleOptions = {},\n): ThrottledFunction<T> {\n  let lastArgs: Parameters<T> | null\n  let result: ReturnType<T>\n  let context: any\n  let timeout: ReturnType<typeof setTimeout> | null = null\n  let previous = 0\n\n  function later() {\n    previous = leading === false ? 0 : Date.now()\n    timeout = null\n    if (lastArgs) {\n      result = func.apply(context, lastArgs)\n    }\n    context = null\n    lastArgs = null\n  }\n\n  return function (this: any, ...args: Parameters<T>): ReturnType<T> {\n    const now = Date.now()\n    if (!previous && leading === false) previous = now\n\n    const remaining = wait - (now - previous)\n    // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n    context = this\n    lastArgs = args\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout)\n        timeout = null\n      }\n      previous = now\n      if (lastArgs) {\n        result = func.apply(context, lastArgs)\n      }\n      context = null\n      lastArgs = null\n    } else if (!timeout && trailing !== false) {\n      timeout = setTimeout(later, remaining)\n    }\n    return result\n  }\n}\n"]}