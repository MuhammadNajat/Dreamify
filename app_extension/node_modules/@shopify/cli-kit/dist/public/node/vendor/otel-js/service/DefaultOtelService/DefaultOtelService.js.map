{"version":3,"file":"DefaultOtelService.js","sourceRoot":"","sources":["../../../../../../../src/public/node/vendor/otel-js/service/DefaultOtelService/DefaultOtelService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAC,MAAM,2BAA2B,CAAA;AAC9D,OAAO,EAAC,eAAe,EAAC,MAAM,uCAAuC,CAAA;AACrE,OAAO,EAAC,IAAI,EAAE,iBAAiB,EAAE,YAAY,EAAC,MAAM,oBAAoB,CAAA;AAsBxE,MAAM,OAAO,kBAAmB,SAAQ,eAAe;IACrD;;OAEG;IACH,YAAY,EACV,aAAa,GAAG,IAAI,EACpB,GAAG,GAAG,OAAO,EACb,WAAW,EACX,YAAY,GAAG,KAAK,EACpB,OAAO,GAAG,EAAE,EACZ,QAAQ,EACR,aAAa,EACb,MAAM,GAAG,KAAK;IACd,eAAe;IACf,YAAY,GACc;QAC1B,IAAI,CAAC,SAAS,CACZ,IAAI,iBAAiB,EAAE,EACvB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CACjF,CAAA;QAED,KAAK,CAAC;YACJ,WAAW;YACX,aAAa,EACX,aAAa;gBACb,IAAI,oBAAoB,CAAC;oBACvB,WAAW;oBACX,GAAG;oBACH,aAAa;oBACb,MAAM;oBACN,eAAe;oBACf,YAAY;iBACb,CAAC;YACJ,YAAY;YACZ,OAAO;YACP,QAAQ;SACT,CAAC,CAAA;IACJ,CAAC;IAEQ,QAAQ;QACf,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAA;IACzB,CAAC;CACF","sourcesContent":["import {DefaultMeterProvider} from './DefaultMeterProvider.js'\nimport {BaseOtelService} from '../BaseOtelService/BaseOtelService.js'\nimport {diag, DiagConsoleLogger, DiagLogLevel} from '@opentelemetry/api'\n\nimport type {BaseOtelServiceOptions} from '../BaseOtelService/BaseOtelService.js'\n\nexport interface DefaultOtelServiceOptions extends BaseOtelServiceOptions {\n  /**\n   * What environment is being deployed (production, staging)\n   */\n  env?: string\n  /**\n   * How much the export should be throttled in milliseconds.\n   */\n  throttleLimit?: number\n  /**\n   * Determines whether to send metrics via XHR or beacon. Defaults to false.\n   */\n  useXhr?: boolean\n\n  // CLI addition\n  otelEndpoint: string\n}\n\nexport class DefaultOtelService extends BaseOtelService {\n  /**\n   * Bootstraps an Otel exporter which can send Otel metrics to a dedicated Shopify supported collector endpoint.\n   */\n  constructor({\n    throttleLimit = 5000,\n    env = 'local',\n    serviceName,\n    prefixMetric = false,\n    metrics = {},\n    onRecord,\n    meterProvider,\n    useXhr = false,\n    // CLI addition\n    otelEndpoint,\n  }: DefaultOtelServiceOptions) {\n    diag.setLogger(\n      new DiagConsoleLogger(),\n      ['production', 'staging'].includes(env) ? DiagLogLevel.ERROR : DiagLogLevel.INFO,\n    )\n\n    super({\n      serviceName,\n      meterProvider:\n        meterProvider ??\n        new DefaultMeterProvider({\n          serviceName,\n          env,\n          throttleLimit,\n          useXhr,\n          // CLI addition\n          otelEndpoint,\n        }),\n      prefixMetric,\n      metrics,\n      onRecord,\n    })\n  }\n\n  override shutdown(): Promise<void> {\n    diag.disable()\n    return super.shutdown()\n  }\n}\n"]}