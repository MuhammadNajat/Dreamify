{"version":3,"file":"BaseOtelService.js","sourceRoot":"","sources":["../../../../../../../src/public/node/vendor/otel-js/service/BaseOtelService/BaseOtelService.ts"],"names":[],"mappings":"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","sourcesContent":["import type {MetricAttributes} from '@opentelemetry/api'\nimport type {MeterProvider, ViewOptions} from '@opentelemetry/sdk-metrics'\nimport {ExplicitBucketHistogramAggregation, View} from '@opentelemetry/sdk-metrics'\n\nimport type {\n  MetricDescriptor,\n  MetricRecording,\n  MetricsConfig,\n  OnRecordCallback,\n  OtelService,\n  RecordMetricFunction,\n} from '../types.js'\nimport {MetricInstrumentType} from '../types.js'\nimport {isValidMetricName} from '../../utils/validators.js'\n\nconst instrumentationScope = 'opentelemetry-js-shopify-web'\n\nexport interface BaseOtelServiceOptions {\n  /**\n   * Service name is a unique name for an application/service.\n   */\n  serviceName: string\n\n  /**\n   * If this is set to true then the service name is prefixed to every metric.\n   */\n  prefixMetric?: boolean\n\n  /**\n   * Metrics to register on startup.\n   */\n  metrics?: MetricsConfig\n\n  /**\n   * Called when a metric is recorded. `addOnRecord` can also be used to add\n   * listeners anytime.\n   */\n  onRecord?: OnRecordCallback\n\n  /**\n   * Override the default meter provider.\n   */\n  meterProvider?: MeterProvider\n}\n\nexport class BaseOtelService implements OtelService {\n  readonly serviceName: string\n  readonly prefixMetric: boolean\n\n  protected readonly meterProvider: MeterProvider\n  protected readonly metrics: Map<string, RecordMetricFunction> = new Map()\n  protected readonly recordListeners = new Set<OnRecordCallback>()\n\n  /**\n   * Bootstraps an Otel exporter which can send Otel metrics to a dedicated Shopify supported collector endpoint.\n   */\n  constructor({serviceName, prefixMetric = false, metrics = {}, onRecord, meterProvider}: BaseOtelServiceOptions) {\n    if (!serviceName) {\n      throw new Error('Service name is required.')\n    }\n    this.serviceName = serviceName\n\n    this.prefixMetric = prefixMetric\n    if (onRecord) this.addOnRecord(onRecord)\n\n    if (!meterProvider) {\n      throw new Error('MeterProvider is required.')\n    }\n    this.meterProvider = meterProvider\n\n    this.register(metrics)\n  }\n\n  getMeterProvider(): MeterProvider {\n    return this.meterProvider\n  }\n\n  addView(viewOptions: ViewOptions) {\n    // The API to register view is not yet exposed. We need to use the private\n    // property to register a new view after the initial instantiation.\n    ;(this.meterProvider as any)._sharedState?.viewRegistry?.addView?.(new View(viewOptions))\n  }\n\n  record(metricName: string, value: number, labels?: MetricAttributes): void {\n    const recordMetric = this.metrics.get(metricName)\n    if (!recordMetric) {\n      throw new Error(\n        `Service ${this.serviceName} has no metrics registered for name: ${metricName}. Can't record value for unknown metric.`,\n      )\n    }\n    recordMetric(value, labels)\n  }\n\n  registerMetric(metricName: string, {type, ...options}: MetricDescriptor): void {\n    if (this.metrics.has(metricName)) {\n      return\n    }\n    const meter = this.meterProvider.getMeter(instrumentationScope)\n    const name = this.prefixMetric ? `${this.serviceName}_${metricName}` : metricName\n\n    if (!isValidMetricName(name)) {\n      return\n    }\n\n    const createInstrument = () => {\n      switch (type) {\n        case MetricInstrumentType.Counter:\n          return meter.createCounter(name, options)\n        case MetricInstrumentType.UpDownCounter:\n          return meter.createUpDownCounter(name, options)\n        case MetricInstrumentType.Histogram: {\n          if ('boundaries' in options) {\n            this.addView({\n              instrumentName: name,\n              aggregation: new ExplicitBucketHistogramAggregation(options.boundaries, true),\n            })\n          }\n          return meter.createHistogram(name, options)\n        }\n      }\n    }\n\n    // Lazy instantiate the instrument so we don't create it if we don't need to\n    this.metrics.set(metricName, (firstValue: number, firstLabels?: MetricAttributes) => {\n      const instrument = createInstrument()\n      const record = (value: number, labels?: MetricAttributes) => {\n        const [finalValue, finalLabels] = this.notifyRecordListeners(\n          metricName,\n          value,\n          // ensures an new object is created so we don't mutate the original\n          {...labels},\n        )\n        if ('record' in instrument) {\n          instrument.record(finalValue, finalLabels)\n        } else {\n          instrument.add(finalValue, finalLabels)\n        }\n        // We flush metrics after every record - we do not await as we fire & forget.\n        this.meterProvider.forceFlush({})\n      }\n      record(firstValue, firstLabels)\n      this.metrics.set(metricName, record)\n    })\n  }\n\n  register(metrics: MetricsConfig) {\n    Object.entries(metrics).forEach(([metricName, options]) => {\n      this.registerMetric(metricName, options)\n    })\n  }\n\n  addOnRecord(onRecord: OnRecordCallback): () => void {\n    this.recordListeners.add(onRecord)\n    return () => {\n      this.recordListeners.delete(onRecord)\n    }\n  }\n\n  removeOnRecord(onRecord: OnRecordCallback): void {\n    this.recordListeners.delete(onRecord)\n  }\n\n  shutdown(): Promise<void> {\n    this.metrics.clear()\n    this.recordListeners.clear()\n    return this.meterProvider.shutdown()\n  }\n\n  protected notifyRecordListeners(metricName: string, initialValue: number, initialLabels: MetricAttributes) {\n    return Array.from(this.recordListeners).reduce<MetricRecording>(\n      (recordArgs, listener) => {\n        return listener(metricName, ...recordArgs) || recordArgs\n      },\n      [initialValue, initialLabels],\n    )\n  }\n}\n"]}