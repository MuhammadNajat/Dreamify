{"version":3,"file":"DefaultMeterProvider.js","sourceRoot":"","sources":["../../../../../../../src/public/node/vendor/otel-js/service/DefaultOtelService/DefaultMeterProvider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,yBAAyB,EAAC,MAAM,2CAA2C,CAAA;AACnF,OAAO,EAAC,kBAAkB,EAA4B,MAAM,2CAA2C,CAAA;AACvG,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAC,sBAAsB,EAAE,qBAAqB,EAAE,aAAa,EAAC,MAAM,4BAA4B,CAAA;AACvG,OAAO,EAAC,0BAA0B,EAAC,MAAM,qCAAqC,CAAA;AAa9E,MAAM,OAAO,oBAAqB,SAAQ,aAAa;IACrD,YAAY,EAAC,WAAW,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,EAAE,YAAY,EAA8B;QAC9F,KAAK,CAAC;YACJ,QAAQ,EAAE,IAAI,QAAQ,CAAC;gBACrB,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE,WAAW;aACvD,CAAC;SACH,CAAC,CAAA;QAEF,MAAM,IAAI,GAA8B;YACtC,mEAAmE;YACnE,eAAe;YACf,GAAG,EAAE,YAAY;YACjB,qBAAqB,EAAE,sBAAsB,CAAC,KAAK;SACpD,CAAA;QAED,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;SAClB;QAED,MAAM,QAAQ,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAA;QAE7C,IAAI,CAAC,eAAe,CAClB,IAAI,yBAAyB,CAAC;YAC5B,QAAQ;YACR,aAAa;SACd,CAAC,CACH,CAAA;QAED,wEAAwE;QACxE,IAAI,GAAG,KAAK,KAAK,EAAE;YACjB,IAAI,CAAC,eAAe,CAClB,IAAI,yBAAyB,CAAC;gBAC5B,QAAQ,EAAE,IAAI,qBAAqB,EAAE;gBACrC,aAAa;aACd,CAAC,CACH,CAAA;SACF;IACH,CAAC;CACF","sourcesContent":["import {InstantaneousMetricReader} from '../../export/InstantaneousMetricReader.js'\nimport {OTLPMetricExporter, OTLPMetricExporterOptions} from '@opentelemetry/exporter-metrics-otlp-http'\nimport {Resource} from '@opentelemetry/resources'\nimport {AggregationTemporality, ConsoleMetricExporter, MeterProvider} from '@opentelemetry/sdk-metrics'\nimport {SemanticResourceAttributes} from '@opentelemetry/semantic-conventions'\n\nexport type Environment = 'production' | 'staging' | 'local'\n\ninterface DefaultMeterProviderOptions {\n  serviceName: string\n  env: string\n  throttleLimit: number\n  useXhr: boolean\n  // CLI addition\n  otelEndpoint: string\n}\n\nexport class DefaultMeterProvider extends MeterProvider {\n  constructor({serviceName, env, throttleLimit, useXhr, otelEndpoint}: DefaultMeterProviderOptions) {\n    super({\n      resource: new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n      }),\n    })\n\n    const opts: OTLPMetricExporterOptions = {\n      // url: OTEL_ENDPOINTS[env as Environment] || OTEL_ENDPOINTS.local,\n      // CLI addition\n      url: otelEndpoint,\n      temporalityPreference: AggregationTemporality.DELTA,\n    }\n\n    if (useXhr) {\n      opts.headers = {}\n    }\n\n    const exporter = new OTLPMetricExporter(opts)\n\n    this.addMetricReader(\n      new InstantaneousMetricReader({\n        exporter,\n        throttleLimit,\n      }),\n    )\n\n    // Add a console exporter to see what we are sending in dev environments\n    if (env === 'dev') {\n      this.addMetricReader(\n        new InstantaneousMetricReader({\n          exporter: new ConsoleMetricExporter(),\n          throttleLimit,\n        }),\n      )\n    }\n  }\n}\n"]}