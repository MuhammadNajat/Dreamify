{"version":3,"file":"InstantaneousMetricReader.js","sourceRoot":"","sources":["../../../../../../src/public/node/vendor/otel-js/export/InstantaneousMetricReader.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,YAAY,EAAC,MAAM,4BAA4B,CAAA;AACvD,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAA;AACpD,OAAO,EAAC,IAAI,EAAC,MAAM,oBAAoB,CAAA;AAEvC,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAA;AAc7C,MAAM,OAAO,yBAA0B,SAAQ,YAAY;IAGzD,YAAY,EAAC,QAAQ,EAAE,aAAa,EAAmC;QACrE,KAAK,CAAC;YACJ,mBAAmB,EAAE,QAAQ,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC;YAC/D,8BAA8B,EAAE,QAAQ,CAAC,4BAA4B,EAAE,IAAI,CAAC,QAAQ,CAAC;SACtF,CAAC,CAAA;QACF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEzB,IAAI,CAAC,YAAY,GAAG,QAAQ;QAC1B,6DAA6D;QAC7D,IAAI,CAAC,YAAY,EACjB,aAAa,CACd,CAAA;IACH,CAAC;IAES,KAAK,CAAC,YAAY;QAC1B,MAAM,EAAC,eAAe,EAAE,MAAM,EAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAExD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,0DAA0D,EAAE,GAAG,MAAM,CAAC,CAAA;SAClF;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,MAAM,EAAE,EAAE;gBAChD,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,OAAO,EAAE;oBAC5C,OAAO,EAAE,CAAA;iBACV;qBAAM;oBACL,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,2DAA2D,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;iBAC9G;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAES,KAAK,CAAC,UAAU;QACxB,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAA;IACjC,CAAC;CACF","sourcesContent":["import type {PushMetricExporter} from '@opentelemetry/sdk-metrics'\nimport {MetricReader} from '@opentelemetry/sdk-metrics'\nimport {ExportResultCode} from '@opentelemetry/core'\nimport {diag} from '@opentelemetry/api'\n\nimport {throttle} from '../utils/throttle.js'\n\nexport interface InstantaneousMetricReaderOptions {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter\n\n  /**\n   * How much the export should be throttled in milliseconds.\n   */\n  throttleLimit: number\n}\n\nexport class InstantaneousMetricReader extends MetricReader {\n  private readonly _exporter: PushMetricExporter\n\n  constructor({exporter, throttleLimit}: InstantaneousMetricReaderOptions) {\n    super({\n      aggregationSelector: exporter.selectAggregation?.bind(exporter),\n      aggregationTemporalitySelector: exporter.selectAggregationTemporality?.bind(exporter),\n    })\n    this._exporter = exporter\n\n    this.onForceFlush = throttle(\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.onForceFlush,\n      throttleLimit,\n    )\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    const {resourceMetrics, errors} = await this.collect({})\n\n    if (errors.length > 0) {\n      diag.error('PeriodicExportingMetricReader: metrics collection errors', ...errors)\n    }\n\n    return new Promise((resolve, reject) => {\n      this._exporter.export(resourceMetrics, (result) => {\n        if (result.code === ExportResultCode.SUCCESS) {\n          resolve()\n        } else {\n          reject(result.error ?? new Error(`InstantaneousMetricReader: metrics export failed (error ${result.error})`))\n        }\n      })\n    })\n  }\n\n  protected async onShutdown(): Promise<void> {\n    await this._exporter.shutdown()\n  }\n}\n"]}