{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../../src/public/node/vendor/otel-js/service/types.ts"],"names":[],"mappings":"AA8BA,MAAM,CAAN,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,+CAAuB,CAAA;IACvB,2CAAmB,CAAA;IACnB,uDAA+B,CAAA;AACjC,CAAC,EAJW,oBAAoB,KAApB,oBAAoB,QAI/B","sourcesContent":["import type {\n  Counter,\n  Histogram,\n  MeterProvider,\n  MetricAttributes,\n  MetricOptions,\n  UpDownCounter,\n} from '@opentelemetry/api'\nimport type {ViewOptions} from '@opentelemetry/sdk-metrics'\n\nexport type CustomMetricLabels<\n  TLabels extends {[key in TKeys]: MetricAttributes},\n  TKeys extends string = keyof TLabels & string,\n> = {\n  [P in TKeys]: TLabels[P] extends MetricAttributes ? TLabels[P] : never\n}\n\nexport type MetricRecording<TAttributes extends MetricAttributes = any> = [value: number, labels?: TAttributes]\n\nexport type RecordMetricFunction<TAttributes extends MetricAttributes = any> = (\n  ...args: MetricRecording<TAttributes>\n) => void\n\nexport type OnRecordCallback<TAttributes extends MetricAttributes = any> = (\n  metricName: string,\n  ...args: MetricRecording<TAttributes>\n) => MetricRecording<TAttributes> | void\n\nexport type MetricInstrument = Histogram | Counter | UpDownCounter\n\nexport enum MetricInstrumentType {\n  Histogram = 'Histogram',\n  Counter = 'Counter',\n  UpDownCounter = 'UpDownCounter',\n}\n\nexport type MetricDescriptor = MetricOptions &\n  (\n    | {\n        type: MetricInstrumentType.Histogram\n        /**\n         * Boundaries are required for Histograms.\n         */\n        boundaries: number[]\n      }\n    | {\n        type: MetricInstrumentType.Counter | MetricInstrumentType.UpDownCounter\n      }\n  )\n\nexport interface MetricsConfig {\n  [key: string]: MetricDescriptor\n}\n\nexport interface OtelService {\n  readonly serviceName: string\n\n  getMeterProvider(): MeterProvider\n\n  addView(viewOptions: ViewOptions): void\n\n  record<TAttributes extends MetricAttributes = any>(...args: Parameters<OnRecordCallback<TAttributes>>): void\n\n  /**\n   * `onRecord` callback is called when a metric is recorded.\n   * Returns a function to unsubscribe.\n   */\n  addOnRecord(onRecord: OnRecordCallback): () => void\n\n  removeOnRecord(onRecord: OnRecordCallback): void\n\n  registerMetric(metricName: string, options: MetricDescriptor): void\n\n  register(metrics: MetricsConfig): void\n\n  shutdown(): Promise<void>\n}\n"]}