{"version":3,"file":"tree-kill.js","sourceRoot":"","sources":["../../../src/public/node/tree-kill.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable jsdoc/require-throws */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable no-restricted-imports */\n\nimport {outputDebug} from './output.js'\nimport {printEventsJson} from '../../private/node/demo-recorder.js'\nimport {exec, spawn} from 'child_process'\n\ninterface ProcessTree {\n  [key: string]: string[]\n}\n\ntype AfterKillCallback = (error?: Error) => void\n\n/**\n * Kills the process that calls the method and all its children.\n *\n * @param pid - Pid of the process to kill.\n * @param killSignal - Type of kill signal to be used.\n * @param killRoot - Whether to kill the root process.\n * @param callback - Optional callback to run after killing the processes.\n */\nexport function treeKill(\n  pid: number | string = process.pid,\n  killSignal = 'SIGTERM',\n  killRoot = true,\n  callback?: AfterKillCallback,\n): void {\n  const after =\n    callback ??\n    ((error?: Error) => {\n      if (error) outputDebug(`Failed to kill process ${pid}: ${error}`)\n    })\n  printEventsJson()\n  adaptedTreeKill(pid, killSignal, killRoot, after)\n}\n\n/**\n * Adapted from https://github.com/pkrumins/node-tree-kill.\n *\n * Our implementation allows to skip killing the root process. This is useful for example when\n * gracefully exiting the 'dev' process, as the default tree-kill implementation will cause it\n * to exit with a non-zero code. Instead, we want to treat it as a graceful termination.\n * In addition, we also add debug logging for better visibility in what tree-kill is doing.\n *\n * @param pid - Pid of the process to kill.\n * @param killSignal - Type of kill signal to be used.\n * @param killRoot - Whether to kill the root process.\n * @param callback - Optional callback to run after killing the processes.\n */\nfunction adaptedTreeKill(\n  pid: number | string,\n  killSignal: string,\n  killRoot: boolean,\n  callback: (error?: Error) => void,\n): void {\n  const rootPid = typeof pid === 'number' ? pid.toString() : pid\n\n  if (Number.isNaN(rootPid)) {\n    if (callback) {\n      return callback(new Error('pid must be a number'))\n    } else {\n      throw new Error('pid must be a number')\n    }\n  }\n\n  // A map from parent pid to an array of children pids\n  const tree: ProcessTree = {}\n  tree[rootPid] = []\n\n  // A set of pids to visit. We use it to recursively find all the children pids\n  const pidsToProcess: Set<string> = new Set()\n  pidsToProcess.add(rootPid)\n\n  switch (process.platform) {\n    case 'win32':\n      // @ts-ignore\n      exec(`taskkill /pid ${pid} /T /F`, callback)\n      break\n    case 'darwin':\n      buildProcessTree(\n        rootPid,\n        tree,\n        pidsToProcess,\n        function (parentPid: string) {\n          return spawn('pgrep', ['-lfP', parentPid])\n        },\n        function () {\n          killAll(tree, killSignal, rootPid, killRoot, callback)\n        },\n      )\n      break\n    // Linux\n    default:\n      buildProcessTree(\n        rootPid,\n        tree,\n        pidsToProcess,\n        function (parentPid: string) {\n          return spawn('ps', ['-o', 'pid command', '--no-headers', '--ppid', parentPid])\n        },\n        function () {\n          killAll(tree, killSignal, rootPid, killRoot, callback)\n        },\n      )\n      break\n  }\n}\n\n/**\n * Kills all processes in the process tree.\n *\n * @param tree - Process tree.\n * @param killSignal - Type of kill signal to be used.\n * @param rootPid - Pid of the root process.\n * @param killRoot - Whether to kill the root process.\n * @param callback - Optional callback to run after killing the processes.\n */\nfunction killAll(\n  tree: ProcessTree,\n  killSignal: string,\n  rootPid: string,\n  killRoot: boolean,\n  callback: AfterKillCallback,\n): void {\n  const killed: Set<string> = new Set()\n  try {\n    Object.keys(tree).forEach(function (pid) {\n      tree[pid]!.forEach(function (pidpid) {\n        if (!killed.has(pidpid)) {\n          killPid(pidpid, killSignal)\n          killed.add(pidpid)\n        }\n      })\n      if (pid === rootPid && killRoot && !killed.has(pid)) {\n        killPid(pid, killSignal)\n        killed.add(pid)\n      }\n    })\n  } catch (err: unknown) {\n    if (callback) {\n      // @ts-ignore\n      return callback(err)\n    } else {\n      throw err\n    }\n  }\n  if (callback) {\n    return callback()\n  }\n}\n\n/**\n * Kills a process.\n *\n * @param pid - Pid of the process to kill.\n * @param killSignal - Type of kill signal to be used.\n */\nfunction killPid(pid: string, killSignal: string) {\n  try {\n    process.kill(parseInt(pid, 10), killSignal)\n  } catch (err) {\n    // @ts-ignore\n    if (err.code !== 'ESRCH') throw err\n  }\n}\n\n/**\n * Builds a process tree.\n *\n * @param parentPid - Pid of the parent process.\n * @param tree - Process tree.\n * @param pidsToProcess - Pids to process.\n * @param spawnChildProcessesList - Function to spawn child processes.\n * @param cb - Callback to run after building the process tree.\n */\nfunction buildProcessTree(\n  parentPid: string,\n  tree: ProcessTree,\n  pidsToProcess: Set<string>,\n  spawnChildProcessesList: (parentPid: string) => ReturnType<typeof spawn>,\n  cb: () => void,\n) {\n  const ps = spawnChildProcessesList(parentPid)\n  let allData = ''\n  ps.stdout?.on('data', function (data: Buffer) {\n    const dataStr = data.toString('ascii')\n    allData += dataStr\n  })\n\n  const onClose = (code: number) => {\n    pidsToProcess.delete(parentPid)\n\n    if (code !== 0) {\n      // no more parent processes\n      if (pidsToProcess.size === 0) {\n        return cb()\n      }\n      return\n    }\n\n    allData\n      .trim()\n      .split('\\n')\n      .forEach(function (line) {\n        const match = line.match(/^(\\d+)\\s(.*)$/)\n        if (match) {\n          const pid = match[1]!\n          const cmd = match[2]!\n          tree[parentPid]!.push(pid)\n          tree[pid] = []\n          outputDebug(`Killing process ${pid}: ${cmd}`)\n          pidsToProcess.add(pid)\n          buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb)\n        }\n      })\n  }\n\n  ps.on('close', onClose)\n}\n"]}