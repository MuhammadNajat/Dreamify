{"version":3,"file":"toml.js","sourceRoot":"","sources":["../../../src/public/node/toml.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,IAAI,MAAM,aAAa,CAAA;AAInC;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,KAAa;IACtC,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;IACrD,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;AACpC,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CAAC,OAAyB;IAClD,wFAAwF;IACxF,MAAM,eAAe,GAAG,OAAuB,CAAA;IAC/C,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAA;AACxC,CAAC","sourcesContent":["import {JsonMap} from '../../private/common/json.js'\nimport * as toml from '@iarna/toml'\n\nexport type JsonMapType = JsonMap\n\n/**\n * Given a TOML string, it returns a JSON object.\n *\n * @param input - TOML string.\n * @returns JSON object.\n */\nexport function decodeToml(input: string): object {\n  const normalizedInput = input.replace(/\\r\\n$/g, '\\n')\n  return toml.parse(normalizedInput)\n}\n\n/**\n * Given a JSON object, it returns a TOML string.\n *\n * @param content - JSON object.\n * @returns TOML string.\n */\nexport function encodeToml(content: JsonMap | object): string {\n  // our JsonMap type is fine with nulls/undefined, but the typing for TOML library isn't.\n  const tomlSafeContent = content as toml.JsonMap\n  return toml.stringify(tomlSafeContent)\n}\n"]}