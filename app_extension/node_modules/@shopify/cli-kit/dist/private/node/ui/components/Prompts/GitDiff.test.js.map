{"version":3,"file":"GitDiff.test.js","sourceRoot":"","sources":["../../../../../../src/private/node/ui/components/Prompts/GitDiff.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import {GitDiff} from './GitDiff.js'\nimport {render} from '../../../testing/ui.js'\nimport {unstyled} from '../../../../../public/node/output.js'\nimport {afterEach, describe, expect, test, vi} from 'vitest'\nimport React from 'react'\nimport {platformAndArch} from '@shopify/cli-kit/node/os'\n\nafterEach(async () => {\n  await vi.unstubAllGlobals()\n})\n\nconst runningOnWindows = platformAndArch().platform === 'windows'\n\ndescribe('GitDiff', async () => {\n  test('renders correctly when no changes exist', async () => {\n    const gitDiff = {\n      baselineContent: 'hello',\n      updatedContent: 'hello',\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(lastFrame()).toEqual('No changes.')\n  })\n\n  test('renders correctly when changes exist', async () => {\n    const gitDiff = {\n      baselineContent: 'hello\\n',\n      updatedContent: 'world\\n',\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"- hello\n      + world\"\n    `)\n  })\n\n  test('renders correctly when changes exist and are several lines long', async () => {\n    const gitDiff = {\n      baselineContent: 'hello\\nworld\\nfoobar\\n',\n      updatedContent: 'world\\nfoobar\\nhello\\n',\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"- hello\n        world\n        foobar\n      + hello\"\n    `)\n  })\n\n  test.skipIf(runningOnWindows)('displays color correctly', async () => {\n    const gitDiff = {\n      baselineContent: 'hello\\nworld\\n',\n      updatedContent: 'world\\nhello\\n',\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\u001b[31m- hello\u001b[m\u001b[39m\n        world\u001b[m\n      \u001b[32m+ \u001b[m\u001b[32mhello\u001b[m\u001b[0m\u001b[39m\"\n    `)\n  })\n\n  test.skipIf(runningOnWindows)('respects no-color mode', async () => {\n    vi.stubGlobal('process', {...process, env: {...process.env, FORCE_COLOR: '0'}})\n    const gitDiff = {\n      baselineContent: 'hello\\nworld\\n',\n      updatedContent: 'world\\nhello\\n',\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(lastFrame()!).toMatchInlineSnapshot(`\n        \"- hello\n          world\n        + hello\"\n      `)\n  })\n\n  test.skipIf(runningOnWindows)('ignores newline changes', async () => {\n    const expectedDiff = `\n      \"- hello\n        world\n        foobar\n      + hello\"\n    `\n\n    const gitDiff = {\n      baselineContent: 'hello\\nworld\\nfoobar\\n',\n      updatedContent: 'world\\nfoobar\\nhello',\n    }\n\n    // Removing a newline\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(expectedDiff)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(expectedDiff)\n  })\n\n  test.skipIf(runningOnWindows)('renders correctly when changes exist in multiple areas of a file', async () => {\n    const baselineContent = `hello\nworld\nfoobar\nlorem\nipsum\ndolor\nsit\namet\nfoo\nbar\n`\n    const updatedContent = `world\nfoobar\nhello\nlorem\nipsum\ndolor\nsit\namet\nfoo\nqux`\n\n    const gitDiff = {\n      baselineContent,\n      updatedContent,\n    }\n\n    const {lastFrame} = render(<GitDiff gitDiff={gitDiff} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"- hello\n        world\n        foobar\n      + hello\n        lorem\n\n        @@ -9,2 +9,2 @@ amet\n        foo\n      - bar\n      + qux\"\n    `)\n  })\n})\n"]}