{"version":3,"file":"Scrollbar.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/Scrollbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import {shouldDisplayColors} from '../../../../public/node/output.js'\nimport {Box, Text} from 'ink'\nimport React, {FunctionComponent} from 'react'\n\nexport interface ScrollbarProps {\n  containerHeight: number\n  visibleListSectionLength: number\n  fullListLength: number\n  visibleFromIndex: number\n  noColor?: boolean\n}\n\nconst BACKGROUND_CHAR = '│'\nconst SCROLLBOX_CHAR = '║'\n\nconst Scrollbar: FunctionComponent<ScrollbarProps> = ({\n  containerHeight,\n  visibleListSectionLength,\n  fullListLength,\n  visibleFromIndex,\n  noColor = !shouldDisplayColors(),\n}) => {\n  const displayArrows = containerHeight >= 4 && noColor\n  const visibleToIndex = visibleFromIndex + visibleListSectionLength - 1\n\n  // Leave 2 rows for top/bottom arrows when there is vertical room for them.\n  const fullHeight = displayArrows ? containerHeight - 2 : containerHeight\n  const scrollboxHeight = Math.min(\n    fullHeight - 1,\n    Math.ceil(Math.min(1, visibleListSectionLength / fullListLength) * fullHeight),\n  )\n\n  let topBuffer: number\n  // Ensure it scrolls all the way to the bottom when we hit the bottom\n  if (visibleToIndex >= fullListLength - 1) {\n    topBuffer = fullHeight - scrollboxHeight\n  } else {\n    // This is the actual number of rows available for the scrollbar to go up and down\n    const scrollingLength = fullHeight - scrollboxHeight\n    // This is the number of times the screen itself can scroll down\n    const scrollableIncrements = fullListLength - visibleListSectionLength\n\n    topBuffer = Math.max(\n      // Never go negative, that causes errors!\n      0,\n      Math.min(\n        // Never have more buffer than filling in all spaces above the scrollbox\n        fullHeight - scrollboxHeight,\n        Math.round((visibleFromIndex / scrollableIncrements) * scrollingLength),\n      ),\n    )\n  }\n  const bottomBuffer = fullHeight - scrollboxHeight - topBuffer\n\n  const backgroundChar = noColor ? BACKGROUND_CHAR : ' '\n  const scrollboxChar = noColor ? SCROLLBOX_CHAR : ' '\n  const bgColor = noColor ? undefined : 'gray'\n  const scrollboxColor = noColor ? undefined : 'cyan'\n\n  return (\n    <Box flexDirection=\"column\">\n      {displayArrows ? <Text>△</Text> : null}\n\n      <Box width={1}>\n        <Text backgroundColor={bgColor}>{backgroundChar.repeat(topBuffer)}</Text>\n      </Box>\n      <Box width={1}>\n        <Text backgroundColor={scrollboxColor}>{scrollboxChar.repeat(scrollboxHeight)}</Text>\n      </Box>\n      <Box width={1}>\n        <Text backgroundColor={bgColor}>{backgroundChar.repeat(bottomBuffer)}</Text>\n      </Box>\n\n      {displayArrows ? <Text>▽</Text> : null}\n    </Box>\n  )\n}\n\nexport {Scrollbar}\n"]}