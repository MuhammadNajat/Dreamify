{"version":3,"file":"List.test.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/List.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAA;AAC9B,OAAO,EAAC,QAAQ,EAAC,MAAM,mCAAmC,CAAA;AAC1D,OAAO,EAAC,MAAM,EAAC,MAAM,qBAAqB,CAAA;AAC1C,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAC7C,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,QAAQ,CAAC,MAAM,EAAE,KAAK,IAAI,EAAE;IAC1B,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,YAAY;YACnB,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;YACrC,OAAO,EAAE,KAAK;SACf,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,GAAI,CAAC,CAAA;QAEjD,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;KAKpD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;YACrC,MAAM,EAAE,IAAI;SACb,CAAA;QAED,MAAM,EAAC,SAAS,EAAE,eAAe,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,GAAI,CAAC,CAAA;QAElE,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;KAI1D,CAAC,CAAA;QAEF,MAAM,EAAC,SAAS,EAAE,iBAAiB,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,EAAE,MAAM,EAAE,KAAK,GAAI,CAAC,CAAA;QAEnF,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;KAI5D,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,YAAY;YACnB,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;YACrC,KAAK,EAAE,KAAK;SACb,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,GAAI,CAAC,CAAA;QAEjD,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;KAKzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;YACrC,OAAO,EAAE,IAAI;SACd,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,GAAI,CAAC,CAAA;QAEjD,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;KAIpD,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,OAAO,GAAG;YACd,KAAK,EAAE;gBACL,YAAY;gBACZ;oBACE,IAAI,EAAE,SAAS;iBAChB;aACF;YACD,KAAK,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;YACrC,OAAO,EAAE,KAAK;SACf,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,IAAI,OAAK,OAAO,GAAI,CAAC,CAAA;QAEjD,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;KAKzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {List} from './List.js'\nimport {unstyled} from '../../../../public/node/output.js'\nimport {render} from '../../testing/ui.js'\nimport {describe, expect, test} from 'vitest'\nimport React from 'react'\n\ndescribe('List', async () => {\n  test('renders unordered items', async () => {\n    const options = {\n      title: 'List title',\n      items: ['Item 1', 'Item 2', 'Item 3'],\n      ordered: false,\n    }\n\n    const {lastFrame} = render(<List {...options} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"List title\n        • Item 1\n        • Item 2\n        • Item 3\"\n    `)\n  })\n\n  test('renders items with margin or not', async () => {\n    const options = {\n      items: ['Item 1', 'Item 2', 'Item 3'],\n      margin: true,\n    }\n\n    const {lastFrame: marginLastFrame} = render(<List {...options} />)\n\n    expect(unstyled(marginLastFrame()!)).toMatchInlineSnapshot(`\n      \"  • Item 1\n        • Item 2\n        • Item 3\"\n    `)\n\n    const {lastFrame: noMarginLastFrame} = render(<List {...options} margin={false} />)\n\n    expect(unstyled(noMarginLastFrame()!)).toMatchInlineSnapshot(`\n      \"• Item 1\n      • Item 2\n      • Item 3\"\n    `)\n  })\n\n  test('can give the text a color', async () => {\n    const options = {\n      title: 'List title',\n      items: ['Item 1', 'Item 2', 'Item 3'],\n      color: 'red',\n    }\n\n    const {lastFrame} = render(<List {...options} />)\n\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\u001b[31mList title\u001b[39m\n        \u001b[31m•\u001b[39m \u001b[31mItem 1\u001b[39m\n        \u001b[31m•\u001b[39m \u001b[31mItem 2\u001b[39m\n        \u001b[31m•\u001b[39m \u001b[31mItem 3\u001b[39m\"\n    `)\n  })\n\n  test('renders ordered items', async () => {\n    const options = {\n      items: ['Item 1', 'Item 2', 'Item 3'],\n      ordered: true,\n    }\n\n    const {lastFrame} = render(<List {...options} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"  1. Item 1\n        2. Item 2\n        3. Item 3\"\n    `)\n  })\n\n  test('title can be made of tokens', async () => {\n    const options = {\n      title: [\n        'List title',\n        {\n          bold: ' (bold)',\n        },\n      ],\n      items: ['Item 1', 'Item 2', 'Item 3'],\n      ordered: false,\n    }\n\n    const {lastFrame} = render(<List {...options} />)\n\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"List title \u001b[1m (bold)\u001b[22m\n        • Item 1\n        • Item 2\n        • Item 3\"\n    `)\n  })\n})\n"]}