{"version":3,"file":"Scrollbar.test.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/Scrollbar.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAA;AACxC,OAAO,EAAC,MAAM,EAAC,MAAM,qBAAqB,CAAA;AAC1C,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAA;AAC7C,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;IAC/B,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,OAAO,GAAG;YACd,eAAe,EAAE,EAAE;YACnB,wBAAwB,EAAE,EAAE;YAC5B,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,CAAC;SACpB,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,SAAS,OAAK,OAAO,GAAI,CAAC,CAAA;QAEtD,yBAAyB;QACzB,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;KAWzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,OAAO,GAAG;YACd,eAAe,EAAE,EAAE;YACnB,wBAAwB,EAAE,EAAE;YAC5B,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,EAAE;SACrB,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,SAAS,OAAK,OAAO,GAAI,CAAC,CAAA;QAEtD,6BAA6B;QAC7B,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;KAWzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,OAAO,GAAG;YACd,eAAe,EAAE,EAAE;YACnB,wBAAwB,EAAE,EAAE;YAC5B,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,EAAE;SACrB,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,SAAS,OAAK,OAAO,GAAI,CAAC,CAAA;QAEtD,wBAAwB;QACxB,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;KAWzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,OAAO,GAAG;YACd,eAAe,EAAE,EAAE;YACnB,wBAAwB,EAAE,EAAE;YAC5B,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,EAAE;YACpB,OAAO,EAAE,IAAI;SACd,CAAA;QAED,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,CAAC,oBAAC,SAAS,OAAK,OAAO,GAAI,CAAC,CAAA;QACtD,6BAA6B;QAC7B,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;KAWzC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {Scrollbar} from './Scrollbar.js'\nimport {render} from '../../testing/ui.js'\nimport {describe, expect, test} from 'vitest'\nimport React from 'react'\n\ndescribe('Scrollbar', async () => {\n  test('renders correctly when at the top of the list', async () => {\n    const options = {\n      containerHeight: 10,\n      visibleListSectionLength: 10,\n      fullListLength: 50,\n      visibleFromIndex: 0,\n    }\n\n    const {lastFrame} = render(<Scrollbar {...options} />)\n\n    // First 2 are colored in\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\\u001b[46m \\u001b[49m\n      \\u001b[46m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\"\n    `)\n  })\n\n  test('renders correctly when in the middle of the list', async () => {\n    const options = {\n      containerHeight: 10,\n      visibleListSectionLength: 10,\n      fullListLength: 50,\n      visibleFromIndex: 20,\n    }\n\n    const {lastFrame} = render(<Scrollbar {...options} />)\n\n    // Scrollbar is in the middle\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[46m \\u001b[49m\n      \\u001b[46m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\"\n    `)\n  })\n\n  test('renders correctly when at the bottom of the list', async () => {\n    const options = {\n      containerHeight: 10,\n      visibleListSectionLength: 10,\n      fullListLength: 50,\n      visibleFromIndex: 40,\n    }\n\n    const {lastFrame} = render(<Scrollbar {...options} />)\n\n    // Last 2 are colored in\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[100m \\u001b[49m\n      \\u001b[46m \\u001b[49m\n      \\u001b[46m \\u001b[49m\"\n    `)\n  })\n\n  test('renders correctly in the middle of the list in no-color mode', async () => {\n    const options = {\n      containerHeight: 10,\n      visibleListSectionLength: 10,\n      fullListLength: 50,\n      visibleFromIndex: 20,\n      noColor: true,\n    }\n\n    const {lastFrame} = render(<Scrollbar {...options} />)\n    // Scrollbar is in the middle\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"△\n      │\n      │\n      │\n      ║\n      ║\n      │\n      │\n      │\n      ▽\"\n    `)\n  })\n})\n"]}