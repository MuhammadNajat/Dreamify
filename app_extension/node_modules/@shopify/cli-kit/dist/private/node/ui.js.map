{"version":3,"file":"ui.js","sourceRoot":"","sources":["../../../src/private/node/ui.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,UAAU,EAAoB,sBAAsB,EAAC,MAAM,6BAA6B,CAAA;AAC5G,OAAO,EAAC,UAAU,EAAC,MAAM,oCAAoC,CAAA;AAC7D,OAAO,EAAC,QAAQ,EAAC,MAAM,gCAAgC,CAAA;AAEvD,OAAO,EAAM,MAAM,IAAI,SAAS,EAAgB,MAAM,KAAK,CAAA;AAC3D,OAAO,EAAC,YAAY,EAAC,MAAM,QAAQ,CAAA;AAQnC,MAAM,UAAU,UAAU,CACxB,OAAoB,EACpB,EAAC,QAAQ,GAAG,MAAM,EAAE,MAAM,GAAG,UAAU,EAAE,aAAa,EAAoB;IAE1E,MAAM,EAAC,MAAM,EAAE,OAAO,EAAC,GAAG,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;IAE9D,IAAI,MAAM,EAAE;QACV,IAAI,UAAU,EAAE;YAAE,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;QAC9C,sBAAsB,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC,CAAC,CAAA;KACtE;IAED,OAAO,EAAE,CAAA;IAET,OAAO,MAAM,CAAA;AACf,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,MAAM,CAAC,OAAoB,EAAE,OAAuB;IACxE,MAAM,EAAC,aAAa,EAAC,GAAG,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;IACnD,MAAM,aAAa,EAAE,CAAA;IACrB,4FAA4F;IAC5F,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAA;AACxD,CAAC;AAOD,MAAM,OAAO,MAAO,SAAQ,YAAY;IAMtC,YAAY,OAA0C;QACpD,KAAK,EAAE,CAAA;QAJA,WAAM,GAAa,EAAE,CAAA;QAS9B,UAAK,GAAG,CAAC,KAAa,EAAE,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QACzB,CAAC,CAAA;QAED,cAAS,GAAG,GAAG,EAAE;YACf,OAAO,IAAI,CAAC,UAAU,CAAA;QACxB,CAAC,CAAA;QAXC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAA;QACpC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAA;IAChC,CAAC;CAUF;AAED,MAAM,YAAY,GAAG,CAAC,OAAqB,EAAE,aAA6B,EAAY,EAAE;IACtF,MAAM,OAAO,GAAG,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAA;IAC1D,8DAA8D;IAC9D,MAAM,MAAM,GAAI,aAAa,EAAE,MAAc,IAAI,IAAI,MAAM,CAAC,EAAC,OAAO,EAAC,CAAC,CAAA;IAEtE,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,EAAE;QAClC,MAAM;QACN,KAAK,EAAE,IAAI;QACX,WAAW,EAAE,KAAK;QAClB,YAAY,EAAE,KAAK;KACpB,CAAC,CAAA;IAEF,OAAO;QACL,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE;QAC1B,OAAO,EAAE,QAAQ,CAAC,OAAO;KAC1B,CAAA;AACH,CAAC,CAAA;AAED,MAAM,UAAU,WAAW,CAAC,KAAa,EAAE,GAAQ,EAAE,IAAI,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC;IAC/F,IAAI,KAAK,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE;QAC7B,gEAAgE;QAChE,IAAI,EAAE,CAAA;KACP;AACH,CAAC","sourcesContent":["import {collectLog, consoleLog, Logger, LogLevel, outputWhereAppropriate} from '../../public/node/output.js'\nimport {isUnitTest} from '../../public/node/context/local.js'\nimport {treeKill} from '../../public/node/tree-kill.js'\nimport {ReactElement} from 'react'\nimport {Key, render as inkRender, RenderOptions} from 'ink'\nimport {EventEmitter} from 'events'\n\ninterface RenderOnceOptions {\n  logLevel?: LogLevel\n  logger?: Logger\n  renderOptions?: RenderOptions\n}\n\nexport function renderOnce(\n  element: JSX.Element,\n  {logLevel = 'info', logger = consoleLog, renderOptions}: RenderOnceOptions,\n) {\n  const {output, unmount} = renderString(element, renderOptions)\n\n  if (output) {\n    if (isUnitTest()) collectLog(logLevel, output)\n    outputWhereAppropriate(logLevel, logger, output, {skipUIEvent: true})\n  }\n\n  unmount()\n\n  return output\n}\n\nexport async function render(element: JSX.Element, options?: RenderOptions) {\n  const {waitUntilExit} = inkRender(element, options)\n  await waitUntilExit()\n  // We need to wait for other pending tasks -- unmounting of the ink component -- to complete\n  return new Promise((resolve) => setImmediate(resolve))\n}\n\ninterface Instance {\n  output: string | undefined\n  unmount: () => void\n}\n\nexport class Stdout extends EventEmitter {\n  columns: number\n  rows: number\n  readonly frames: string[] = []\n  private _lastFrame?: string\n\n  constructor(options: {columns?: number; rows?: number}) {\n    super()\n    this.columns = options.columns ?? 80\n    this.rows = options.rows ?? 80\n  }\n\n  write = (frame: string) => {\n    this.frames.push(frame)\n    this._lastFrame = frame\n  }\n\n  lastFrame = () => {\n    return this._lastFrame\n  }\n}\n\nconst renderString = (element: ReactElement, renderOptions?: RenderOptions): Instance => {\n  const columns = isUnitTest() ? 80 : process.stdout.columns\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const stdout = (renderOptions?.stdout as any) ?? new Stdout({columns})\n\n  const instance = inkRender(element, {\n    stdout,\n    debug: true,\n    exitOnCtrlC: false,\n    patchConsole: false,\n  })\n\n  return {\n    output: stdout.lastFrame(),\n    unmount: instance.unmount,\n  }\n}\n\nexport function handleCtrlC(input: string, key: Key, exit = () => treeKill(process.pid, 'SIGINT')) {\n  if (input === 'c' && key.ctrl) {\n    // Exceptions thrown in hooks aren't caught by our errorHandler.\n    exit()\n  }\n}\n"]}