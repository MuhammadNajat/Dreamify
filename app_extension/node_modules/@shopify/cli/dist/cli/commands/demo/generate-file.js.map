{"version":3,"file":"generate-file.js","sourceRoot":"","sources":["../../../../src/cli/commands/demo/generate-file.ts"],"names":[],"mappings":"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","sourcesContent":["import {demoStepsSchema, DemoStep} from '../../services/demo.js'\nimport zodToJsonSchema from 'zod-to-json-schema'\nimport {Flags} from '@oclif/core'\nimport Command from '@shopify/cli-kit/node/base-command'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {mkdir, fileExists, readFile, writeFile} from '@shopify/cli-kit/node/fs'\nimport {outputContent, outputSuccess, outputToken} from '@shopify/cli-kit/node/output'\nimport {resolvePath, joinPath, cwd} from '@shopify/cli-kit/node/path'\nimport {renderAutocompletePrompt} from '@shopify/cli-kit/node/ui'\nimport {fileURLToPath} from 'url'\n\nconst schemaFilename = 'demo-schema.json'\n\nexport default class GenerateFile extends Command {\n  static description = 'Create a command design file'\n  static summary = 'Creates a JSON file alongside a JSON schema that will validate it'\n  static hidden = true\n\n  static flags = {\n    path: Flags.string({\n      hidden: false,\n      description: 'The directory for generating the demo file.',\n      env: 'SHOPIFY_FLAG_PATH',\n      parse: async (input) => resolvePath(input),\n      default: async () => cwd(),\n    }),\n    file: Flags.string({\n      hidden: false,\n      description: 'The name of the demo file.',\n      env: 'SHOPIFY_FLAG_FILENAME',\n      required: true,\n      validate: (input: string) => {\n        if (input === schemaFilename) {\n          return `The demo file can't be named ${schemaFilename}, as this is used for the schema file.`\n        }\n        return true\n      },\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(GenerateFile)\n    await mkdir(flags.path)\n    const demoFilePath = joinPath(flags.path, flags.file)\n    if (await fileExists(demoFilePath)) {\n      throw new AbortError(`The file ${demoFilePath} already exists.`)\n    }\n    const demoSchemaPath = joinPath(flags.path, schemaFilename)\n    const jsonSchema = zodToJsonSchema.default(demoStepsSchema, 'demo-steps')\n    await Promise.all([\n      writeFile(demoSchemaPath, JSON.stringify(jsonSchema, null, 2)),\n      writeFile(\n        demoFilePath,\n        JSON.stringify(\n          {\n            $schema: `./${schemaFilename}`,\n            steps: await selectSteps(),\n          },\n          null,\n          2,\n        ),\n      ),\n    ])\n    outputSuccess(outputContent`Created ${outputToken.path(demoFilePath)} and ${outputToken.path(demoSchemaPath)}`)\n  }\n}\n\nasync function selectSteps(): Promise<DemoStep[]> {\n  const catalogFile = joinPath(fileURLToPath(import.meta.url), '../../../../../assets/demo-catalog.json')\n  const {steps} = JSON.parse(await readFile(catalogFile)) as {steps: DemoStep[]}\n  const selectedSteps: DemoStep[] = []\n  while (true) {\n    // eslint-disable-next-line no-await-in-loop\n    const stepSelection = await renderAutocompletePrompt({\n      message: 'Add a step to the demo file',\n      choices: [\n        {\n          label: \"I'm done\",\n          value: 'done',\n        },\n        ...steps.map(({title, type}) => {\n          return {\n            label: title!,\n            value: title!,\n            group: type,\n          }\n        }),\n      ],\n    })\n    if (stepSelection === 'done') break\n    selectedSteps.push(steps.find(({title}) => title === stepSelection)!)\n  }\n  return selectedSteps\n}\n"]}