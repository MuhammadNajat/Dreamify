{"version":3,"file":"command-flags.js","sourceRoot":"","sources":["../../../../src/cli/commands/debug/command-flags.ts"],"names":[],"mappings":"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","sourcesContent":["import Command from '@shopify/cli-kit/node/base-command'\nimport {renderTable, renderText} from '@shopify/cli-kit/node/ui'\nimport {Flags} from '@oclif/core'\n\nexport default class CommandFlags extends Command {\n  static description = 'View all the available command flags'\n  static hidden = true\n\n  static flags = {\n    // Similar options as the `commands` command from `plugin-commands`\n    csv: Flags.boolean({\n      description: 'Output as CSV',\n      env: 'SHOPIFY_FLAG_OUTPUT_CSV',\n      default: false,\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(CommandFlags)\n\n    const data: {pluginName: string; command: string; flagName: string; flagChar: string; flagEnv?: string}[] = []\n    for (const plugin of this.config.plugins) {\n      for (const command of plugin.commands) {\n        // We have to load the command, otherwise OCLIF will just use the manifest, and we need the actual class\n        // eslint-disable-next-line no-await-in-loop\n        const loaded = await command.load()\n\n        let pluginName\n        if (plugin.name.startsWith('@shopify')) {\n          pluginName = plugin.name.substring('@shopify/'.length)\n        } else {\n          pluginName = plugin.name.startsWith('@oclif') ? plugin.name.substring('@oclif/'.length) : plugin.name\n        }\n\n        const flags = loaded.flags\n        if (flags) {\n          for (const [flagName, flagConfig] of Object.entries(flags)) {\n            data.push({\n              pluginName,\n              command: command.id,\n              flagName: `--${flagName}`,\n              flagChar: flagConfig.char ? `-${flagConfig.char}` : '',\n              flagEnv: flagConfig.env,\n            })\n          }\n        }\n      }\n    }\n\n    if (flags.csv) {\n      const columns = ['pluginName', 'command', 'flagName', 'flagChar', 'flagEnv'] as const\n      const header = `${columns.join(',')}\\n`\n      const rows = data.map((obj) => columns.map((key) => obj[key]).join(',')).join('\\n')\n      const csvString = header + rows\n      renderText({text: csvString})\n    } else {\n      renderTable({\n        rows: data,\n        columns: {\n          pluginName: {\n            header: 'plugin',\n            color: 'red',\n          },\n          command: {},\n          flagName: {\n            header: 'long flag',\n            color: 'green',\n          },\n          flagChar: {\n            header: 'short flag',\n            color: 'green',\n          },\n          flagEnv: {\n            header: 'env variable',\n            color: 'blueBright',\n          },\n        },\n      })\n    }\n  }\n}\n"]}