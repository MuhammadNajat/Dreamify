{"version":3,"file":"write-app-configuration-file.js","sourceRoot":"","sources":["../../../../src/cli/services/app/write-app-configuration-file.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppConfiguration, AppSchema} from '../../models/app/app.js'\nimport {writeFileSync} from '@shopify/cli-kit/node/fs'\nimport {JsonMapType, encodeToml} from '@shopify/cli-kit/node/toml'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\n// toml does not support comments and there aren't currently any good/maintained libs for this,\n// so for now, we manually add comments\nexport async function writeAppConfigurationFile(configuration: AppConfiguration) {\n  const initialComment = `# Learn more about configuring your app at https://shopify.dev/docs/apps/tools/cli/configuration\\n`\n  const scopesComment = `\\n# Learn more at https://shopify.dev/docs/apps/tools/cli/configuration#access_scopes`\n\n  const sorted = rewriteConfiguration(AppSchema, configuration) as {[key: string]: string | boolean | object}\n  const fileSplit = encodeToml(sorted as JsonMapType).split(/(\\r\\n|\\r|\\n)/)\n\n  fileSplit.unshift('\\n')\n  fileSplit.unshift(initialComment)\n\n  fileSplit.forEach((line, index) => {\n    if (line === '[access_scopes]') {\n      fileSplit.splice(index + 1, 0, scopesComment)\n    }\n  })\n\n  const file = fileSplit.join('')\n\n  writeFileSync(configuration.path, file)\n}\n\nexport const rewriteConfiguration = <T extends zod.ZodTypeAny>(schema: T, config: unknown): unknown => {\n  if (schema === null || schema === undefined) return null\n  if (schema instanceof zod.ZodNullable || schema instanceof zod.ZodOptional)\n    return rewriteConfiguration(schema.unwrap(), config)\n  if (schema instanceof zod.ZodArray) {\n    return (config as unknown[]).map((item) => rewriteConfiguration(schema.element, item))\n  }\n  if (schema instanceof zod.ZodEffects) {\n    return rewriteConfiguration(schema._def.schema, config)\n  }\n  if (schema instanceof zod.ZodObject) {\n    const entries = Object.entries(schema.shape)\n    const confObj = config as {[key: string]: unknown}\n    let result: {[key: string]: unknown} = {}\n    entries.forEach(([key, subSchema]) => {\n      if (confObj !== undefined && confObj[key] !== undefined) {\n        let value = rewriteConfiguration(subSchema as T, confObj[key])\n        if (value instanceof Object && Object.keys(value as object).length === 0) {\n          value = undefined\n        }\n        result = {...result, [key]: value}\n      }\n    })\n    return result\n  }\n  return config\n}\n"]}