{"version":3,"file":"use.js","sourceRoot":"","sources":["../../../../../src/cli/services/app/config/use.ts"],"names":[],"mappings":"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","sourcesContent":["import {getAppConfigurationFileName, loadAppConfiguration} from '../../../models/app/loader.js'\nimport {clearCurrentConfigFile, setCachedAppInfo} from '../../local-storage.js'\nimport {selectConfigFile} from '../../../prompts/config.js'\nimport {AppConfiguration, isCurrentAppSchema} from '../../../models/app/app.js'\nimport {logMetadataForLoadedContext} from '../../context.js'\nimport {GetConfigQuerySchema, GetConfig} from '../../../api/graphql/get_config.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {fileExists} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {RenderAlertOptions, renderSuccess, renderWarning} from '@shopify/cli-kit/node/ui'\nimport {Result, err, ok} from '@shopify/cli-kit/node/result'\nimport {getPackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {formatPackageManagerCommand, outputDebug} from '@shopify/cli-kit/node/output'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\n\nexport interface UseOptions {\n  directory: string\n  configName?: string\n  reset?: boolean\n  warningContent?: RenderAlertOptions\n  shouldRenderSuccess?: boolean\n}\n\nexport default async function use({\n  directory,\n  configName,\n  warningContent,\n  shouldRenderSuccess = true,\n  reset = false,\n}: UseOptions): Promise<string | undefined> {\n  if (reset) {\n    clearCurrentConfigFile(directory)\n    const packageManager = await getPackageManager(directory)\n    renderSuccess({\n      headline: 'Cleared current configuration.',\n      body: [\n        'In order to set a new current configuration, please run',\n        {command: formatPackageManagerCommand(packageManager, 'shopify app config use CONFIG_NAME')},\n        {char: '.'},\n      ],\n    })\n    return\n  }\n\n  if (warningContent) {\n    renderWarning(warningContent)\n  }\n\n  const configFileName = (await getConfigFileName(directory, configName)).valueOrAbort()\n\n  const configuration = await saveCurrentConfig({configFileName, directory})\n\n  if (shouldRenderSuccess) {\n    renderSuccess({\n      headline: `Using configuration file ${configFileName}`,\n    })\n  }\n\n  await logMetadata(configuration)\n\n  return configFileName\n}\n\ninterface SaveCurrentConfigOptions {\n  configFileName: string\n  directory: string\n}\n\nexport async function saveCurrentConfig({configFileName, directory}: SaveCurrentConfigOptions) {\n  const {configuration} = await loadAppConfiguration({configName: configFileName, directory})\n\n  if (isCurrentAppSchema(configuration) && configuration.client_id) {\n    setCachedAppInfo({\n      directory,\n      configFile: configFileName,\n    })\n\n    return configuration\n  } else {\n    throw new AbortError(`Configuration file ${configFileName} needs a client_id.`)\n  }\n}\n\nasync function getConfigFileName(directory: string, configName?: string): Promise<Result<string, string>> {\n  if (configName) {\n    const configFile = getAppConfigurationFileName(configName)\n    if (await fileExists(joinPath(directory, configFile))) {\n      return ok(configFile)\n    } else {\n      return err(`Could not find configuration file ${configFile}`)\n    }\n  }\n  return selectConfigFile(directory)\n}\n\nasync function logMetadata(configuration: AppConfiguration) {\n  const token = await ensureAuthenticatedPartners()\n  const queryVariables = {apiKey: configuration.client_id}\n  const queryResult: GetConfigQuerySchema = await partnersRequest(GetConfig, token, queryVariables)\n\n  if (queryResult.app) {\n    const {app} = queryResult\n\n    await logMetadataForLoadedContext(app)\n  } else {\n    outputDebug(\"Couldn't find app for analytics. Make sure you have a valid client ID.\")\n  }\n}\n"]}