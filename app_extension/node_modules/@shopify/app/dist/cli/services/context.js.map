{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/cli/services/context.ts"],"names":[],"mappings":"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","sourcesContent":["import {selectOrCreateApp} from './dev/select-app.js'\nimport {\n  fetchAllDevStores,\n  fetchAppDetailsFromApiKey,\n  fetchOrgAndApps,\n  fetchOrganizations,\n  fetchOrgFromId,\n  fetchStoreByDomain,\n  FetchResponse,\n  fetchAppExtensionRegistrations,\n} from './dev/fetch.js'\nimport {convertToTestStoreIfNeeded, selectStore} from './dev/select-store.js'\nimport {ensureDeploymentIdsPresence} from './context/identifiers.js'\nimport {createExtension} from './dev/create-extension.js'\nimport {CachedAppInfo, clearCachedAppInfo, getCachedAppInfo, setCachedAppInfo} from './local-storage.js'\nimport link from './app/config/link.js'\nimport {writeAppConfigurationFile} from './app/write-app-configuration-file.js'\nimport {PartnersSession, fetchPartnersSession} from './context/partner-account-info.js'\nimport {reuseDevConfigPrompt, selectOrganizationPrompt} from '../prompts/dev.js'\nimport {\n  AppConfiguration,\n  AppInterface,\n  isCurrentAppSchema,\n  appIsLaunchable,\n  getAppScopesArray,\n} from '../models/app/app.js'\nimport {Identifiers, UuidOnlyIdentifiers, updateAppIdentifiers, getAppIdentifiers} from '../models/app/identifiers.js'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization.js'\nimport metadata from '../metadata.js'\nimport {getAppConfigurationFileName, loadApp, loadAppConfiguration, loadAppName} from '../models/app/loader.js'\nimport {ExtensionInstance} from '../models/extensions/extension-instance.js'\n\nimport {ExtensionRegistration} from '../api/graphql/all_app_extension_registrations.js'\nimport {\n  DevelopmentStorePreviewUpdateInput,\n  DevelopmentStorePreviewUpdateQuery,\n  DevelopmentStorePreviewUpdateSchema,\n} from '../api/graphql/development_preview.js'\nimport {loadLocalExtensionsSpecifications} from '../models/extensions/load-specifications.js'\nimport {tryParseInt} from '@shopify/cli-kit/common/string'\nimport {TokenItem, renderInfo, renderTasks} from '@shopify/cli-kit/node/ui'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent} from '@shopify/cli-kit/node/output'\nimport {getOrganization} from '@shopify/cli-kit/node/environment'\nimport {basename, joinPath} from '@shopify/cli-kit/node/path'\nimport {Config} from '@oclif/core'\nimport {glob} from '@shopify/cli-kit/node/fs'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\n\nexport const InvalidApiKeyErrorMessage = (apiKey: string) => {\n  return {\n    message: outputContent`Invalid Client ID: ${apiKey}`,\n    tryMessage: outputContent`You can find the Client ID in the app settings in the Partners Dashboard.`,\n  }\n}\n\nexport interface DevContextOptions {\n  directory: string\n  apiKey?: string\n  storeFqdn?: string\n  reset: boolean\n  commandConfig: Config\n}\n\ninterface DevContextOutput {\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys'> & {apiSecret?: string}\n  remoteAppUpdated: boolean\n  storeFqdn: string\n  storeId: string\n  updateURLs: boolean | undefined\n}\n\n/**\n * Make sure there is a valid context to execute `generate extension`\n *\n * We just need a valid app API key to access the Specifications API.\n * - If the API key is provided via flag, we use it.\n * - Else, if there is an API key in the current config or cache, we use it.\n * - Else, we prompt the user to select/create an app.\n *\n * The selection is then cached as the \"dev\" app for the current directory.\n */\nexport async function ensureGenerateContext(options: {\n  apiKey?: string\n  directory: string\n  reset: boolean\n  partnersSession: PartnersSession\n  commandConfig: Config\n  configName?: string\n}): Promise<string> {\n  if (options.apiKey) {\n    const app = await fetchAppDetailsFromApiKey(options.apiKey, options.partnersSession.token)\n    if (!app) {\n      const errorMessage = InvalidApiKeyErrorMessage(options.apiKey)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    return app.apiKey\n  }\n\n  const {cachedInfo, remoteApp} = await getAppContext(options)\n\n  if (cachedInfo?.appId && cachedInfo?.orgId) {\n    const org = await fetchOrgFromId(cachedInfo.orgId, options.partnersSession)\n    const app = remoteApp || (await fetchAppDetailsFromApiKey(cachedInfo.appId, options.partnersSession.token))\n    if (!app || !org) {\n      const errorMessage = InvalidApiKeyErrorMessage(cachedInfo.appId)\n      throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n    }\n    showReusedGenerateValues(org.businessName, cachedInfo)\n    return app.apiKey\n  } else {\n    const orgId = cachedInfo?.orgId || (await selectOrg(options.partnersSession))\n    const {organization, apps} = await fetchOrgAndApps(orgId, options.partnersSession)\n    const localAppName = await loadAppName(options.directory)\n    const selectedApp = await selectOrCreateApp(localAppName, apps, organization, options.partnersSession)\n    setCachedAppInfo({\n      appId: selectedApp.apiKey,\n      title: selectedApp.title,\n      directory: options.directory,\n      orgId,\n    })\n    await logMetadataForLoadedContext({\n      organizationId: selectedApp.organizationId,\n      apiKey: selectedApp.apiKey,\n    })\n    return selectedApp.apiKey\n  }\n}\n\n/**\n * Make sure there is a valid context to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is info in the cache or current configuration, check if it is still valid and return it.\n * If there is no info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The info will be updated in the cache or current configuration\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureDevContext(\n  options: DevContextOptions,\n  partnersSession: PartnersSession,\n): Promise<DevContextOutput> {\n  const token = partnersSession.token\n  const {configuration, cachedInfo, remoteApp} = await getAppContext({\n    ...options,\n    partnersSession,\n    promptLinkingApp: !options.apiKey,\n  })\n\n  const orgId = getOrganization() || cachedInfo?.orgId || (await selectOrg(partnersSession))\n\n  let {app: selectedApp, store: selectedStore} = await fetchDevDataFromOptions(options, orgId, token)\n  const organization = await fetchOrgFromId(orgId, partnersSession)\n\n  if (!selectedApp || !selectedStore) {\n    // if we have selected an app or a dev store from a command flag, we keep them\n    // if not, we try to load the app or the dev store from the current config or cache\n    // if that's not available, we prompt the user to choose an existing one or create a new one\n    const [_selectedApp, _selectedStore] = await Promise.all([\n      selectedApp || remoteApp || (cachedInfo?.appId && appFromId(cachedInfo.appId, token)),\n      selectedStore || (cachedInfo?.storeFqdn && storeFromFqdn(cachedInfo.storeFqdn, orgId, token)),\n    ])\n\n    if (_selectedApp) {\n      selectedApp = _selectedApp\n    } else {\n      const {apps} = await fetchOrgAndApps(orgId, partnersSession)\n      // get toml names somewhere close to here\n      const localAppName = await loadAppName(options.directory)\n      selectedApp = await selectOrCreateApp(localAppName, apps, organization, partnersSession)\n    }\n\n    if (_selectedStore) {\n      selectedStore = _selectedStore\n    } else {\n      const allStores = await fetchAllDevStores(orgId, token)\n      selectedStore = await selectStore(allStores, organization, token)\n    }\n  }\n\n  // We only update the cache or config if the current app is the right one\n  const rightApp = selectedApp.apiKey === cachedInfo?.appId\n  if (isCurrentAppSchema(configuration) && rightApp) {\n    if (cachedInfo) cachedInfo.storeFqdn = selectedStore?.shopDomain\n    const newConfiguration: AppConfiguration = {\n      ...configuration,\n      build: {\n        ...configuration.build,\n        dev_store_url: selectedStore?.shopDomain,\n      },\n    }\n    await writeAppConfigurationFile(newConfiguration)\n  } else if (!cachedInfo || rightApp) {\n    setCachedAppInfo({\n      appId: selectedApp.apiKey,\n      title: selectedApp.title,\n      directory: options.directory,\n      storeFqdn: selectedStore?.shopDomain,\n      orgId,\n    })\n  }\n\n  await showReusedDevValues({\n    selectedApp,\n    selectedStore,\n    cachedInfo,\n    organization,\n  })\n\n  const result = buildOutput(selectedApp, selectedStore, cachedInfo)\n  await logMetadataForLoadedContext({\n    organizationId: result.remoteApp.organizationId,\n    apiKey: result.remoteApp.apiKey,\n  })\n  return result\n}\n\nconst resetHelpMessage = ['You can pass', {command: '--reset'}, 'to your command to reset your app configuration.']\n\nconst appFromId = async (appId: string, token: string): Promise<OrganizationApp> => {\n  const app = await fetchAppDetailsFromApiKey(appId, token)\n  if (!app) throw new AbortError([`Couldn't find the app with Client ID`, {command: appId}], resetHelpMessage)\n  return app\n}\n\nconst storeFromFqdn = async (storeFqdn: string, orgId: string, token: string): Promise<OrganizationStore> => {\n  const result = await fetchStoreByDomain(orgId, token, storeFqdn)\n  if (result?.store) {\n    await convertToTestStoreIfNeeded(result.store, orgId, token)\n    return result.store\n  } else {\n    throw new AbortError(`Couldn't find the store with domain \"${storeFqdn}\".`, resetHelpMessage)\n  }\n}\n\nfunction buildOutput(app: OrganizationApp, store: OrganizationStore, cachedInfo?: CachedAppInfo): DevContextOutput {\n  return {\n    remoteApp: {\n      ...app,\n      apiSecret: app.apiSecretKeys.length === 0 ? undefined : app.apiSecretKeys[0]!.secret,\n    },\n    remoteAppUpdated: app.apiKey !== cachedInfo?.previousAppId,\n    storeFqdn: store.shopDomain,\n    storeId: store.shopId,\n    updateURLs: cachedInfo?.updateURLs,\n  }\n}\n\nexport interface ReleaseContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: boolean\n  force: boolean\n  commandConfig: Config\n}\n\ninterface ReleaseContextOutput {\n  token: string\n  app: AppInterface\n  partnersApp: OrganizationApp\n}\n\ninterface DeployContextOutput {\n  app: AppInterface\n  token: string\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  identifiers: Identifiers\n  release: boolean\n}\n\n/**\n * If there is a cached ApiKey used for dev, retrieve that and ask the user if they want to reuse it\n * @param app - The local app object\n * @param token - The token to use to access the Partners API\n * @returns\n * OrganizationApp if a cached value is valid.\n * undefined if there is no cached value or the user doesn't want to use it.\n */\nexport async function fetchDevAppAndPrompt(\n  app: AppInterface,\n  partnersSession: PartnersSession,\n): Promise<OrganizationApp | undefined> {\n  const devAppId = getCachedAppInfo(app.directory)?.appId\n  if (!devAppId) return undefined\n\n  const partnersResponse = await fetchAppDetailsFromApiKey(devAppId, partnersSession.token)\n  if (!partnersResponse) return undefined\n\n  const org = await fetchOrgFromId(partnersResponse.organizationId, partnersSession)\n\n  showDevValues(org.businessName ?? 'unknown', partnersResponse.title)\n  const reuse = await reuseDevConfigPrompt()\n  return reuse ? partnersResponse : undefined\n}\n\nexport async function ensureThemeExtensionDevContext(\n  extension: ExtensionInstance,\n  apiKey: string,\n  token: string,\n): Promise<ExtensionRegistration> {\n  const remoteSpecifications = await fetchAppExtensionRegistrations({token, apiKey})\n  const remoteRegistrations = remoteSpecifications.app.extensionRegistrations.filter((extension) => {\n    return extension.type === 'THEME_APP_EXTENSION'\n  })\n\n  if (remoteRegistrations.length > 0) {\n    return remoteRegistrations[0]!\n  }\n\n  const registration = await createExtension(apiKey, extension.graphQLType, extension.handle, token)\n\n  return registration\n}\n\nexport interface DeployContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: boolean\n  force: boolean\n  noRelease: boolean\n  commitReference?: string\n  commandConfig: Config\n}\n\n/**\n * Make sure there is a valid context to execute `deploy`\n * That means we have a valid session, organization and app.\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n * Finally, the info is updated in the env file.\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureDeployContext(options: DeployContextOptions): Promise<DeployContextOutput> {\n  const partnersSession = await fetchPartnersSession()\n  const token = partnersSession.token\n  const [partnersApp, envIdentifiers] = await fetchAppAndIdentifiers(options, partnersSession)\n\n  const org = await fetchOrgFromId(partnersApp.organizationId, partnersSession)\n  showReusedDeployValues(org.businessName, options.app, partnersApp)\n\n  let identifiers: Identifiers = envIdentifiers as Identifiers\n\n  identifiers = await ensureDeploymentIdsPresence({\n    app: options.app,\n    appId: partnersApp.apiKey,\n    appName: partnersApp.title,\n    force: options.force,\n    release: !options.noRelease,\n    token,\n    envIdentifiers,\n    partnersApp,\n  })\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'deploy'}),\n  }\n\n  const result = {\n    app: options.app,\n    partnersApp: {\n      id: partnersApp.id,\n      title: partnersApp.title,\n      appType: partnersApp.appType,\n      organizationId: partnersApp.organizationId,\n      grantedScopes: partnersApp.grantedScopes,\n      applicationUrl: partnersApp.applicationUrl,\n      redirectUrlWhitelist: partnersApp.redirectUrlWhitelist,\n    },\n    identifiers,\n    token,\n    release: !options.noRelease,\n  }\n\n  await logMetadataForLoadedContext({\n    organizationId: result.partnersApp.organizationId,\n    apiKey: result.identifiers.app,\n  })\n  return result\n}\n\nexport interface DraftExtensionsPushOptions {\n  directory: string\n  apiKey?: string\n  reset: boolean\n  commandConfig: Config\n  config?: string\n  enableDeveloperPreview: boolean\n}\n\nexport async function ensureDraftExtensionsPushContext(draftExtensionsPushOptions: DraftExtensionsPushOptions) {\n  const partnersSession = await fetchPartnersSession()\n  const token = partnersSession.token\n\n  const specifications = await loadLocalExtensionsSpecifications(draftExtensionsPushOptions.commandConfig)\n  const app: AppInterface = await loadApp({\n    specifications,\n    directory: draftExtensionsPushOptions.directory,\n    configName: draftExtensionsPushOptions.config,\n  })\n\n  const [partnersApp] = await fetchAppAndIdentifiers({...draftExtensionsPushOptions, app}, partnersSession)\n\n  const org = await fetchOrgFromId(partnersApp.organizationId, partnersSession)\n  showReusedDeployValues(org.businessName, app, partnersApp)\n\n  const prodEnvIdentifiers = getAppIdentifiers({app})\n\n  const {extensionIds: remoteExtensionIds} = await ensureDeploymentIdsPresence({\n    app,\n    partnersApp,\n    appId: partnersApp.apiKey,\n    appName: partnersApp.title,\n    force: true,\n    release: true,\n    token,\n    envIdentifiers: prodEnvIdentifiers,\n  })\n\n  await logMetadataForLoadedContext({\n    organizationId: partnersApp.organizationId,\n    apiKey: partnersApp.apiKey,\n  })\n\n  return {app, partnersSession, remoteExtensionIds, remoteApp: partnersApp}\n}\n\n/**\n * Make sure there is a valid context to execute `release`\n * That means we have a valid session, organization and app.\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n * If the app doesn't have the simplified deployments beta enabled, throw an error.\n * Finally, the info is updated in the env file.\n *\n * @param options - Current dev context options\n * @returns The selected org, app and dev store\n */\nexport async function ensureReleaseContext(options: ReleaseContextOptions): Promise<ReleaseContextOutput> {\n  const partnersSession = await fetchPartnersSession()\n  const [partnersApp, envIdentifiers] = await fetchAppAndIdentifiers(options, partnersSession)\n  const identifiers: Identifiers = envIdentifiers as Identifiers\n\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ...options,\n    app: await updateAppIdentifiers({app: options.app, identifiers, command: 'release'}),\n  }\n  const result = {\n    app: options.app,\n    apiKey: partnersApp.apiKey,\n    partnersApp,\n    token: partnersSession.token,\n  }\n\n  await logMetadataForLoadedContext({organizationId: partnersApp.organizationId, apiKey: partnersApp.apiKey})\n  return result\n}\n\ninterface VersionListContextOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: false\n  commandConfig: Config\n}\n\ninterface VersionsListContextOutput {\n  partnersSession: PartnersSession\n  partnersApp: OrganizationApp\n}\n\n/**\n * Make sure there is a valid context to execute `versions list`\n * That means we have a valid session, organization and app with the simplified deployments beta enabled.\n *\n * If there is an API key via flag, configuration or env file, we check if it is valid. Otherwise, throw an error.\n * If there is no API key (or is invalid), show prompts to select an org and app.\n * If the app doesn't have the simplified deployments beta enabled, throw an error.\n *\n * @param options - Current dev context options\n * @returns The partners token and app\n */\nexport async function ensureVersionsListContext(\n  options: VersionListContextOptions,\n): Promise<VersionsListContextOutput> {\n  const partnersSession = await fetchPartnersSession()\n  const [partnersApp] = await fetchAppAndIdentifiers(options, partnersSession)\n\n  return {\n    partnersSession,\n    partnersApp,\n  }\n}\n\nexport async function fetchOrCreateOrganizationApp(\n  app: AppInterface,\n  partnersSession: PartnersSession,\n  directory?: string,\n): Promise<OrganizationApp> {\n  const orgId = await selectOrg(partnersSession)\n  const {organization, apps} = await fetchOrgsAppsAndStores(orgId, partnersSession)\n  const isLaunchable = appIsLaunchable(app)\n  const scopesArray = getAppScopesArray(app.configuration)\n  const partnersApp = await selectOrCreateApp(app.name, apps, organization, partnersSession, {\n    isLaunchable,\n    scopesArray,\n    directory,\n  })\n  return partnersApp\n}\n\nexport async function fetchAppAndIdentifiers(\n  options: {\n    app: AppInterface\n    reset: boolean\n    apiKey?: string\n    commandConfig: Config\n  },\n  partnersSession: PartnersSession,\n  reuseFromDev = true,\n): Promise<[OrganizationApp, Partial<UuidOnlyIdentifiers>]> {\n  const token = partnersSession.token\n  const app = options.app\n  let reuseDevCache = reuseFromDev\n  let envIdentifiers = getAppIdentifiers({app})\n  let partnersApp: OrganizationApp | undefined\n\n  if (options.reset) {\n    envIdentifiers = {app: undefined, extensions: {}}\n    reuseDevCache = false\n    if (isCurrentAppSchema(app.configuration)) {\n      const configuration = await link({directory: app.directory, commandConfig: options.commandConfig})\n      app.configuration = configuration\n    }\n  }\n\n  if (isCurrentAppSchema(app.configuration)) {\n    const apiKey = options.apiKey ?? app.configuration.client_id\n    partnersApp = await appFromId(apiKey, token)\n  } else if (options.apiKey) {\n    partnersApp = await appFromId(options.apiKey, token)\n  } else if (envIdentifiers.app) {\n    partnersApp = await appFromId(envIdentifiers.app, token)\n  } else if (reuseDevCache) {\n    partnersApp = await fetchDevAppAndPrompt(app, partnersSession)\n  }\n\n  if (!partnersApp) {\n    partnersApp = await fetchOrCreateOrganizationApp(app, partnersSession)\n  }\n\n  return [partnersApp, envIdentifiers]\n}\n\nasync function fetchOrgsAppsAndStores(orgId: string, partnersSession: PartnersSession): Promise<FetchResponse> {\n  let data = {} as FetchResponse\n  const tasks = [\n    {\n      title: 'Fetching organization data',\n      task: async () => {\n        const organizationAndApps = await fetchOrgAndApps(orgId, partnersSession)\n        const stores = await fetchAllDevStores(orgId, partnersSession.token)\n        data = {...organizationAndApps, stores} as FetchResponse\n        // We need ALL stores so we can validate the selected one.\n        // This is a temporary workaround until we have an endpoint to fetch only 1 store to validate.\n      },\n    },\n  ]\n  await renderTasks(tasks)\n  return data\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n */\nasync function fetchDevDataFromOptions(\n  options: DevContextOptions,\n  orgId: string,\n  token: string,\n): Promise<{app?: OrganizationApp; store?: OrganizationStore}> {\n  const [selectedApp, orgWithStore] = await Promise.all([\n    (async () => {\n      let selectedApp: OrganizationApp | undefined\n      if (options.apiKey) {\n        selectedApp = await fetchAppDetailsFromApiKey(options.apiKey, token)\n        if (!selectedApp) {\n          const errorMessage = InvalidApiKeyErrorMessage(options.apiKey)\n          throw new AbortError(errorMessage.message, errorMessage.tryMessage)\n        }\n        return selectedApp\n      }\n    })(),\n    (async () => {\n      if (options.storeFqdn) {\n        const orgWithStore = await fetchStoreByDomain(orgId, token, options.storeFqdn)\n        if (!orgWithStore) throw new AbortError(`Could not find Organization for id ${orgId}.`)\n        if (!orgWithStore.store) {\n          const partners = await partnersFqdn()\n          const org = orgWithStore.organization\n          throw new AbortError(\n            `Could not find ${options.storeFqdn} in the Organization ${org.businessName} as a valid store.`,\n            `Visit https://${partners}/${org.id}/stores to create a new development or Shopify Plus sandbox store in your organization`,\n          )\n        }\n        return orgWithStore as {store: OrganizationStore; organization: Organization}\n      }\n    })(),\n  ])\n  let selectedStore: OrganizationStore | undefined\n\n  if (options.storeFqdn) {\n    selectedStore = orgWithStore!.store\n    await convertToTestStoreIfNeeded(selectedStore, orgWithStore!.organization.id, token)\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\nexport interface AppContext {\n  configuration: AppConfiguration\n  cachedInfo?: CachedAppInfo\n  remoteApp?: OrganizationApp\n}\n\n/**\n * Retrieve app info from the cache or the current configuration.\n *\n * @param reset - Whether to reset the cache or not.\n * @param directory - The directory containing the app.\n * @param token - The partners token.\n */\nexport async function getAppContext({\n  reset,\n  directory,\n  partnersSession,\n  configName,\n  commandConfig,\n  promptLinkingApp = true,\n}: {\n  reset: boolean\n  directory: string\n  partnersSession: PartnersSession\n  configName?: string\n  commandConfig?: Config\n  promptLinkingApp?: boolean\n}): Promise<AppContext> {\n  const previousCachedInfo = getCachedAppInfo(directory)\n\n  if (reset) clearCachedAppInfo(directory)\n\n  const firstTimeSetup = previousCachedInfo === undefined\n  const usingConfigAndResetting = previousCachedInfo?.configFile && reset\n  const usingConfigWithNoTomls =\n    previousCachedInfo?.configFile && (await glob(joinPath(directory, 'shopify.app*.toml'))).length === 0\n\n  if (promptLinkingApp && commandConfig && (firstTimeSetup || usingConfigAndResetting || usingConfigWithNoTomls)) {\n    await link({directory, commandConfig}, false)\n  }\n\n  let cachedInfo = getCachedAppInfo(directory)\n\n  const {configuration} = await loadAppConfiguration({\n    directory,\n    configName,\n  })\n\n  let remoteApp\n  if (isCurrentAppSchema(configuration)) {\n    remoteApp = await appFromId(configuration.client_id, partnersSession.token)\n    cachedInfo = {\n      ...cachedInfo,\n      directory,\n      configFile: basename(configuration.path),\n      orgId: remoteApp.organizationId,\n      appId: remoteApp.apiKey,\n      title: remoteApp.title,\n      storeFqdn: configuration.build?.dev_store_url,\n      updateURLs: configuration.build?.automatically_update_urls_on_dev,\n    }\n  }\n\n  return {\n    configuration,\n    cachedInfo,\n    remoteApp,\n  }\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param token - Token to access partners API\n * @returns The selected organization ID\n */\nasync function selectOrg(partnersSession: PartnersSession): Promise<string> {\n  const orgs = await fetchOrganizations(partnersSession)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\ninterface ReusedValuesOptions {\n  organization: Organization\n  selectedApp: OrganizationApp\n  selectedStore: OrganizationStore\n  cachedInfo?: CachedAppInfo\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n */\nfunction showReusedDevValues({organization, selectedApp, selectedStore, cachedInfo}: ReusedValuesOptions) {\n  if (!cachedInfo) return\n\n  const usingDifferentSettings =\n    selectedApp.apiKey !== cachedInfo?.appId || selectedStore.shopDomain !== cachedInfo.storeFqdn\n  const configFileName = usingDifferentSettings ? undefined : cachedInfo.configFile\n\n  let updateURLs = 'Not yet configured'\n  if (cachedInfo.updateURLs !== undefined) updateURLs = cachedInfo.updateURLs ? 'Yes' : 'No'\n\n  renderCurrentlyUsedConfigInfo({\n    org: organization.businessName,\n    appName: selectedApp.title,\n    devStore: selectedStore.shopDomain,\n    updateURLs,\n    configFile: cachedInfo.configFile,\n    resetMessage: resetHelpMessage,\n  })\n}\n\ninterface CurrentlyUsedConfigInfoOptions {\n  org: string\n  appName: string\n  devStore?: string\n  updateURLs?: string\n  configFile?: string\n  appDotEnv?: string\n  resetMessage?: (\n    | string\n    | {\n        command: string\n      }\n  )[]\n}\n\nexport function renderCurrentlyUsedConfigInfo({\n  org,\n  appName,\n  devStore,\n  updateURLs,\n  configFile,\n  appDotEnv,\n  resetMessage,\n}: CurrentlyUsedConfigInfoOptions): void {\n  const items = [`Org:          ${org}`, `App:          ${appName}`]\n\n  if (devStore) items.push(`Dev store:    ${devStore}`)\n  if (updateURLs) items.push(`Update URLs:  ${updateURLs}`)\n\n  let body: TokenItem = [{list: {items}}]\n  if (resetMessage) body = [...body, '\\n', ...resetMessage]\n\n  const fileName = (appDotEnv && basename(appDotEnv)) || (configFile && getAppConfigurationFileName(configFile))\n\n  renderInfo({\n    headline: configFile ? `Using ${fileName}:` : 'Using these settings:',\n    body,\n  })\n}\n\nexport function showReusedGenerateValues(org: string, cachedAppInfo: CachedAppInfo) {\n  renderCurrentlyUsedConfigInfo({\n    org,\n    appName: cachedAppInfo.title!,\n    configFile: cachedAppInfo.configFile,\n    resetMessage: resetHelpMessage,\n  })\n}\n\nexport function showReusedDeployValues(\n  org: string,\n  app: AppInterface,\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>,\n) {\n  renderCurrentlyUsedConfigInfo({\n    org,\n    appName: remoteApp.title,\n    appDotEnv: app.dotenv?.path,\n    configFile: isCurrentAppSchema(app.configuration) ? basename(app.configuration.path) : undefined,\n    resetMessage: resetHelpMessage,\n  })\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org - Organization name\n * @param app - App name\n * @param store - Store domain\n */\nfunction showDevValues(org: string, appName: string) {\n  renderInfo({\n    headline: 'Your configs for dev were:',\n    body: {\n      list: {\n        items: [`Org:        ${org}`, `App:        ${appName}`],\n      },\n    },\n  })\n}\n\nexport async function logMetadataForLoadedContext(app: {organizationId: string; apiKey: string}) {\n  await metadata.addPublicMetadata(() => ({\n    partner_id: tryParseInt(app.organizationId),\n    api_key: app.apiKey,\n  }))\n}\n\nexport async function enableDeveloperPreview({apiKey, token}: {apiKey: string; token: string}) {\n  return developerPreviewUpdate({apiKey, token, enabled: true})\n}\n\nexport async function disableDeveloperPreview({apiKey, token}: {apiKey: string; token: string}) {\n  await developerPreviewUpdate({apiKey, token, enabled: false})\n}\n\nexport async function developerPreviewUpdate({\n  apiKey,\n  token,\n  enabled,\n}: {\n  apiKey: string\n  token: string\n  enabled: boolean\n}) {\n  let result: DevelopmentStorePreviewUpdateSchema | undefined\n  try {\n    const query = DevelopmentStorePreviewUpdateQuery\n    const variables: DevelopmentStorePreviewUpdateInput = {\n      input: {\n        apiKey,\n        enabled,\n      },\n    }\n\n    result = await partnersRequest(query, token, variables)\n    const userErrors = result?.developmentStorePreviewUpdate?.userErrors\n    return !userErrors || userErrors.length === 0\n\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error: unknown) {\n    return false\n  }\n}\n"]}