{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/cli/services/extensions/common.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {blocks} from '../../constants.js'\nimport {ExtensionFlavor} from '../../models/app/template.js'\nimport {OrganizationApp} from '../../models/organization.js'\nimport {fetchAppExtensionRegistrations} from '../dev/fetch.js'\nimport {dirname, joinPath} from '@shopify/cli-kit/node/path'\nimport {fileExists, findPathUp, mkdir} from '@shopify/cli-kit/node/fs'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {hyphenate} from '@shopify/cli-kit/common/string'\nimport {fileURLToPath} from 'url'\n\nexport async function ensureDownloadedExtensionFlavorExists(\n  extensionFlavor: ExtensionFlavor | undefined,\n  templateDownloadDir: string,\n): Promise<string> {\n  const templatePath = extensionFlavor?.path || ''\n  const origin = joinPath(templateDownloadDir, templatePath)\n  if (!(await fileExists(origin))) {\n    throw new AbortError(`\\nThe extension is not available for ${extensionFlavor?.value}`)\n  }\n  return origin\n}\n\nexport async function ensureLocalExtensionFlavorExists(extensionFlavor: ExtensionFlavor | undefined): Promise<string> {\n  const templatePath = extensionFlavor?.path || ''\n\n  const templateDirectory = await findPathUp(templatePath, {\n    cwd: dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n\n  if (!templateDirectory) {\n    throw new AbortError(`\\nThe extension is not available for ${extensionFlavor?.value}`)\n  }\n\n  return templateDirectory\n}\n\nexport async function ensureExtensionDirectoryExists({name, app}: {name: string; app: AppInterface}): Promise<string> {\n  const hyphenizedName = hyphenate(name)\n  const extensionDirectory = joinPath(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await fileExists(extensionDirectory)) {\n    throw new AbortError(\n      `\\nA directory with this name (${hyphenizedName}) already exists.\\nChoose a new name for your extension.`,\n    )\n  }\n  await mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nexport async function canEnablePreviewMode({\n  remoteApp,\n  localApp,\n  token,\n  apiKey,\n}: {\n  remoteApp: Partial<OrganizationApp>\n  localApp: AppInterface\n  token: string\n  apiKey: string\n}) {\n  const {dashboardManagedExtensionRegistrations} = (await fetchAppExtensionRegistrations({token, apiKey})).app\n  if (dashboardManagedExtensionRegistrations.length > 0) return true\n  const themeExtensions = localApp.allExtensions.filter((ext) => ext.isThemeExtension)\n  if (themeExtensions.length > 0) return true\n\n  const draftableExtensions = localApp.allExtensions.filter((ext) => ext.isDraftable())\n  if (draftableExtensions.length > 0) return true\n\n  return false\n}\n"]}