{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../../src/cli/services/local-storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {LocalStorage} from '@shopify/cli-kit/node/local-storage'\nimport {outputDebug, outputContent, outputToken} from '@shopify/cli-kit/node/output'\nimport {normalizePath} from '@shopify/cli-kit/node/path'\n\nexport interface CachedAppInfo {\n  directory: string\n  configFile?: string\n  appId?: string\n  title?: string\n  orgId?: string\n  storeFqdn?: string\n  updateURLs?: boolean\n  previousAppId?: string\n}\n\n// We store each app info using the directory as the key\nexport interface AppLocalStorageSchema {\n  [key: string]: CachedAppInfo\n}\n\nlet _appLocalStorageInstance: LocalStorage<AppLocalStorageSchema> | undefined\n\nfunction appLocalStorage() {\n  if (!_appLocalStorageInstance) {\n    _appLocalStorageInstance = new LocalStorage<AppLocalStorageSchema>({projectName: 'shopify-cli-app'})\n  }\n  return _appLocalStorageInstance\n}\n\nexport function getCachedAppInfo(\n  directory: string,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): CachedAppInfo | undefined {\n  const normalized = normalizePath(directory)\n  outputDebug(outputContent`Reading cached app information for directory ${outputToken.path(normalized)}...`)\n  return config.get(normalized)\n}\n\nexport function clearCachedAppInfo(\n  directory: string,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): void {\n  const normalized = normalizePath(directory)\n  outputDebug(outputContent`Clearing app information for directory ${outputToken.path(normalized)}...`)\n  config.delete(normalized)\n}\n\nexport function setCachedAppInfo(\n  options: CachedAppInfo,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): void {\n  options.directory = normalizePath(options.directory)\n  outputDebug(\n    outputContent`Storing app information for directory ${outputToken.path(options.directory)}:${outputToken.json(\n      options,\n    )}`,\n  )\n  const savedApp = config.get(options.directory)\n  if (savedApp) {\n    config.set(options.directory, {\n      ...savedApp,\n      ...options,\n    })\n  } else {\n    config.set(options.directory, options)\n  }\n}\n\nexport function clearCurrentConfigFile(\n  directory: string,\n  config: LocalStorage<AppLocalStorageSchema> = appLocalStorage(),\n): void {\n  const normalized = normalizePath(directory)\n  const savedApp = config.get(normalized)\n  config.set(normalized, {\n    ...savedApp,\n    configFile: undefined,\n  })\n}\n\ninterface CommandLocalStorage {\n  [key: string]: {[key: string]: unknown}\n}\n\nlet _commandLocalStorageInstance: LocalStorage<CommandLocalStorage> | undefined\n\nfunction commandLocalStorage() {\n  if (!_commandLocalStorageInstance) {\n    _commandLocalStorageInstance = new LocalStorage<CommandLocalStorage>({projectName: 'shopify-cli-app-command'})\n  }\n  return _commandLocalStorageInstance\n}\n\nexport function setCachedCommandInfo(data: {[key: string]: unknown}): void {\n  const id = process.env.COMMAND_RUN_ID\n\n  if (!id) return\n\n  const store = commandLocalStorage()\n  const info = store.get(id)\n\n  store.set(id, {\n    ...info,\n    ...data,\n  })\n}\n\nexport function getCachedCommandInfo() {\n  const id = process.env.COMMAND_RUN_ID\n\n  if (!id) return\n\n  const store = commandLocalStorage()\n  return store.get(id)\n}\n\nexport function clearCachedCommandInfo() {\n  const store = commandLocalStorage()\n  store.clear()\n}\n"]}