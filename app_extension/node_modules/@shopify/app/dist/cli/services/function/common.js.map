{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/cli/services/function/common.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,OAAO,EAAC,MAAM,4BAA4B,CAAA;AAClD,OAAO,EAAC,iCAAiC,EAAC,MAAM,gDAAgD,CAAA;AAGhG,OAAO,EAAC,WAAW,EAAE,GAAG,EAAC,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAS,KAAK,EAAC,MAAM,aAAa,CAAA;AAEzC,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;QACjB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,sCAAsC;QACnD,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC;QAC1C,OAAO,EAAE,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE;QAC1B,GAAG,EAAE,mBAAmB;KACzB,CAAC;CACH,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,EACtC,aAAa,EACb,IAAI,EACJ,UAAU,EACV,QAAQ,GAMT;IACC,MAAM,cAAc,GAAG,MAAM,iCAAiC,CAAC,aAAa,CAAC,CAAA;IAC7E,MAAM,GAAG,GAAiB,MAAM,OAAO,CAAC,EAAC,cAAc,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAA;IAEtF,MAAM,YAAY,GAAG,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAA;IAC/E,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,KAAK,IAAI,CAA0C,CAAA;IAC/G,IAAI,WAAW,EAAE;QACf,OAAO,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,CAAA;KAClC;SAAM;QACL,MAAM,IAAI,UAAU,CAAC,6FAA6F,CAAC,CAAA;KACpH;AACH,CAAC","sourcesContent":["import {App, AppInterface} from '../../models/app/app.js'\nimport {loadApp} from '../../models/app/loader.js'\nimport {loadLocalExtensionsSpecifications} from '../../models/extensions/load-specifications.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {FunctionConfigType} from '../../models/extensions/specifications/function.js'\nimport {resolvePath, cwd} from '@shopify/cli-kit/node/path'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {Config, Flags} from '@oclif/core'\n\nexport const functionFlags = {\n  path: Flags.string({\n    hidden: false,\n    description: 'The path to your function directory.',\n    parse: async (input) => resolvePath(input),\n    default: async () => cwd(),\n    env: 'SHOPIFY_FLAG_PATH',\n  }),\n}\n\nexport async function inFunctionContext({\n  commandConfig,\n  path,\n  configName,\n  callback,\n}: {\n  commandConfig: Config\n  path: string\n  configName?: string\n  callback: (app: App, ourFunction: ExtensionInstance<FunctionConfigType>) => Promise<void>\n}) {\n  const specifications = await loadLocalExtensionsSpecifications(commandConfig)\n  const app: AppInterface = await loadApp({specifications, directory: path, configName})\n\n  const allFunctions = app.allExtensions.filter((ext) => ext.isFunctionExtension)\n  const ourFunction = allFunctions.find((fun) => fun.directory === path) as ExtensionInstance<FunctionConfigType>\n  if (ourFunction) {\n    return callback(app, ourFunction)\n  } else {\n    throw new AbortError('Run this command from a function directory or use `--path` to specify a function directory.')\n  }\n}\n"]}