{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../../../../src/cli/services/context/prompts.ts"],"names":[],"mappings":"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","sourcesContent":["import {LocalSource, RemoteSource} from './identifiers.js'\nimport {LocalRemoteSource} from './id-matching.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {fetchActiveAppVersion} from '../dev/fetch.js'\nimport metadata from '../../metadata.js'\nimport {\n  InfoTableSection,\n  renderAutocompletePrompt,\n  renderConfirmationPrompt,\n  renderDangerousConfirmationPrompt,\n  renderInfo,\n} from '@shopify/cli-kit/node/ui'\n\nexport async function matchConfirmationPrompt(\n  local: LocalSource,\n  remote: RemoteSource,\n  type: 'extension' | 'function' = 'extension',\n) {\n  return renderConfirmationPrompt({\n    message: `Match ${local.handle} (local name) with ${remote.title} (name on Shopify Partners, ID: ${remote.id})?`,\n    confirmationMessage: `Yes, match to existing ${type}`,\n    cancellationMessage: `No, create as a new ${type}`,\n  })\n}\n\nexport async function selectRemoteSourcePrompt(\n  localSource: LocalSource,\n  remoteSourcesOfSameType: RemoteSource[],\n  remoteIdField: 'id' | 'uuid',\n): Promise<RemoteSource> {\n  const remoteOptions = remoteSourcesOfSameType.map((remote) => ({\n    label: `Match it to ${remote.title} (ID: ${remote.id} on Shopify Partners)`,\n    value: remote[remoteIdField],\n  }))\n  remoteOptions.push({label: 'Create new extension', value: 'create'})\n  const uuid = await renderAutocompletePrompt({\n    message: `How would you like to deploy your \"${localSource.handle}\"?`,\n    choices: remoteOptions,\n  })\n  return remoteSourcesOfSameType.find((remote) => remote[remoteIdField] === uuid)!\n}\n\nexport interface SourceSummary {\n  appTitle: string | undefined\n  question: string\n  identifiers: IdentifiersExtensions\n  toCreate: LocalSource[]\n  dashboardOnly: RemoteSource[]\n}\n\nexport async function deployConfirmationPrompt({\n  summary: {appTitle, question, identifiers, toCreate, dashboardOnly},\n  release,\n  apiKey,\n  token,\n}: {\n  summary: SourceSummary\n  release: boolean\n  apiKey: string\n  token: string\n}): Promise<boolean> {\n  const {infoTable, removesExtension}: {infoTable: InfoTableSection[]; removesExtension: boolean} =\n    await buildInfoPrompt(apiKey, token, identifiers, toCreate, dashboardOnly)\n\n  const timeBeforeConfirmationMs = new Date().valueOf()\n  let confirmationResponse = true\n\n  const appExists = Boolean(appTitle)\n  const isDangerous = appExists && removesExtension\n\n  if (isDangerous) {\n    confirmationResponse = await renderDangerousConfirmationPrompt({\n      message: question,\n      infoTable,\n      confirmation: appTitle!,\n    })\n  } else {\n    let confirmationMessage\n\n    if (release) {\n      confirmationMessage = 'Yes, release this new version'\n    } else {\n      confirmationMessage = 'Yes, create this new version'\n    }\n\n    confirmationResponse = await renderConfirmationPrompt({\n      message: question,\n      infoTable,\n      confirmationMessage,\n      cancellationMessage: 'No, cancel',\n    })\n  }\n\n  const timeToConfirmOrCancelMs = new Date().valueOf() - timeBeforeConfirmationMs\n\n  await metadata.addPublicMetadata(() => ({\n    cmd_deploy_confirm_cancelled: !confirmationResponse,\n    cmd_deploy_confirm_time_to_complete_ms: timeBeforeConfirmationMs,\n  }))\n\n  return confirmationResponse\n}\n\nasync function getInfoBreakdown(\n  apiKey: string,\n  token: string,\n  localRegistration: IdentifiersExtensions,\n  toCreate: LocalSource[],\n  dashboardOnly: RemoteSource[],\n): Promise<{\n  toCreate: string[]\n  toUpdate: string[]\n  fromDashboard: string[]\n  onlyRemote: string[]\n} | null> {\n  const activeAppVersion = await fetchActiveAppVersion({token, apiKey})\n\n  const nonDashboardRemoteRegistrations =\n    activeAppVersion.app.activeAppVersion?.appModuleVersions\n      .filter((module) => !module.specification || module.specification.options.managementExperience !== 'dashboard')\n      .map((remoteRegistration) => remoteRegistration.registrationUuid) ?? []\n\n  let toCreateFinal: string[] = []\n  const toUpdate: string[] = []\n  let dashboardOnlyFinal = dashboardOnly\n  for (const [identifier, uuid] of Object.entries(localRegistration)) {\n    if (nonDashboardRemoteRegistrations.includes(uuid)) {\n      toUpdate.push(identifier)\n    } else {\n      toCreateFinal.push(identifier)\n    }\n\n    dashboardOnlyFinal = dashboardOnlyFinal.filter((dashboardOnly) => dashboardOnly.uuid !== uuid)\n  }\n\n  toCreateFinal = Array.from(new Set(toCreateFinal.concat(toCreate.map((source) => source.localIdentifier))))\n\n  const localRegistrationAndDashboard = [\n    ...Object.values(localRegistration),\n    ...dashboardOnly.map((source) => source.uuid),\n  ]\n  const onlyRemote =\n    activeAppVersion.app.activeAppVersion?.appModuleVersions\n      .filter((module) => !localRegistrationAndDashboard.includes(module.registrationUuid))\n      .map((module) => module.registrationTitle) ?? []\n\n  return {\n    onlyRemote,\n    toCreate: toCreateFinal.map((identifier) => identifier),\n    toUpdate,\n    fromDashboard: dashboardOnlyFinal.map((source) => source.title),\n  }\n}\n\nasync function buildInfoPrompt(\n  apiKey: string,\n  token: string,\n  localRegistration: IdentifiersExtensions,\n  toCreate: LocalSource[],\n  dashboardOnly: RemoteSource[],\n) {\n  const breakdown = await getInfoBreakdown(apiKey, token, localRegistration, toCreate, dashboardOnly)\n  if (breakdown === null) return {infoTable: [], removesExtension: false}\n\n  const {fromDashboard, onlyRemote, toCreate: toCreateBreakdown, toUpdate} = breakdown\n\n  await metadata.addPublicMetadata(() => ({\n    cmd_deploy_confirm_new_registrations: toCreateBreakdown.length,\n    cmd_deploy_confirm_updated_registrations: toUpdate.length,\n    cmd_deploy_confirm_removed_registrations: onlyRemote.length,\n  }))\n\n  const infoTable: InfoTableSection[] = []\n\n  const included = [\n    ...toCreateBreakdown.map((identifier) => [identifier, {subdued: '(new)'}]),\n    ...toUpdate,\n    ...fromDashboard.map((sourceTitle) => [sourceTitle, {subdued: '(from Partner Dashboard)'}]),\n  ]\n  if (included.length > 0) {\n    infoTable.push({header: 'Includes:', items: included, bullet: '+'})\n  }\n\n  const removesExtension = onlyRemote.length > 0\n  if (removesExtension) {\n    const missingLocallySection: InfoTableSection = {\n      header: 'Removes:',\n      helperText: 'This can permanently delete app user data.',\n      items: onlyRemote,\n      bullet: '-',\n    }\n\n    infoTable.push(missingLocallySection)\n  }\n\n  return {infoTable, removesExtension}\n}\n\nexport async function extensionMigrationPrompt(\n  toMigrate: LocalRemoteSource[],\n  includeRemoteType = true,\n): Promise<boolean> {\n  const migrationNames = toMigrate.map(({local}) => `\"${local.handle}\"`).join(', ')\n  const allMigrationTypes = toMigrate.map(({remote}) => remote.type.toLocaleLowerCase())\n  const uniqueMigrationTypes = allMigrationTypes\n    .filter((type, i) => allMigrationTypes.indexOf(type) === i)\n    .map((name) => `\"${name}\"`)\n    .join(', ')\n\n  renderInfo({\n    headline: \"Extension migrations can't be undone.\",\n    body: `Your ${migrationNames} configuration has been updated. Migrating gives you access to new features and won't impact the end user experience. All previous extension versions will reflect this change.`,\n  })\n\n  const confirmMessage = includeRemoteType\n    ? `Yes, confirm migration from ${uniqueMigrationTypes}`\n    : 'Yes, confirm migration'\n\n  return renderConfirmationPrompt({\n    message: `Migrate ${migrationNames}?`,\n    confirmationMessage: confirmMessage,\n    cancellationMessage: 'No, cancel',\n  })\n}\n"]}