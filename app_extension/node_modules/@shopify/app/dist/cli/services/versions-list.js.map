{"version":3,"file":"versions-list.js","sourceRoot":"","sources":["../../../src/cli/services/versions-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {ensureVersionsListContext, renderCurrentlyUsedConfigInfo} from './context.js'\nimport {fetchOrgFromId} from './dev/fetch.js'\nimport {AppVersionsQuery, AppVersionsQuerySchema} from '../api/graphql/get_versions_list.js'\nimport {AppInterface, isCurrentAppSchema} from '../models/app/app.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport colors from '@shopify/cli-kit/node/colors'\nimport {outputContent, outputInfo, outputToken, unstyled} from '@shopify/cli-kit/node/output'\nimport {formatDate} from '@shopify/cli-kit/common/string'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {basename} from '@shopify/cli-kit/node/path'\nimport {Config} from '@oclif/core'\nimport {renderTable} from '@shopify/cli-kit/node/ui'\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ntype AppVersionLine = {\n  createdAt: string\n  createdBy?: string\n  message?: string\n  versionTag: string\n  status: string\n}\n\nconst TABLE_FORMATTING_CHARS = 12\n\nasync function fetchAppVersions(\n  token: string,\n  apiKey: string,\n  json: boolean,\n): Promise<{\n  appVersions: AppVersionLine[]\n  totalResults: number\n  app: AppVersionsQuerySchema['app']\n}> {\n  const query = AppVersionsQuery\n  const res: AppVersionsQuerySchema = await partnersRequest(query, token, {apiKey})\n  if (!res.app) throw new AbortError(`Invalid API Key: ${apiKey}`)\n\n  const appVersions = res.app.appVersions.nodes.map((appVersion) => {\n    const message = appVersion.message ?? ''\n    return {\n      ...appVersion,\n      status: appVersion.status === 'active' && !json ? colors.green(`â˜… ${appVersion.status}`) : appVersion.status,\n      createdBy: appVersion.createdBy?.displayName ?? '',\n      createdAt: formatDate(new Date(appVersion.createdAt)),\n      message,\n    }\n  })\n\n  if (!json) {\n    const maxLineLength = (process.stdout.columns ?? 75) - TABLE_FORMATTING_CHARS\n    let maxMessageLength = maxLineLength\n\n    // Calculate the max allowed length for the message column\n    appVersions.forEach((appVersion) => {\n      const combinedLength =\n        appVersion.message.length +\n        appVersion.versionTag.length +\n        unstyled(appVersion.status).length +\n        appVersion.createdAt.length +\n        appVersion.createdBy.length\n      if (combinedLength > maxLineLength) {\n        const combinedWithoutMessageLength = combinedLength - appVersion.message.length\n        const newMaxLength = Math.max(maxLineLength - combinedWithoutMessageLength, 10)\n        if (newMaxLength < maxMessageLength) {\n          maxMessageLength = newMaxLength\n        }\n      }\n    })\n\n    // Update the message column to fit the max length\n    appVersions.forEach((appVersion) => {\n      if (appVersion.message.length > maxMessageLength) {\n        appVersion.message = `${appVersion.message.slice(0, maxMessageLength - 3)}...`\n      }\n    })\n  }\n\n  return {\n    appVersions,\n    totalResults: res.app.appVersions.pageInfo.totalResults,\n    app: res.app,\n  }\n}\n\ninterface VersionListOptions {\n  app: AppInterface\n  apiKey?: string\n  reset: false\n  commandConfig: Config\n  json: boolean\n}\n\nexport default async function versionList(options: VersionListOptions) {\n  const {partnersSession, partnersApp} = await ensureVersionsListContext(options)\n  const {id: appId, organizationId, title, apiKey} = partnersApp\n\n  const {appVersions, totalResults} = await fetchAppVersions(partnersSession.token, apiKey, options.json)\n\n  const {businessName: org} = await fetchOrgFromId(organizationId, partnersSession)\n\n  if (options.json) {\n    return outputInfo(JSON.stringify(appVersions, null, 2))\n  }\n\n  renderCurrentlyUsedConfigInfo({\n    org,\n    appName: title,\n    configFile: isCurrentAppSchema(options.app.configuration) ? basename(options.app.configuration.path) : undefined,\n  })\n\n  if (appVersions.length === 0) {\n    outputInfo('No app versions found for this app')\n    return\n  }\n\n  renderTable({\n    rows: appVersions,\n    columns: {\n      versionTag: {header: 'VERSION'},\n      status: {header: 'STATUS'},\n      message: {header: 'MESSAGE'},\n      createdAt: {header: 'DATE CREATED'},\n      createdBy: {header: 'CREATED BY'},\n    },\n  })\n\n  const link = outputToken.link(\n    'Partner Dashboard',\n    `https://partners.shopify.com/${organizationId}/apps/${appId}/versions`,\n  )\n\n  outputInfo(outputContent`\\nView all ${String(totalResults)} app versions in the ${link}`)\n}\n"]}