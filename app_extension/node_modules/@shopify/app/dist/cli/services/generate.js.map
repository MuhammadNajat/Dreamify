{"version":3,"file":"generate.js","sourceRoot":"","sources":["../../../src/cli/services/generate.ts"],"names":[],"mappings":"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","sourcesContent":["import {fetchExtensionTemplates} from './generate/fetch-template-specifications.js'\nimport {ensureGenerateContext} from './context.js'\nimport {fetchSpecifications} from './generate/fetch-extension-specifications.js'\nimport {fetchPartnersSession} from './context/partner-account-info.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {loadApp} from '../models/app/loader.js'\nimport generateExtensionPrompts, {\n  GenerateExtensionPromptOptions,\n  GenerateExtensionPromptOutput,\n} from '../prompts/generate/extension.js'\nimport metadata from '../metadata.js'\nimport {\n  GenerateExtensionTemplateOptions,\n  GeneratedExtension,\n  generateExtensionTemplate,\n  ExtensionFlavorValue,\n} from '../services/generate/extension.js'\nimport {ExtensionTemplate, TemplateType} from '../models/app/template.js'\nimport {ExtensionSpecification} from '../models/extensions/specification.js'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\nimport {Config} from '@oclif/core'\nimport {isShopify} from '@shopify/cli-kit/node/context/local'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {RenderAlertOptions, renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {groupBy} from '@shopify/cli-kit/common/collection'\n\nexport interface GenerateOptions {\n  directory: string\n  reset: boolean\n  commandConfig: Config\n  apiKey?: string\n  template?: string\n  flavor?: string\n  name?: string\n  cloneUrl?: string\n  configName?: string\n}\n\nasync function generate(options: GenerateOptions) {\n  const partnersSession = await fetchPartnersSession()\n  const token = partnersSession.token\n  const apiKey = await ensureGenerateContext({...options, partnersSession})\n  const specifications = await fetchSpecifications({token, apiKey, config: options.commandConfig})\n  const app: AppInterface = await loadApp({\n    directory: options.directory,\n    configName: options.configName,\n    specifications,\n  })\n  const availableSpecifications = specifications.map((spec) => spec.identifier)\n  const extensionTemplates = await fetchExtensionTemplates(token, apiKey, availableSpecifications)\n\n  const promptOptions = await buildPromptOptions(extensionTemplates, specifications, app, options)\n  const promptAnswers = await generateExtensionPrompts(promptOptions)\n\n  await saveAnalyticsMetadata(promptAnswers, options.template)\n\n  const generateExtensionOptions = buildGenerateOptions(promptAnswers, app, options)\n  const generatedExtensions = await generateExtensionTemplate(generateExtensionOptions)\n\n  renderSuccessMessages(generatedExtensions, app.packageManager)\n}\n\nasync function buildPromptOptions(\n  extensionTemplates: ExtensionTemplate[],\n  specifications: ExtensionSpecification[],\n  app: AppInterface,\n  options: GenerateOptions,\n): Promise<GenerateExtensionPromptOptions> {\n  const extensionTemplate = await handleTypeParameter(options.template, app, extensionTemplates, specifications)\n  validateExtensionFlavor(extensionTemplate, options.flavor)\n\n  const {validTemplates, templatesOverlimit} = checkLimits(extensionTemplates, specifications, app)\n\n  return {\n    templateType: extensionTemplate?.identifier,\n    name: options.name,\n    extensionFlavor: options.flavor as ExtensionFlavorValue,\n    directory: joinPath(options.directory, 'extensions'),\n    app,\n    extensionTemplates: validTemplates ?? [],\n    unavailableExtensions: templatesOverlimit ?? [],\n    reset: options.reset,\n  }\n}\n\nfunction checkLimits(\n  extensionTemplates: ExtensionTemplate[],\n  specifications: ExtensionSpecification[],\n  app: AppInterface,\n) {\n  const iterateeFunction = (template: ExtensionTemplate) => {\n    const allValid = template.types.every((type) => !limitReached(app, specifications, type))\n    return allValid ? 'validTemplates' : 'templatesOverlimit'\n  }\n  return groupBy(extensionTemplates, iterateeFunction)\n}\n\nfunction limitReached(app: AppInterface, specifications: ExtensionSpecification[], templateType: TemplateType) {\n  const type = templateType.type\n  const specification = specifications.find((spec) => spec.identifier === type || spec.externalIdentifier === type)\n  const existingExtensions = app.extensionsForType({identifier: type, externalIdentifier: type})\n  return existingExtensions.length >= (specification?.registrationLimit || 1)\n}\n\nasync function saveAnalyticsMetadata(promptAnswers: GenerateExtensionPromptOutput, typeFlag: string | undefined) {\n  await Promise.all(\n    promptAnswers.extensionContent.map((extensionContent) => {\n      return metadata.addPublicMetadata(() => ({\n        cmd_scaffold_template_flavor: extensionContent.flavor,\n        cmd_scaffold_type: promptAnswers.extensionTemplate.identifier,\n        cmd_scaffold_used_prompts_for_type: !typeFlag,\n      }))\n    }),\n  )\n}\n\nfunction buildGenerateOptions(\n  promptAnswers: GenerateExtensionPromptOutput,\n  app: AppInterface,\n  options: GenerateOptions,\n): GenerateExtensionTemplateOptions {\n  return {\n    app,\n    cloneUrl: options.cloneUrl,\n    extensionChoices: promptAnswers.extensionContent,\n    extensionTemplate: promptAnswers.extensionTemplate,\n  }\n}\n\nfunction renderSuccessMessages(\n  generatedExtensions: GeneratedExtension[],\n  packageManager: AppInterface['packageManager'],\n) {\n  generatedExtensions.forEach((extension) => {\n    const formattedSuccessfulMessage = formatSuccessfulRunMessage(\n      extension.extensionTemplate,\n      extension.directory,\n      packageManager,\n    )\n    renderSuccess(formattedSuccessfulMessage)\n  })\n}\n\nfunction validateExtensionFlavor(extensionTemplate?: ExtensionTemplate, flavor?: string) {\n  if (!flavor || !extensionTemplate) return\n\n  const possibleFlavors: string[] = extensionTemplate.types[0]!.supportedFlavors.map((flavor) => flavor.value as string)\n\n  if (!possibleFlavors.includes(flavor)) {\n    throw new AbortError(\n      'Invalid template for extension type',\n      `Expected template to be one of the following: ${possibleFlavors.join(', ')}.`,\n    )\n  }\n}\n\nfunction formatSuccessfulRunMessage(\n  extensionTemplate: ExtensionTemplate,\n  extensionDirectory: string,\n  depndencyManager: PackageManager,\n): RenderAlertOptions {\n  const options: RenderAlertOptions = {\n    headline: ['Your extension was created in', {filePath: extensionDirectory}, {char: '.'}],\n    nextSteps: [],\n    reference: [],\n  }\n\n  if (extensionTemplate.types.some((type) => type.type !== 'function')) {\n    options.nextSteps!.push([\n      'To preview this extension along with the rest of the project, run',\n      {command: `${formatPackageManagerCommand(depndencyManager, 'dev')}`},\n    ])\n  }\n\n  if (extensionTemplate.supportLinks[0]) {\n    options.reference!.push([\n      'For more details, see the',\n      {link: {label: 'docs', url: extensionTemplate.supportLinks[0]}},\n    ])\n  }\n\n  return options\n}\n\nasync function handleTypeParameter(\n  typeFlag: string | undefined,\n  app: AppInterface,\n  extensionTemplates: ExtensionTemplate[],\n  specifications: ExtensionSpecification[],\n): Promise<ExtensionTemplate | undefined> {\n  if (!typeFlag) return\n\n  const extensionTemplate = extensionTemplates.find((spec) => spec.identifier === typeFlag)\n\n  if (!extensionTemplate) {\n    const isShopifolk = await isShopify()\n    const allExternalTypes = extensionTemplates.map((spec) => spec.identifier)\n    const tryMsg = isShopifolk ? 'You might need to enable some beta flags on your Organization or App' : undefined\n    throw new AbortError(\n      `Unknown extension type: ${typeFlag}.\\nThe following extension types are supported: ${allExternalTypes.join(\n        ', ',\n      )}`,\n      tryMsg,\n    )\n  }\n\n  // Validate limits for selected type.\n  // If no type is selected, filter out any types that have reached their limit\n  extensionTemplate.types.forEach((type) => {\n    if (limitReached(app, specifications, type)) {\n      throw new AbortError(\n        `Invalid extension type: ${typeFlag}`,\n        `You have reached the limit of extension(s) of type ${type.type} per app`,\n      )\n    }\n  })\n\n  return extensionTemplate\n}\n\nexport default generate\n"]}