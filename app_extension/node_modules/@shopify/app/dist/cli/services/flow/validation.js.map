{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../../src/cli/services/flow/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import {ConfigField, FlowExtensionTypes} from './types.js'\nimport {SUPPORTED_COMMERCE_OBJECTS} from './constants.js'\nimport {FlowTriggerSettingsSchema} from '../../models/extensions/specifications/flow_trigger.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\nfunction fieldValidationErrorMessage(property: string, configField: ConfigField, handle: string, index: number) {\n  const errorMessage = `'${property}' property must be a string for 'field[${index}]' ${JSON.stringify(\n    configField,\n  )} of flow extension '${handle}'`\n\n  return {required_error: errorMessage, invalid_type_error: errorMessage}\n}\n\nconst baseFieldSchema = zod\n  .object({\n    type: zod.string(),\n    description: zod.string().optional(),\n  })\n  .strict()\n\nexport const validateFieldShape = (\n  configField: ConfigField,\n  type: FlowExtensionTypes,\n  extensionHandle: string,\n  index: number,\n): ConfigField => {\n  const isCommerceObjectField = Object.keys(SUPPORTED_COMMERCE_OBJECTS).includes(configField.type)\n\n  if (!isCommerceObjectField) {\n    if (type === 'flow_action') {\n      return baseFieldSchema\n        .extend({\n          key: zod.string(fieldValidationErrorMessage('key', configField, extensionHandle, index)),\n          name: zod.string(fieldValidationErrorMessage('name', configField, extensionHandle, index)),\n          required: zod.boolean().optional(),\n        })\n        .parse(configField)\n    } else {\n      return FlowTriggerSettingsSchema.parse(configField)\n    }\n  }\n\n  if (isCommerceObjectField) {\n    return baseFieldSchema\n      .extend({\n        required: zod.boolean().optional(),\n      })\n      .parse(configField)\n  }\n\n  return baseFieldSchema.parse(configField)\n}\n\nexport const startsWithHttps = (url: string) => url.startsWith('https://')\n\nexport const isSchemaTypeReference = (type: string) => type.startsWith('schema.')\n\nexport const validateCustomConfigurationPageConfig = (\n  configPageUrl?: string,\n  configPagePreviewUrl?: string,\n  validationUrl?: string,\n) => {\n  if (configPageUrl || configPagePreviewUrl) {\n    if (!configPageUrl) {\n      throw new zod.ZodError([\n        {\n          code: zod.ZodIssueCode.custom,\n          path: ['extensions[0].config_page_url'],\n          message: 'To set a custom configuration page a `config_page_url` must be specified.',\n        },\n      ])\n    }\n\n    if (!configPagePreviewUrl) {\n      throw new zod.ZodError([\n        {\n          code: zod.ZodIssueCode.custom,\n          path: ['extensions[0].config_page_preview_url'],\n          message: 'To set a custom configuration page a `config_page_preview_url` must be specified.',\n        },\n      ])\n    }\n\n    if (!validationUrl) {\n      throw new zod.ZodError([\n        {\n          code: zod.ZodIssueCode.custom,\n          path: ['extensions[0].validation_url'],\n          message: 'To set a custom configuration page a `validation_url` must be specified.',\n        },\n      ])\n    }\n  }\n\n  return true\n}\n\nexport const validateTriggerSchemaPresence = (fields: ConfigField[], schema?: string) => {\n  if (fields.some((field) => isSchemaTypeReference(field.type)) && !schema) {\n    throw new zod.ZodError([\n      {\n        code: zod.ZodIssueCode.custom,\n        path: ['extensions[0].schema'],\n        message: 'To reference schema types a `schema` must be specified.',\n      },\n    ])\n  }\n\n  return true\n}\n\nexport const validateReturnTypeConfig = (returnTypeRef?: string, schema?: string) => {\n  if (returnTypeRef || schema) {\n    if (!returnTypeRef) {\n      throw new zod.ZodError([\n        {\n          code: zod.ZodIssueCode.custom,\n          path: ['extensions[0].return_type_ref'],\n          message: 'When uploading a schema a `return_type_ref` must be specified.',\n        },\n      ])\n    }\n\n    if (!schema) {\n      throw new zod.ZodError([\n        {\n          code: zod.ZodIssueCode.custom,\n          path: ['extensions[0].schema'],\n          message: 'To set a return type a `schema` must be specified.',\n        },\n      ])\n    }\n  }\n\n  return true\n}\n"]}