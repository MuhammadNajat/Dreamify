{"version":3,"file":"extension-to-toml.js","sourceRoot":"","sources":["../../../../src/cli/services/flow/extension-to-toml.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,0BAA0B,EAAC,MAAM,gCAAgC,CAAA;AAGzE,OAAO,EAAC,UAAU,EAAC,MAAM,4BAA4B,CAAA;AACrD,OAAO,EAAC,OAAO,EAAC,MAAM,gCAAgC,CAAA;AAmBtD;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,SAAgC;IAC9D,MAAM,aAAa,GAAG,SAAS,CAAC,aAAa,EAAE,MAAM,IAAI,SAAS,CAAC,YAAY,EAAE,MAAM,CAAA;IACvF,IAAI,CAAC,aAAa;QAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;IACpE,MAAM,MAAM,GAAe,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAA;IAEpD,MAAM,MAAM,GAAG,0BAA0B,CAAC,SAAS,CAAC,IAAkC,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC,CAAA;IAE5G,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,KAAK,wBAAwB,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,SAAS,CAAA;IAE1G,MAAM,4BAA4B,GAAG;QACnC,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;gBAC/C,IAAI,EAAE,MAAM,CAAC,KAAK;gBAClB,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC;gBAChC,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,WAAW,EAAE,MAAM,CAAC,GAAG,IAAI,UAAU;gBACrC,eAAe,EAAE,MAAM,CAAC,6BAA6B;gBACrD,uBAAuB,EAAE,MAAM,CAAC,qCAAqC;gBACrE,cAAc,EAAE,MAAM,CAAC,cAAc;aACtC;SACF;QACD,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC,SAAS;KAC3D,CAAA;IACD,8DAA8D;IAC9D,OAAO,UAAU,CAAC,4BAAmC,CAAC,CAAA;AACxD,CAAC","sourcesContent":["import {configFromSerializedFields} from './serialize-partners-fields.js'\nimport {FlowPartnersExtensionTypes} from './types.js'\nimport {ExtensionRegistration} from '../../api/graphql/all_app_extension_registrations.js'\nimport {encodeToml} from '@shopify/cli-kit/node/toml'\nimport {slugify} from '@shopify/cli-kit/common/string'\n\ninterface FlowConfig {\n  title: string\n  description: string\n  url: string\n  fields?: {\n    id: string\n    name: string\n    label?: string\n    description?: string\n    required?: boolean\n    uiType: string\n  }[]\n  custom_configuration_page_url?: string\n  custom_configuration_page_preview_url?: string\n  validation_url?: string\n}\n\n/**\n * Given a flow extension config file, convert it to toml\n * Works for both trigger and action because trigger config is a subset of action config\n */\nexport function buildTomlObject(extension: ExtensionRegistration) {\n  const versionConfig = extension.activeVersion?.config ?? extension.draftVersion?.config\n  if (!versionConfig) throw new Error('No config found for extension')\n  const config: FlowConfig = JSON.parse(versionConfig)\n\n  const fields = configFromSerializedFields(extension.type as FlowPartnersExtensionTypes, config.fields ?? [])\n\n  const defaultURL = extension.type === 'flow_action_definition' ? 'https://url.com/api/execute' : undefined\n\n  const localExtensionRepresentation = {\n    extensions: [\n      {\n        type: extension.type.replace('_definition', ''),\n        name: config.title,\n        handle: slugify(extension.title),\n        description: config.description,\n        runtime_url: config.url ?? defaultURL,\n        config_page_url: config.custom_configuration_page_url,\n        config_page_preview_url: config.custom_configuration_page_preview_url,\n        validation_url: config.validation_url,\n      },\n    ],\n    settings: (fields?.length ?? 0) > 0 ? {fields} : undefined,\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return encodeToml(localExtensionRepresentation as any)\n}\n"]}