{"version":3,"file":"serialize-partners-fields.js","sourceRoot":"","sources":["../../../../src/cli/services/flow/serialize-partners-fields.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,yBAAyB,EAAE,UAAU,EAAC,MAAM,gBAAgB,CAAA;AACpE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AAEtD,MAAM,cAAc,GAAG,IAAI,GAAG,CAAiB,UAAU,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAEjH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,KAAsB,EAAE,IAAgC,EAAE,EAAE;IAC/F,MAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IAElD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,UAAU,CAAC,cAAc,KAAK,CAAC,MAAM,mBAAmB,CAAC,CAAA;KACpE;IAED,MAAM,eAAe,GAAgB;QACnC,GAAG,EAAE,KAAK,CAAC,IAAI;QACf,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS;QAC9D,IAAI,EAAE,SAAS;KAChB,CAAA;IAED,IAAI,IAAI,KAAK,wBAAwB,EAAE;QACrC,eAAe,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAA;QAClC,eAAe,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAA;KAC1C;IAED,OAAO,eAAe,CAAA;AACxB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,KAAsB,EAAE,IAAgC,EAAE,EAAE;IACvG,MAAM,QAAQ,GAAG,IAAI,KAAK,wBAAwB,CAAA;IAClD,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,YAAY,CAAA;IAEvG,MAAM,eAAe,GAAgB;QACnC,IAAI,EAAE,SAAS;KAChB,CAAA;IAED,IAAI,IAAI,KAAK,wBAAwB,EAAE;QACrC,eAAe,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAA;KAC1C;IAED,OAAO,eAAe,CAAA;AACxB,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,IAAgC,EAAE,MAA0B,EAAE,EAAE;IACzG,IAAI,CAAC,MAAM;QAAE,OAAO,EAAE,CAAA;IAEtB,MAAM,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QAC5C,IAAI,KAAK,CAAC,MAAM,KAAK,oBAAoB,IAAI,yBAAyB,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YAC7F,OAAO,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;SACjD;QAED,OAAO,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAA;IAEF,OAAO,gBAAgB,CAAA;AACzB,CAAC,CAAA","sourcesContent":["import {ConfigField, SerializedField, FlowPartnersExtensionTypes} from './types.js'\nimport {PARTNERS_COMMERCE_OBJECTS, uiTypesMap} from './constants.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nconst uiTypesToTypes = new Map<string, string>(uiTypesMap.map((typeMapping) => [typeMapping[1], typeMapping[0]]))\n\nexport const serializeConfigField = (field: SerializedField, type: FlowPartnersExtensionTypes) => {\n  const fieldType = uiTypesToTypes.get(field.uiType)\n\n  if (!fieldType) {\n    throw new AbortError(`Field type ${field.uiType} is not supported`)\n  }\n\n  const serializedField: ConfigField = {\n    key: field.name,\n    description: field.description ? field.description : undefined,\n    type: fieldType,\n  }\n\n  if (type === 'flow_action_definition') {\n    serializedField.name = field.label\n    serializedField.required = field.required\n  }\n\n  return serializedField\n}\n\nexport const serializeCommerceObjectField = (field: SerializedField, type: FlowPartnersExtensionTypes) => {\n  const isAction = type === 'flow_action_definition'\n  const fieldType = isAction ? `${field.name.replace('_id', '')}_reference` : `${field.uiType}_reference`\n\n  const serializedField: ConfigField = {\n    type: fieldType,\n  }\n\n  if (type === 'flow_action_definition') {\n    serializedField.required = field.required\n  }\n\n  return serializedField\n}\n\nexport const configFromSerializedFields = (type: FlowPartnersExtensionTypes, fields?: SerializedField[]) => {\n  if (!fields) return []\n\n  const serializedFields = fields.map((field) => {\n    if (field.uiType === 'commerce-object-id' || PARTNERS_COMMERCE_OBJECTS.includes(field.uiType)) {\n      return serializeCommerceObjectField(field, type)\n    }\n\n    return serializeConfigField(field, type)\n  })\n\n  return serializedFields\n}\n"]}