{"version":3,"file":"serialize-fields.js","sourceRoot":"","sources":["../../../../src/cli/services/flow/serialize-fields.ts"],"names":[],"mappings":"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","sourcesContent":["import {ConfigField, SerializedField, FlowExtensionTypes} from './types.js'\nimport {\n  SUPPORTED_COMMERCE_OBJECTS,\n  ACTION_SUPPORTED_COMMERCE_OBJECTS,\n  TRIGGER_SUPPORTED_COMMERCE_OBJECTS,\n  actionUiTypesMap,\n  triggerUiTypesMap,\n} from './constants.js'\nimport {isSchemaTypeReference} from './validation.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {pascalize} from '@shopify/cli-kit/common/string'\n\nconst actionTypesToUiTypes = new Map<string, string>(actionUiTypesMap)\nconst triggerTypesToUiTypes = new Map<string, string>(triggerUiTypesMap)\n\nexport const serializeConfigField = (field: ConfigField, type: FlowExtensionTypes) => {\n  const typesToUiTypes = type === 'flow_action' ? actionTypesToUiTypes : triggerTypesToUiTypes\n  const typeIsSchemaTypeReference = isSchemaTypeReference(field.type)\n  const uiType = typeIsSchemaTypeReference\n    ? typesToUiTypes.get('schema_type_reference')\n    : typesToUiTypes.get(field.type)\n\n  if (typeof field.key !== 'string') {\n    throw new AbortError(`key property must be specified for non-commerce object fields in ${JSON.stringify(field)}`)\n  }\n\n  if (!uiType) {\n    throw new AbortError(\n      `Field type ${field.type} is not supported on Flow ${type === 'flow_action' ? 'Actions' : 'Triggers'}`,\n    )\n  }\n\n  const serializedField: SerializedField = {\n    name: field.key,\n    description: field.description,\n    uiType,\n  }\n\n  if (type === 'flow_action') {\n    serializedField.label = field.name\n    serializedField.required = field.required\n  }\n\n  if (typeIsSchemaTypeReference) {\n    serializedField.typeRefName = field.type.replace('schema.', '')\n  }\n\n  return serializedField\n}\n\nexport const serializeCommerceObjectField = (field: ConfigField, type: FlowExtensionTypes) => {\n  if (type === 'flow_trigger' && !TRIGGER_SUPPORTED_COMMERCE_OBJECTS.includes(field.type)) {\n    throw new AbortError(`Commerce object ${field.type} is not supported for Flow Triggers`)\n  }\n\n  if (type === 'flow_action' && !ACTION_SUPPORTED_COMMERCE_OBJECTS.includes(field.type)) {\n    throw new AbortError(`Commerce object ${field.type} is not supported for Flow Actions`)\n  }\n\n  const commerceObject = field.type.replace('_reference', '')\n\n  const serializedField: SerializedField = {\n    name: `${commerceObject}_id`,\n    uiType: type === 'flow_action' ? 'commerce-object-id' : commerceObject,\n    description: field.description,\n  }\n\n  if (type === 'flow_action') {\n    serializedField.label = `${pascalize(commerceObject)} ID`\n    serializedField.required = field.required\n  }\n\n  return serializedField\n}\n\nexport const serializeFields = (type: FlowExtensionTypes, fields?: ConfigField[]) => {\n  if (!fields) return []\n\n  const serializedFields = fields.map((field) => {\n    if (Object.keys(SUPPORTED_COMMERCE_OBJECTS).includes(field.type)) {\n      return serializeCommerceObjectField(field, type)\n    }\n\n    return serializeConfigField(field, type)\n  })\n\n  return serializedFields\n}\n"]}