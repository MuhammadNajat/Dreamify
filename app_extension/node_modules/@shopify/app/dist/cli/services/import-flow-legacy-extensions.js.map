{"version":3,"file":"import-flow-legacy-extensions.js","sourceRoot":"","sources":["../../../src/cli/services/import-flow-legacy-extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {fetchAppAndIdentifiers} from './context.js'\nimport {ensureExtensionDirectoryExists} from './extensions/common.js'\nimport {buildTomlObject} from './flow/extension-to-toml.js'\nimport {getActiveDashboardExtensions} from './flow/fetch-flow-dashboard-extensions.js'\nimport {fetchPartnersSession} from './context/partner-account-info.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {updateAppIdentifiers, IdentifiersExtensions} from '../models/app/identifiers.js'\nimport {ExtensionRegistration} from '../api/graphql/all_app_extension_registrations.js'\nimport {Config} from '@oclif/core'\nimport {renderSelectPrompt, renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {basename, joinPath} from '@shopify/cli-kit/node/path'\nimport {writeFile} from '@shopify/cli-kit/node/fs'\nimport {outputContent} from '@shopify/cli-kit/node/output'\n\ninterface ImportFlowOptions {\n  app: AppInterface\n  commandConfig: Config\n  apiKey?: string\n}\n\nexport async function importFlowExtensions(options: ImportFlowOptions) {\n  const partnersSession = await fetchPartnersSession()\n  const [partnersApp, _] = await fetchAppAndIdentifiers({...options, reset: false}, partnersSession, false)\n  const flowExtensions = await getActiveDashboardExtensions({token: partnersSession.token, apiKey: partnersApp.apiKey})\n\n  if (flowExtensions.length === 0) {\n    renderSuccess({headline: ['No extensions to migrate.']})\n    return\n  }\n\n  const choices = flowExtensions.map((ext) => {\n    return {label: ext.title, value: ext.uuid}\n  })\n  choices.push({label: 'All', value: 'All'})\n  const promptAnswer = await renderSelectPrompt({message: 'Extensions to migrate', choices})\n\n  const extensionsToMigrate =\n    promptAnswer === 'All' ? flowExtensions : [flowExtensions.find((ext) => ext?.uuid === promptAnswer)!]\n\n  const extensionUuids: IdentifiersExtensions = {}\n  const importPromises = extensionsToMigrate.map(async (ext) => {\n    const directory = await ensureExtensionDirectoryExists({app: options.app, name: ext.title})\n    const tomlObject = buildTomlObject(ext)\n    const path = joinPath(directory, 'shopify.extension.toml')\n    await writeFile(path, tomlObject)\n    extensionUuids[ext.title] = ext.uuid\n    return {extension: ext, directory: joinPath('extensions', basename(directory))}\n  })\n\n  const generatedExtensions = await Promise.all(importPromises)\n  renderSuccessMessages(generatedExtensions)\n  await updateAppIdentifiers({\n    app: options.app,\n    identifiers: {extensions: extensionUuids, app: partnersApp.apiKey},\n    command: 'deploy',\n  })\n}\n\nfunction renderSuccessMessages(generatedExtensions: {extension: ExtensionRegistration; directory: string}[]) {\n  renderSuccess({\n    headline: ['Imported the following extensions from the dashboard:'],\n    body: generatedExtensions\n      .map((gen) => {\n        return outputContent`â€¢ \"${gen.extension.title}\" at: ${gen.directory}`.value\n      })\n      .join('\\n'),\n  })\n}\n"]}