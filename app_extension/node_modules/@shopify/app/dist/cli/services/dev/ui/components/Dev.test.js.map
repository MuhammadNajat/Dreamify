{"version":3,"file":"Dev.test.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/ui/components/Dev.test.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,GAAG,EAAC,MAAM,UAAU,CAAA;AAC5B,OAAO,EAAC,mBAAmB,EAAC,MAAM,gBAAgB,CAAA;AAClD,OAAO,EACL,wBAAwB,EACxB,MAAM,EACN,gBAAgB,EAChB,0BAA0B,EAC1B,KAAK,EACL,cAAc,EACd,sBAAsB,GACvB,MAAM,kCAAkC,CAAA;AACzC,OAAO,EAAC,eAAe,EAAc,MAAM,6BAA6B,CAAA;AACxE,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAC,MAAM,QAAQ,CAAA;AACjD,OAAO,EAAC,QAAQ,EAAC,MAAM,8BAA8B,CAAA;AACrD,OAAO,EAAC,OAAO,EAAC,MAAM,8BAA8B,CAAA;AAGpD,EAAE,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;AACvC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;AAC9B,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;AAEzB,MAAM,OAAO,GAAG;IACd,oBAAoB,EAAE,IAAI;IAC1B,8BAA8B,EAAE,KAAK;IACrC,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,KAAK;CACb,CAAA;AAED,MAAM,gBAAgB,GAAG;IACvB,SAAS,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC;IAClC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,GAAE,CAAC,CAAC;IAC7B,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,GAAE,CAAC,CAAC;IAC9B,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAe,EAAE,EAAE,CAAC,IAAI,CAAC;CAC/C,CAAA;AAED,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;IACnB,IAAI,CAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;QACxG,QAAQ;QACR,IAAI,qBAAiC,CAAA;QACrC,IAAI,sBAAkC,CAAA;QAEtC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAO,UAAU,OAAO,EAAE,OAAO;YACjE,qBAAqB,GAAG,OAAO,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,MAAM,eAAe,GAAG,IAAI,OAAO,CAAO,UAAU,OAAO,EAAE,OAAO;YAClE,sBAAsB,GAAG,OAAO,CAAA;QAClC,CAAC,CAAC,CAAA;QAEF,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBAErC,qBAAqB,EAAE,CAAA;YACzB,CAAC;SACF,CAAA;QAED,MAAM,eAAe,GAAG;YACtB,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,cAAc,CAAA;gBAEpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;gBACvC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBAEtC,sBAAsB,EAAE,CAAA;YAC1B,CAAC;SACF,CAAA;QACD,OAAO;QAEP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,EAC5C,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,eAAe,CAAA;QAErB,OAAO;QACP,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;KAkBvF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QACpE,QAAQ;QACR,IAAI,qBAAiC,CAAA;QACrC,IAAI,sBAAkC,CAAA;QAEtC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAO,UAAU,OAAO,EAAE,OAAO;YACjE,qBAAqB,GAAG,OAAO,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,MAAM,eAAe,GAAG,IAAI,OAAO,CAAO,UAAU,OAAO,EAAE,OAAO;YAClE,sBAAsB,GAAG,OAAO,CAAA;QAClC,CAAC,CAAC,CAAA;QAEF,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBAErC,qBAAqB,EAAE,CAAA;YACzB,CAAC;SACF,CAAA;QAED,MAAM,eAAe,GAAG;YACtB,MAAM,EAAE,UAAU;YAClB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,cAAc,CAAA;gBAEpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;gBACvC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBAEtC,sBAAsB,EAAE,CAAA;gBAExB,oCAAoC;gBACpC,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;YAC7B,CAAC;SACF,CAAA;QACD,OAAO;QAEP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,EAC5C,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,EACF,EAAC,KAAK,EAAE,IAAI,KAAK,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,EAAC,CACnC,CAAA;QAED,MAAM,eAAe,CAAA;QAErB,OAAO;QACP,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;KAavF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACxD,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;QAChD,OAAO;QACP,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAA;QAE5E,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACzC,QAAQ;QACR,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAC7C,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,eAAe,EAChC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,EAAE,CAAA;QAE9C,MAAM,sBAAsB,EAAE,CAAA;QAC9B,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAE/B,MAAM,OAAO,CAAA;QACb,OAAO;QACP,MAAM,CAAC,KAAK,CAAC,CAAC,oBAAoB,EAAE,CAAA;IACtC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC9C,QAAQ;QACR,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAC7C,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,eAAe,EAChC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,EAAE,CAAA;QAE9C,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAA;QAErD,MAAM,OAAO,CAAA;QACb,OAAO;QACP,MAAM,CAAC,KAAK,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAEpC,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oFAAoF,EAAE,KAAK,IAAI,EAAE;QACpG,QAAQ;QACR,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAE7C,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBAErC,oCAAoC;gBACpC,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;YAC7B,CAAC;SACF,CAAA;QAED,OAAO;QAEP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,eAAe,EAChC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,EAAE,CAAA;QAE9C,eAAe,CAAC,KAAK,EAAE,CAAA;QAEvB,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcvF,CAAC,CAAA;QAEF,MAAM,OAAO,CAAA;QAEb,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC,cAAc,CAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;KAKrG,CAAC,CAAA;QACF,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAEvD,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACnE,QAAQ;QACR,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAE7C,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBAErC,oCAAoC;gBACpC,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;YAC7B,CAAC;SACF,CAAA;QAED,OAAO;QAEP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,eAAe,EAChC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,EAAE,CAAA;QAE9C,eAAe,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAA;QAE7C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcvF,CAAC,CAAA;QAEF,MAAM,OAAO,CAAA;QAEb,MAAM,CAAC,QAAQ,CAAC,wBAAwB,CAAC,cAAc,CAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;KAKrG,CAAC,CAAA;QACF,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAEvD,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QAC3D,QAAQ;QACR,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YACvC,CAAC;SACF,CAAA;QAED,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;QAExD,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;KAevF,CAAC,CAAA;QAEF,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;QAChD,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAA;QAE5E,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;QACtF,QAAQ;QACR,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,OAAiB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC3E,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAA;YACzC,CAAC;SACF,CAAA;QAED,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAC7C,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,CAAA;QAEhD,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,eAAe,EAChC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAA;QACpF,MAAM,CAAC,KAAK,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAE3E,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACxC,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,qBAAqB,CAAC;YACnD,8BAA8B,EAAE,KAAK;YACrC,8DAA8D;SACxD,CAAC,CAAA;QAET,IAAI,qBAAiC,CAAA;QAErC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YACnD,qBAAqB,GAAG,OAAO,CAAA;QACjC,CAAC,CAAC,CAAA;QAEF,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBAErC,qBAAqB,EAAE,CAAA;YACzB,CAAC;SACF,CAAA;QAED,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,WAAW,EAAE,GAAG,EAChB,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,cAAc,CAAA;QAEpB,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;KAevF,CAAC,CAAA;QAEF,MAAM,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;QAE3C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;KAevF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAChF,QAAQ;QACR,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YACvC,CAAC;SACF,CAAA;QAED,OAAO;QACP,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE;gBACH,GAAG,OAAO;gBACV,oBAAoB,EAAE,KAAK;aAC5B,EACD,WAAW,EAAE,GAAG,EAChB,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;QAExD,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcvF,CAAC,CAAA;QAEF,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;QACzD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;QAEtD,MAAM,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;QAChD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAA;QAEtD,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC5E,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAE9F,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YACvC,CAAC;SACF,CAAA;QAED,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,WAAW,EAAE,GAAG,EAChB,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,cAAc,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAA;QAEzE,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;KAgB1G,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACtD,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;QAE9D,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;KAYvF,CAAC,CAAA;QAEF,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,gBAAgB,CAAC,cAAc,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;QAChD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAEtD,MAAM,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;QAE3C,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;KAYvF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;QAC/F,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAE/D,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YACvC,CAAC;SACF,CAAA;QAED,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,0BAA0B,CAAC,cAAc,EAAE,+CAA+C,EAAE,GAAG,CAAC,CAAA;QAEtG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;KAgBvF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,mFAAmF,EAAE,KAAK,IAAI,EAAE;QACnG,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAE3F,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,SAAS;YACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAoB,EAAE,EAAE;gBAC1E,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;gBACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;gBACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YACvC,CAAC;SACF,CAAA;QAED,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,CAAC,cAAc,CAAC,EAC3B,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,0BAA0B,CAAC,cAAc,EAAE,+CAA+C,EAAE,GAAG,CAAC,CAAA;QAEtG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;;;KAgBvF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QACjD,QAAQ;QACR,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;KAYvF,CAAC,CAAA;QAEF,yCAAyC;QACzC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;QAExD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,EAAE,CAAA;QAEtD,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAClF,QAAQ;QACR,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAE3F,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,cAAc,CAAC,cAAc,EAAE,4DAA4D,CAAC,CAAA;QAElG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;;KAcvF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAClE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAA;QAE3E,MAAM,cAAc,GAAG,MAAM,CAC3B,oBAAC,GAAG,IACF,SAAS,EAAE,EAAE,EACb,eAAe,EAAE,IAAI,eAAe,EAAE,EACtC,UAAU,EAAC,qBAAqB,EAChC,WAAW,EAAC,8BAA8B,EAC1C,GAAG,EAAE,OAAO,EACZ,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAA;QAED,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;KAYvF,CAAC,CAAA;QAEF,MAAM,sBAAsB,EAAE,CAAA;QAC9B,MAAM,0BAA0B,CAAC,cAAc,EAAE,8BAA8B,EAAE,GAAG,CAAC,CAAA;QAErF,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC;;;;;;;;;;;;;KAavF,CAAC,CAAA;QAEF,sDAAsD;QACtD,cAAc,CAAC,OAAO,EAAE,CAAA;IAC1B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import {Dev} from './Dev.js'\nimport {fetchAppPreviewMode} from '../../fetch.js'\nimport {\n  getLastFrameAfterUnmount,\n  render,\n  sendInputAndWait,\n  sendInputAndWaitForContent,\n  Stdin,\n  waitForContent,\n  waitForInputsToBeReady,\n} from '@shopify/cli-kit/node/testing/ui'\nimport {AbortController, AbortSignal} from '@shopify/cli-kit/node/abort'\nimport React from 'react'\nimport {describe, expect, test, vi} from 'vitest'\nimport {unstyled} from '@shopify/cli-kit/node/output'\nimport {openURL} from '@shopify/cli-kit/node/system'\nimport {Writable} from 'stream'\n\nvi.mock('@shopify/cli-kit/node/system')\nvi.mock('../../../context.js')\nvi.mock('../../fetch.js')\n\nconst testApp = {\n  canEnablePreviewMode: true,\n  developmentStorePreviewEnabled: false,\n  apiKey: '123',\n  token: '123',\n}\n\nconst developerPreview = {\n  fetchMode: vi.fn(async () => true),\n  enable: vi.fn(async () => {}),\n  disable: vi.fn(async () => {}),\n  update: vi.fn(async (_state: boolean) => true),\n}\n\ndescribe('Dev', () => {\n  test('renders a stream of concurrent outputs from sub-processes, shortcuts and a preview url', async () => {\n    // Given\n    let backendPromiseResolve: () => void\n    let frontendPromiseResolve: () => void\n\n    const backendPromise = new Promise<void>(function (resolve, _reject) {\n      backendPromiseResolve = resolve\n    })\n\n    const frontendPromise = new Promise<void>(function (resolve, _reject) {\n      frontendPromiseResolve = resolve\n    })\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        backendPromiseResolve()\n      },\n    }\n\n    const frontendProcess = {\n      prefix: 'frontend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        await backendPromise\n\n        stdout.write('first frontend message')\n        stdout.write('second frontend message')\n        stdout.write('third frontend message')\n\n        frontendPromiseResolve()\n      },\n    }\n    // When\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess, frontendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await frontendPromise\n\n    // Then\n    expect(unstyled(renderInstance.lastFrame()!.replace(/\\d/g, '0'))).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend  │ first backend message\n      00:00:00 │ backend  │ second backend message\n      00:00:00 │ backend  │ third backend message\n      00:00:00 │ frontend │ first frontend message\n      00:00:00 │ frontend │ second frontend message\n      00:00:00 │ frontend │ third frontend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test(\"doesn't render shortcuts if the stdin is not a TTY\", async () => {\n    // Given\n    let backendPromiseResolve: () => void\n    let frontendPromiseResolve: () => void\n\n    const backendPromise = new Promise<void>(function (resolve, _reject) {\n      backendPromiseResolve = resolve\n    })\n\n    const frontendPromise = new Promise<void>(function (resolve, _reject) {\n      frontendPromiseResolve = resolve\n    })\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        backendPromiseResolve()\n      },\n    }\n\n    const frontendProcess = {\n      prefix: 'frontend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        await backendPromise\n\n        stdout.write('first frontend message')\n        stdout.write('second frontend message')\n        stdout.write('third frontend message')\n\n        frontendPromiseResolve()\n\n        // await promise that never resolves\n        await new Promise(() => {})\n      },\n    }\n    // When\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess, frontendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n      {stdin: new Stdin({isTTY: false})},\n    )\n\n    await frontendPromise\n\n    // Then\n    expect(unstyled(renderInstance.lastFrame()!.replace(/\\d/g, '0'))).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend  │ first backend message\n      00:00:00 │ backend  │ second backend message\n      00:00:00 │ backend  │ third backend message\n      00:00:00 │ frontend │ first frontend message\n      00:00:00 │ frontend │ second frontend message\n      00:00:00 │ frontend │ third frontend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('opens the previewUrl when p is pressed', async () => {\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await waitForInputsToBeReady()\n    await sendInputAndWait(renderInstance, 100, 'p')\n    // Then\n    expect(vi.mocked(openURL)).toHaveBeenNthCalledWith(1, 'https://shopify.com')\n\n    renderInstance.unmount()\n  })\n\n  test('quits when q is pressed', async () => {\n    // Given\n    const abortController = new AbortController()\n    const abort = vi.spyOn(abortController, 'abort')\n\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={abortController}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    const promise = renderInstance.waitUntilExit()\n\n    await waitForInputsToBeReady()\n    renderInstance.stdin.write('q')\n\n    await promise\n    // Then\n    expect(abort).toHaveBeenCalledOnce()\n  })\n\n  test('quits when ctrl+c is pressed', async () => {\n    // Given\n    const abortController = new AbortController()\n    const abort = vi.spyOn(abortController, 'abort')\n\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={abortController}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    const promise = renderInstance.waitUntilExit()\n\n    await waitForInputsToBeReady()\n    await sendInputAndWait(renderInstance, 100, '\\u0003')\n\n    await promise\n    // Then\n    expect(abort).toHaveBeenCalledOnce()\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('abortController can be used to exit from outside and should preserve static output', async () => {\n    // Given\n    const abortController = new AbortController()\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        // await promise that never resolves\n        await new Promise(() => {})\n      },\n    }\n\n    // When\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={abortController}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    const promise = renderInstance.waitUntilExit()\n\n    abortController.abort()\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Shutting down dev ...\n      \"\n    `)\n\n    await promise\n\n    expect(unstyled(getLastFrameAfterUnmount(renderInstance)!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n      \"\n    `)\n    expect(developerPreview.disable).toHaveBeenCalledOnce()\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('abortController can be used to exit with an error', async () => {\n    // Given\n    const abortController = new AbortController()\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        // await promise that never resolves\n        await new Promise(() => {})\n      },\n    }\n\n    // When\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={abortController}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    const promise = renderInstance.waitUntilExit()\n\n    abortController.abort('something went wrong')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Shutting down dev because of an error ...\n      \"\n    `)\n\n    await promise\n\n    expect(unstyled(getLastFrameAfterUnmount(renderInstance)!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n      \"\n    `)\n    expect(developerPreview.disable).toHaveBeenCalledOnce()\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('accepts inputs when the processes resolve', async () => {\n    // Given\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    await waitForInputsToBeReady()\n    await sendInputAndWait(renderInstance, 100, 'p')\n    expect(vi.mocked(openURL)).toHaveBeenNthCalledWith(1, 'https://shopify.com')\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('when a process throws an error it calls abort on the abortController', async () => {\n    // Given\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (_stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        throw new Error('something went wrong')\n      },\n    }\n\n    const abortController = new AbortController()\n    const abort = vi.spyOn(abortController, 'abort')\n\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={abortController}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await expect(renderInstance.waitUntilExit()).rejects.toThrow('something went wrong')\n    expect(abort).toHaveBeenNthCalledWith(1, new Error('something went wrong'))\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('polls for preview mode', async () => {\n    // Given\n    vi.mocked(fetchAppPreviewMode).mockResolvedValueOnce({\n      developmentStorePreviewEnabled: false,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any)\n\n    let backendPromiseResolve: () => void\n\n    const backendPromise = new Promise<void>((resolve) => {\n      backendPromiseResolve = resolve\n    })\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n\n        backendPromiseResolve()\n      },\n    }\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        pollingTime={200}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await backendPromise\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    await waitForContent(renderInstance, 'off')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✖ off\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test(\"doesn't poll for preview mode when the app does not support it\", async () => {\n    // Given\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    // When\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={{\n          ...testApp,\n          canEnablePreviewMode: false,\n        }}\n        pollingTime={200}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    expect(developerPreview.fetchMode).not.toHaveBeenCalled()\n    expect(developerPreview.enable).not.toHaveBeenCalled()\n\n    await sendInputAndWait(renderInstance, 100, 'd')\n    expect(developerPreview.update).not.toHaveBeenCalled()\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('shows an error message when polling for preview mode fails', async () => {\n    // Given\n    vi.mocked(developerPreview.fetchMode).mockRejectedValueOnce(new Error('something went wrong'))\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        pollingTime={200}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await waitForContent(renderInstance, 'Failed to fetch the latest status')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d\\d:\\d\\d:\\d\\d/g, '00:00:00')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      Failed to fetch the latest status of the development store preview, trying again in 5 seconds.\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('enables preview mode when pressing d', async () => {\n    // Given\n    vi.mocked(developerPreview.update).mockResolvedValueOnce(true)\n\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    await waitForInputsToBeReady()\n    await sendInputAndWait(renderInstance, 100, 'd')\n    expect(developerPreview.update).toHaveBeenCalledOnce()\n\n    await waitForContent(renderInstance, 'off')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✖ off\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test(\"shows an error message if enabling preview mode by pressing d doesn't succeed\", async () => {\n    // Given\n    vi.mocked(developerPreview.update).mockResolvedValueOnce(false)\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await waitForInputsToBeReady()\n    await sendInputAndWaitForContent(renderInstance, 'Failed to turn off development store preview.', 'd')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      Failed to turn off development store preview.\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('shows an error message if enabling preview mode by pressing d throws an exception', async () => {\n    // Given\n    vi.mocked(developerPreview.update).mockRejectedValueOnce(new Error('something went wrong'))\n\n    const backendProcess = {\n      prefix: 'backend',\n      action: async (stdout: Writable, _stderr: Writable, _signal: AbortSignal) => {\n        stdout.write('first backend message')\n        stdout.write('second backend message')\n        stdout.write('third backend message')\n      },\n    }\n\n    const renderInstance = render(\n      <Dev\n        processes={[backendProcess]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await waitForInputsToBeReady()\n    await sendInputAndWaitForContent(renderInstance, 'Failed to turn off development store preview.', 'd')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"00:00:00 │ backend │ first backend message\n      00:00:00 │ backend │ second backend message\n      00:00:00 │ backend │ third backend message\n\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      Failed to turn off development store preview.\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('enables preview mode at startup', async () => {\n    // Given\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    // wait for useEffect callbacks to be run\n    await new Promise((resolve) => setTimeout(resolve, 500))\n\n    expect(developerPreview.enable).toHaveBeenCalledOnce()\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('shows an error message if enabling preview mode at startup fails', async () => {\n    // Given\n    vi.mocked(developerPreview.enable).mockRejectedValueOnce(new Error('something went wrong'))\n\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    await waitForContent(renderInstance, 'Failed to turn on development store preview automatically.')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✖ off\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      Failed to turn on development store preview automatically.\n      Try turning it on manually by pressing \\`d\\`.\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n\n  test('shows an error if handling input throws an error', async () => {\n    vi.mocked(openURL).mockRejectedValueOnce(new Error('something went wrong'))\n\n    const renderInstance = render(\n      <Dev\n        processes={[]}\n        abortController={new AbortController()}\n        previewUrl=\"https://shopify.com\"\n        graphiqlUrl=\"https://graphiql.shopify.com\"\n        app={testApp}\n        developerPreview={developerPreview}\n      />,\n    )\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      \"\n    `)\n\n    await waitForInputsToBeReady()\n    await sendInputAndWaitForContent(renderInstance, 'Failed to handle your input.', 'p')\n\n    expect(unstyled(renderInstance.lastFrame()!).replace(/\\d/g, '0')).toMatchInlineSnapshot(`\n      \"\n      ────────────────────────────────────────────────────────────────────────────────────────────────────\n\n      › Press d │ toggle development store preview: ✔ on\n      › Press g │ open the GraphiQL Explorer in your browser\n      › Press p │ preview in your browser\n      › Press q │ quit\n\n      Preview URL: https://shopify.com\n      GraphiQL URL: https://graphiql.shopify.com\n      Failed to handle your input.\n      \"\n    `)\n\n    // unmount so that polling is cleared after every test\n    renderInstance.unmount()\n  })\n})\n"]}