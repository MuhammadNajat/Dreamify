{"version":3,"file":"graphiql.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/graphiql/templates/graphiql.tsx"],"names":[],"mappings":"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","sourcesContent":["import {platformAndArch} from '@shopify/cli-kit/node/os'\nimport React from 'react'\nimport {renderToStaticMarkup} from 'react-dom/server'\nimport {\n  AppProvider,\n  Badge,\n  Banner,\n  BlockStack,\n  Box,\n  Card,\n  Grid,\n  InlineStack,\n  Link,\n  Select,\n  Text,\n} from '@shopify/polaris'\nimport {CircleAlertMajor, LinkMinor} from '@shopify/polaris-icons'\n\nconst controlKey = platformAndArch().platform === 'darwin' ? 'MAC_COMMAND_KEY' : 'Ctrl'\n\nconst graphiqlIntroMessage = `\n# Welcome to the Shopify GraphiQL Explorer! If you've used GraphiQL before,\n# you can go ahead and jump to the next tab.\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-${controlKey}-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-${controlKey}-M (or press the merge button)\n#\n#        Run Query:  ${controlKey}-Enter (or press the play button)\n#\n#    Auto Complete:  ${controlKey}-Space (or just start typing)\n#\n`\n\nexport const defaultQuery = `query shopInfo {\n  shop {\n    name\n    url\n    myshopifyDomain\n    plan {\n      displayName\n      partnerDevelopment\n      shopifyPlus\n    }\n  }\n}\n`.replace(/\\n/g, '\\\\n')\n\ninterface GraphiQLTemplateOptions {\n  apiVersion: string\n  apiVersions: string[]\n  appName: string\n  appUrl: string\n  randomKey: string\n  storeFqdn: string\n}\n\nexport function graphiqlTemplate({\n  apiVersion,\n  apiVersions,\n  appName,\n  appUrl,\n  randomKey,\n  storeFqdn,\n}: GraphiQLTemplateOptions): string {\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>GraphiQL</title>\n    <link rel=\"shortcut icon\" href=\"{{url}}/graphiql/favicon.ico\" type=\"image/x-icon\" />\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/@shopify/polaris@12.1.1/build/esm/styles.css\" />\n    <style>\n      body {\n        height: 100%;\n        margin: 0;\n        width: 100%;\n        overflow: hidden;\n      }\n      .Polaris-Page--fullWidth {\n        width: 100%;\n      }\n      #top-bar {\n        border-bottom: 1px solid var(--p-color-border);\n      }\n      #top-bar #top-error-bar {\n        display: none;\n      }\n      #top-error-bar .Polaris-FullscreenBar__BackAction {\n        /* hide default back button in FullscreenBar component */\n        display: none;\n      }\n      #top-error-bar button {\n        /* hide X to dismiss banner */\n        display: none;\n      }\n      #top-bar .top-bar-section {\n        display: inline-flex;\n        align-items: center;\n        gap: 8px;\n      }\n      #top-bar .Polaris-Grid-Cell:nth-child(2) {\n        justify-self: right;\n      }\n      #top-bar #scopes-note {\n        display: inline-flex;\n        align-items: center;\n        height: 100%;\n      }\n      #top-bar .status-badge-option {\n        display: none;\n      }\n      #top-bar #status-badge-running {\n        display: block;\n      }\n      #graphiql {\n        height: 100vh;\n        display: flex;\n        flex-direction: column;\n      }\n      #graphiql-explorer {\n        flex-grow: 1;\n        overflow: auto;\n      }\n      #top-bar #outbound-links a:hover .Polaris-Text--root {\n        text-decoration: underline;\n      }\n      #top-bar #outbound-links a span.Polaris-Text--root {\n        max-width: max(12vw, 150px);\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n      }\n      @media only screen and (max-width: 1550px) {\n        .top-bar-section-title {\n          display: none;\n        }\n      }\n      @media only screen and (max-width: 1150px) {\n        #top-bar #outbound-links a span.Polaris-Text--root {\n          max-width: max(12vw, 140px);\n        }\n      }\n      @media only screen and (max-width: 1080px) {\n        #top-bar .Polaris-Grid-Cell:nth-child(2) {\n          justify-self: left;\n        }\n      }\n      @media only screen and (max-width: 650px) {\n        #top-bar #outbound-links a span.Polaris-Text--root {\n          max-width: 17vw;\n        }\n      }\n    </style>\n\n    <script\n      src=\"https://unpkg.com/react@17/umd/react.development.js\"\n      integrity=\"sha512-Vf2xGDzpqUOEIKO+X2rgTLWPY+65++WPwCHkX2nFMu9IcstumPsf/uKKRd5prX3wOu8Q0GBylRpsDB26R6ExOg==\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"\n      integrity=\"sha512-Wr9OKCTtq1anK0hq5bY3X/AvDI5EflDSAh0mE9gma+4hl+kXdTJPKZ3TwLMBcrgUeoY0s3dq9JjhCQc7vddtFg==\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/graphiql/graphiql.min.css\" />\n  </head>\n  <body>\n    <div id=\"graphiql\">\n      ${renderToStaticMarkup(\n        <AppProvider i18n={{}}>\n          <div id=\"top-bar\">\n            <Box background=\"bg-surface\" padding=\"400\">\n              <BlockStack gap=\"300\">\n                <div id=\"top-error-bar\">\n                  <Card padding={{xs: '0'}}>\n                    <Banner tone=\"critical\" onDismiss={() => {}}>\n                      <p>\n                        The server has been stopped. Restart <code>dev</code> from the CLI and launch the GraphiQL\n                        explorer again.\n                      </p>\n                    </Banner>\n                  </Card>\n                </div>\n                <Grid columns={{xs: 3, sm: 3, md: 3}}>\n                  <Grid.Cell columnSpan={{xs: 3, sm: 3, md: 3, lg: 7, xl: 7}}>\n                    <InlineStack gap=\"400\">\n                      <div id=\"status-badge\" className=\"top-bar-section\">\n                        <div className=\"status-badge-option\" id=\"status-badge-running\">\n                          <span className=\"top-bar-section-title\">Status: </span>\n                          <Badge tone=\"success\" progress=\"complete\">\n                            Running\n                          </Badge>\n                        </div>\n                        <div className=\"status-badge-option\" id=\"status-badge-unauthorized\">\n                          <span className=\"top-bar-section-title\">Status: </span>\n                          <Badge tone=\"attention\" icon={CircleAlertMajor}>\n                            App uninstalled\n                          </Badge>\n                        </div>\n                        <div className=\"status-badge-option\" id=\"status-badge-disconnected\">\n                          <span className=\"top-bar-section-title\">Status: </span>\n                          <Badge tone=\"warning\" progress=\"partiallyComplete\">\n                            Disconnected\n                          </Badge>\n                        </div>\n                      </div>\n                      <div id=\"version-select\" className=\"top-bar-section\">\n                        <span className=\"top-bar-section-title\">API version: </span>\n                        <Select\n                          label=\"API version\"\n                          labelHidden\n                          options={apiVersions}\n                          value={apiVersion}\n                          onChange={() => {}}\n                        />\n                      </div>\n                      <div id=\"outbound-links\" className=\"top-bar-section\">\n                        <span className=\"top-bar-section-title\">Store: </span>\n                        <Link url={`https://${storeFqdn}/admin`} target=\"_blank\">\n                          <Badge tone=\"info\" icon={LinkMinor}>\n                            {storeFqdn}\n                          </Badge>\n                        </Link>\n                        <span className=\"top-bar-section-title\">App: </span>\n                        <Link url={appUrl} target=\"_blank\">\n                          <Badge tone=\"info\" icon={LinkMinor}>\n                            {appName}\n                          </Badge>\n                        </Link>\n                      </div>\n                    </InlineStack>\n                  </Grid.Cell>\n                  <Grid.Cell columnSpan={{xs: 3, sm: 3, md: 3, lg: 5, xl: 5}}>\n                    <div id=\"scopes-note\" className=\"top-bar-section\">\n                      <Text as=\"span\" tone=\"subdued\">\n                        GraphiQL runs on the same access scopes you’ve defined in the TOML file for your app.\n                      </Text>\n                    </div>\n                  </Grid.Cell>\n                </Grid>\n              </BlockStack>\n            </Box>\n          </div>\n        </AppProvider>,\n      )}\n      <div id=\"graphiql-explorer\">Loading...</div>\n    </div>\n    <script\n      src=\"https://unpkg.com/graphiql@3.0.4/graphiql.min.js\"\n      type=\"application/javascript\"\n    ></script>\n    <script>\n      const macCommandKey = String.fromCodePoint(8984)\n      const renderGraphiQL = function(apiVersion) {\n        ReactDOM.render(\n          React.createElement(GraphiQL, {\n            fetcher: GraphiQL.createFetcher({\n              url: '{{url}}/graphiql/graphql.json?key=${randomKey}&api_version=' + apiVersion,\n            }),\n            defaultEditorToolsVisibility: true,\n            defaultTabs: [\n              {query: \"${graphiqlIntroMessage\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')}\".replace(/MAC_COMMAND_KEY/g, macCommandKey)},\n              {%for query in defaultQueries%}\n                {query: \"{%if query.preface %}{{query.preface}}\\\\n{% endif %}{{query.query}}\", variables: \"{{query.variables}}\"},\n              {%endfor%}\n            ],\n            isHeadersEditorEnabled: false,\n          }),\n          document.getElementById('graphiql-explorer'),\n        )\n      }\n      renderGraphiQL('${apiVersion}')\n\n      // Update the version when the select changes\n      document.getElementById('version-select').addEventListener('change', function(event) {\n        document.querySelector('#version-select .Polaris-Select__SelectedOption').innerText = event.target.value\n        renderGraphiQL(event.target.value)\n      })\n\n      // Start out optimistic\n      let serverIsLive = true\n      let appIsInstalled = true\n\n      const updateBadge = function() {\n        const topErrorBar = document.querySelector('#graphiql #top-error-bar')\n        const statusDiv = document.querySelector('#graphiql #status-badge')\n        const allBadgeDivs = Array.from(statusDiv.querySelectorAll('.status-badge-option'))\n        let activeBadge = 'running'\n        if (!serverIsLive) activeBadge = 'disconnected'\n        if (!appIsInstalled) activeBadge = 'unauthorized'\n        allBadgeDivs.forEach(function(badge) {\n          if (badge.id == ('status-badge-' + activeBadge)) {\n            badge.style.display = 'block'\n          } else {\n            badge.style.display = 'none'\n          }\n        })\n        topErrorBar.style.display = serverIsLive ? 'none' : 'block'\n      }\n      const statusInterval = setInterval(updateBadge, 1000)\n\n      // Warn when the server has been stopped\n      const pingInterval = setInterval(function() {\n        const displayErrorServerStoppedTimeout = setTimeout(function() { serverIsLive = false }, 3000)\n        fetch('{{url}}/graphiql/ping')\n          .then(function(response) {\n            if (response.status === 200) {\n              clearTimeout(displayErrorServerStoppedTimeout)\n              serverIsLive = true\n            } else {\n              serverIsLive = false\n            }\n          })\n      }, 2000)\n\n      // Warn when the app has been uninstalled\n      setInterval(function() {\n        fetch('{{ url }}/graphiql/status')\n          .then(async function(response) {\n            appIsInstalled = (await response.json()).status === 'OK'\n          })\n      }, 5000)\n    </script>\n  </body>\n</html>\n`\n}\n"]}