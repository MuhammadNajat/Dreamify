{"version":3,"file":"web.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/processes/web.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseProcess} from './types.js'\nimport {frontAndBackendConfig} from './utils.js'\nimport {Web, WebType} from '../../../models/app/app.js'\nimport {isWebType} from '../../../models/app/loader.js'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {isSpinEnvironment, spinFqdn} from '@shopify/cli-kit/node/context/spin'\nimport {getAvailableTCPPort} from '@shopify/cli-kit/node/tcp'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {Writable} from 'stream'\n\nexport interface LaunchWebOptions {\n  port: number\n  apiKey: string\n  apiSecret?: string\n  hostname?: string\n  backendPort: number\n  frontendServerPort?: number\n  directory: string\n  devCommand: string\n  scopes?: string\n  shopCustomDomain?: string\n  hmrServerOptions?: {port: number; httpPaths: string[]}\n  portFromConfig?: number\n}\n\nexport interface WebProcess extends BaseProcess<LaunchWebOptions> {\n  type: 'web'\n}\n\nexport async function setupWebProcesses({\n  webs,\n  proxyUrl,\n  frontendPort,\n  backendPort,\n  apiKey,\n  apiSecret,\n  scopes,\n}: {\n  webs: Web[]\n  proxyUrl: string\n  frontendPort: number\n  backendPort: number\n  apiKey: string\n  apiSecret: string\n  scopes: string\n}): Promise<WebProcess[]> {\n  const {frontendConfig} = frontAndBackendConfig(webs)\n\n  const hmrServerPort = frontendConfig?.configuration.hmr_server ? await getAvailableTCPPort() : undefined\n  const shopCustomDomain = isSpinEnvironment() ? `shopify.${await spinFqdn()}` : undefined\n\n  const webProcessSetups = webs.map(async (web) => {\n    const port = await getWebProcessPort({web, frontendPort, backendPort})\n\n    const hmrServerOptions =\n      hmrServerPort && web.configuration.roles.includes(WebType.Frontend)\n        ? {\n            port: hmrServerPort,\n            httpPaths: web.configuration.hmr_server!.http_paths,\n          }\n        : undefined\n\n    return {\n      type: 'web',\n      prefix: web.configuration.name ?? ['web', ...web.configuration.roles].join('-'),\n      function: launchWebProcess,\n      options: {\n        port,\n        portFromConfig: web.configuration.port,\n        apiKey,\n        apiSecret,\n        hostname: proxyUrl,\n        backendPort,\n        // when we delete `dev.ts` we can rename frontendServerPort to frontendPort\n        frontendServerPort: frontendPort,\n        directory: web.directory,\n        devCommand: web.configuration.commands.dev,\n        scopes,\n        shopCustomDomain,\n        hmrServerOptions,\n      },\n    } as WebProcess\n  })\n  return Promise.all(webProcessSetups)\n}\n\nasync function getWebProcessPort({\n  web,\n  frontendPort,\n  backendPort,\n}: {\n  web: Web\n  frontendPort: number\n  backendPort: number\n}): Promise<number> {\n  if (isWebType(web, WebType.Frontend)) {\n    return frontendPort\n  } else if (isWebType(web, WebType.Backend)) {\n    return backendPort\n  } else {\n    return getAvailableTCPPort()\n  }\n}\n\nexport async function launchWebProcess(\n  {stdout, stderr, abortSignal}: {stdout: Writable; stderr: Writable; abortSignal: AbortSignal},\n  {\n    port,\n    apiKey,\n    apiSecret,\n    hostname,\n    backendPort,\n    frontendServerPort,\n    directory,\n    devCommand,\n    scopes,\n    shopCustomDomain,\n    hmrServerOptions,\n  }: LaunchWebOptions,\n) {\n  const hmrServerPort = hmrServerOptions?.port\n  const [cmd, ...args] = devCommand.split(' ')\n\n  const env = {\n    SHOPIFY_API_KEY: apiKey,\n    SHOPIFY_API_SECRET: apiSecret,\n    HOST: hostname,\n    SCOPES: scopes,\n    NODE_ENV: `development`,\n    ...(shopCustomDomain && {\n      SHOP_CUSTOM_DOMAIN: shopCustomDomain,\n    }),\n    BACKEND_PORT: `${backendPort}`,\n    FRONTEND_PORT: `${frontendServerPort}`,\n    ...(hmrServerPort && {\n      HMR_SERVER_PORT: `${hmrServerPort}`,\n    }),\n    APP_URL: hostname,\n    APP_ENV: 'development',\n    // Note: These are Remix-specific variables\n    REMIX_DEV_ORIGIN: hostname,\n  }\n\n  await exec(cmd!, args, {\n    cwd: directory,\n    stdout,\n    stderr,\n    signal: abortSignal,\n    env: {\n      ...env,\n      PORT: `${port}`,\n      // Note: These are Laravel variables for backwards compatibility with 2.0 templates.\n      SERVER_PORT: `${port}`,\n    },\n  })\n}\n"]}