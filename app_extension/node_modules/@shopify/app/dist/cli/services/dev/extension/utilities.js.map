{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/utilities.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,mBAAmB,EAAC,MAAM,wDAAwD,CAAA;AAE1F,MAAM,0CAA0C,GAAG,IAAI,GAAG,CAAC;IACzD,2DAA2D;IAC3D,2DAA2D;IAC3D,iEAAiE;IACjE,4CAA4C;CAC7C,CAAC,CAAA;AAEF;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,UAA+B,EAAE,KAAa,EAAE,eAAwB;IACjH,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAA;IAClG,IAAI,CAAC,cAAc;QAAE,OAAO,SAAS,CAAA;IACrC,IAAI,eAAe;QAAE,OAAO,eAAe,CAAA;IAC3C,MAAM,SAAS,GAAG,MAAM,mBAAmB,CAAC,KAAK,CAAC,CAAA;IAClD,OAAO,SAAS,SAAS,IAAI,CAAA;AAC/B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,8BAA8B,CAAC,oBAA4B;IACzE,MAAM,MAAM,GAAG,oBAAoB,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAA;IAC3E,MAAM,IAAI,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAE/C,QAAQ,MAAM,EAAE;QACd,yEAAyE;QACzE,KAAK,UAAU,CAAC,CAAC;YACf,IAAI,IAAI,KAAK,MAAM,EAAE;gBACnB,OAAO,eAAe,CAAA;aACvB;YAED,yBAAyB;YACzB,OAAO,UAAU,CAAA;SAClB;QAED,kDAAkD;QAClD,KAAK,iBAAiB,CAAC;QACvB,KAAK,kBAAkB,CAAC,CAAC;YACvB,IAAI,0CAA0C,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE;gBACxE,OAAO,UAAU,CAAA;aAClB;YAED,OAAO,mBAAmB,CAAA;SAC3B;QAED,oCAAoC;QACpC,KAAK,QAAQ,CAAC,CAAC;YACb,OAAO,eAAe,CAAA;SACvB;QAED;YACE,6BAA6B;YAC7B,OAAO,MAAM,CAAA;KAChB;AACH,CAAC","sourcesContent":["import {ExtensionInstance} from '../../../models/extensions/extension-instance.js'\n\nimport {fetchProductVariant} from '../../../utilities/extensions/fetch-product-variant.js'\n\nconst CUSTOMER_ACCOUNT_CHECKOUT_RENDERED_TARGETS = new Set([\n  'customer-account.order-status.cart-line-item.render-after',\n  'customer-account.order-status.cart-line-list.render-after',\n  'customer-account.order-status.customer-information.render-after',\n  'customer-account.order-status.block.render',\n])\n\n/**\n * To prepare UI Extensions targeting Checkout for dev'ing we need to retrieve a valid product variant ID\n * @param extensions - The UI Extensions to dev\n * @param store - The store FQDN\n */\nexport async function buildCartURLIfNeeded(extensions: ExtensionInstance[], store: string, checkoutCartUrl?: string) {\n  const hasUIExtension = extensions.filter((extension) => extension.shouldFetchCartUrl()).length > 0\n  if (!hasUIExtension) return undefined\n  if (checkoutCartUrl) return checkoutCartUrl\n  const variantId = await fetchProductVariant(store)\n  return `/cart/${variantId}:1`\n}\n\n/**\n * Returns the surface for UI extension from an extension point target\n */\nexport function getExtensionPointTargetSurface(extensionPointTarget: string) {\n  const domain = extensionPointTarget.toLowerCase().replace(/(::|\\.).+$/, '')\n  const page = extensionPointTarget.split('.')[1]\n\n  switch (domain) {\n    // Covers Checkout UI extensions and Post purchase UI extensions (future)\n    case 'purchase': {\n      if (page === 'post') {\n        return 'post_purchase'\n      }\n\n      // Checkout UI extensions\n      return 'checkout'\n    }\n\n    // Covers Customer Accounts UI extensions (future)\n    case 'customeraccount':\n    case 'customer-account': {\n      if (CUSTOMER_ACCOUNT_CHECKOUT_RENDERED_TARGETS.has(extensionPointTarget)) {\n        return 'checkout'\n      }\n\n      return 'customer-accounts'\n    }\n\n    // Covers POS UI extensions (future)\n    case 'retail': {\n      return 'point_of_sale'\n    }\n\n    default:\n      // Covers Admin UI extensions\n      return domain\n  }\n}\n"]}