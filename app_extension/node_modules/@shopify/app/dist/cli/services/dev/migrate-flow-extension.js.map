{"version":3,"file":"migrate-flow-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/migrate-flow-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {LocalSource, RemoteSource} from '../context/identifiers.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {getExtensionIds, LocalRemoteSource} from '../context/id-matching.js'\nimport {\n  MigrateFlowExtensionMutation,\n  MigrateFlowExtensionSchema,\n  MigrateFlowExtensionVariables,\n} from '../../api/graphql/extension_migrate_flow_extension.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {slugify} from '@shopify/cli-kit/common/string'\n\nexport function getFlowExtensionsToMigrate(\n  localSources: LocalSource[],\n  remoteSources: RemoteSource[],\n  identifiers: IdentifiersExtensions,\n) {\n  const ids = getExtensionIds(localSources, identifiers)\n  const localExtensionTypesToMigrate = ['flow_action', 'flow_trigger']\n  const remoteExtensionTypesToMigrate = ['flow_action_definition', 'flow_trigger_definition']\n  const typesMap = new Map<string, string>([\n    ['flow_action', 'flow_action_definition'],\n    ['flow_trigger', 'flow_trigger_definition'],\n  ])\n\n  const local = localSources.filter((source) => localExtensionTypesToMigrate.includes(source.type))\n  const remote = remoteSources.filter((source) => remoteExtensionTypesToMigrate.includes(source.type))\n\n  // Map remote sources by uuid and slugified title (the slugified title is used for matching with local folder)\n  const remoteSourcesMap = new Map<string, RemoteSource>()\n  remote.forEach((remoteSource) => {\n    remoteSourcesMap.set(remoteSource.uuid, remoteSource)\n    remoteSourcesMap.set(slugify(remoteSource.title), remoteSource)\n  })\n\n  return local.reduce<LocalRemoteSource[]>((accumulator, localSource) => {\n    const localSourceId = ids[localSource.localIdentifier] ?? 'unknown'\n    const remoteSource = remoteSourcesMap.get(localSourceId) || remoteSourcesMap.get(localSource.localIdentifier)\n    const typeMatch = typesMap.get(localSource.type) === remoteSource?.type\n\n    if (remoteSource && typeMatch) {\n      accumulator.push({local: localSource, remote: remoteSource})\n    }\n    return accumulator\n  }, [])\n}\n\nexport async function migrateFlowExtensions(\n  extensionsToMigrate: LocalRemoteSource[],\n  appId: string,\n  remoteExtensions: RemoteSource[],\n) {\n  const migratedIDs = await Promise.all(extensionsToMigrate.map(({remote}) => migrateFlowExtension(appId, remote.id)))\n\n  const typesMap = new Map<string, string>([\n    ['flow_action_definition', 'FLOW_ACTION'],\n    ['flow_trigger_definition', 'FLOW_TRIGGER'],\n  ])\n\n  return remoteExtensions\n    .filter((extension) => migratedIDs.includes(extension.id))\n    .map((extension) => {\n      return {\n        ...extension,\n        type: typesMap.get(extension.type) ?? extension.type,\n      }\n    })\n}\n\nexport async function migrateFlowExtension(\n  apiKey: MigrateFlowExtensionVariables['apiKey'],\n  registrationId: MigrateFlowExtensionVariables['registrationId'],\n) {\n  const token = await ensureAuthenticatedPartners()\n  const variables: MigrateFlowExtensionVariables = {\n    apiKey,\n    registrationId,\n  }\n\n  const result: MigrateFlowExtensionSchema = await partnersRequest(MigrateFlowExtensionMutation, token, variables)\n\n  if (result?.migrateFlowExtension?.userErrors?.length > 0) {\n    const errors = result.migrateFlowExtension.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n\n  if (!result?.migrateFlowExtension?.migratedFlowExtension) {\n    throw new AbortError(\"Couldn't migrate to Flow extension\")\n  }\n\n  return registrationId\n}\n"]}