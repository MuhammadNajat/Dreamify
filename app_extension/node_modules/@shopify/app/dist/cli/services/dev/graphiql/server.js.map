{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/graphiql/server.ts"],"names":[],"mappings":"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","sourcesContent":["import {defaultQuery, graphiqlTemplate} from './templates/graphiql.js'\nimport {unauthorizedTemplate} from './templates/unauthorized.js'\nimport {urlNamespaces} from '../../../constants.js'\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {adminUrl, supportedApiVersions} from '@shopify/cli-kit/node/api/admin'\nimport {fetch} from '@shopify/cli-kit/node/http'\nimport {renderLiquidTemplate} from '@shopify/cli-kit/node/liquid'\nimport {dirname, joinPath} from '@shopify/cli-kit/node/path'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {encode as queryStringEncode} from 'node:querystring'\nimport {Server} from 'http'\nimport {Writable} from 'stream'\nimport {fileURLToPath} from 'url'\nimport {createRequire} from 'node:module'\n\nconst require = createRequire(import.meta.url)\n\nclass TokenRefreshError extends AbortError {\n  constructor() {\n    super('Failed to refresh credentials. Check that your app is installed, and try again.')\n  }\n}\n\ninterface SetupGraphiQLServerOptions {\n  stdout: Writable\n  port: number\n  appName: string\n  appUrl: string\n  apiKey: string\n  apiSecret: string\n  randomKey: string\n  url: string\n  storeFqdn: string\n}\n\nexport function setupGraphiQLServer({\n  stdout,\n  port,\n  appName,\n  appUrl,\n  apiKey,\n  apiSecret,\n  randomKey,\n  url,\n  storeFqdn,\n}: SetupGraphiQLServerOptions): Server {\n  outputDebug(`Setting up GraphiQL HTTP server...`, stdout)\n  const namespacedShopifyUrl = `https://${url}/${urlNamespaces.devTools}`\n\n  const app = express()\n    // Make the app accept all routes starting with /.shopify/xxx as /xxx\n    .use((req, _res, next) => {\n      if (req.path.startsWith(`/${urlNamespaces.devTools}`)) {\n        req.url = req.url.replace(`/${urlNamespaces.devTools}`, '')\n      }\n      next()\n    })\n\n  function failIfUnmatchedKey(str: string, res: express.Response): boolean {\n    if (str === randomKey) return false\n    res.status(404).send(`Invalid path ${res.req.originalUrl}`)\n    return true\n  }\n\n  let _token: string | undefined\n  async function token(): Promise<string> {\n    if (!_token) {\n      // eslint-disable-next-line require-atomic-updates\n      _token = await refreshToken()\n    }\n    return _token\n  }\n\n  async function refreshToken(): Promise<string> {\n    try {\n      outputDebug('refreshing token', stdout)\n      _token = undefined\n      const queryString = queryStringEncode({\n        client_id: apiKey,\n        client_secret: apiSecret,\n        grant_type: 'client_credentials',\n      })\n      const tokenResponse = await fetch(`https://${storeFqdn}/admin/oauth/access_token?${queryString}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      const tokenJson = (await tokenResponse.json()) as {access_token: string}\n      return tokenJson.access_token\n    } catch (_error) {\n      throw new TokenRefreshError()\n    }\n  }\n\n  app.get('/graphiql/ping', (_req, res) => {\n    res.send('pong')\n  })\n\n  const faviconPath = joinPath(dirname(fileURLToPath(import.meta.url)), '../../../../../assets/graphiql/favicon.ico')\n  app.get('/graphiql/favicon.ico', (_req, res) => {\n    res.sendFile(faviconPath)\n  })\n\n  const stylePath = require.resolve('@shopify/cli-kit/assets/style.css')\n  app.get('/graphiql/simple.css', (_req, res) => {\n    res.sendFile(stylePath)\n  })\n\n  async function fetchApiVersionsWithTokenRefresh(): Promise<string[]> {\n    let apiVersions: string[]\n    try {\n      apiVersions = await supportedApiVersions({storeFqdn, token: await token()})\n      // eslint-disable-next-line no-catch-all/no-catch-all\n    } catch (err) {\n      // Retry once with a new token, in case the token expired or was revoked\n      await refreshToken()\n      apiVersions = await supportedApiVersions({storeFqdn, token: await token()})\n    }\n    return apiVersions\n  }\n\n  app.get('/graphiql/status', (_req, res) => {\n    fetchApiVersionsWithTokenRefresh()\n      .then(() => res.send({status: 'OK'}))\n      .catch(() => res.send({status: 'UNAUTHENTICATED'}))\n  })\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  app.get('/graphiql', async (req, res) => {\n    outputDebug('Handling /graphiql request', stdout)\n    if (failIfUnmatchedKey(req.query.key as string, res)) return\n    let apiVersions: string[]\n    try {\n      apiVersions = await fetchApiVersionsWithTokenRefresh()\n    } catch (err) {\n      if (err instanceof TokenRefreshError) {\n        return res.send(\n          await renderLiquidTemplate(unauthorizedTemplate, {\n            previewUrl: appUrl,\n            url: namespacedShopifyUrl,\n          }),\n        )\n      }\n      throw err\n    }\n\n    const apiVersion = apiVersions.sort().reverse()[0]!\n\n    res.send(\n      await renderLiquidTemplate(\n        graphiqlTemplate({\n          apiVersion,\n          apiVersions: [...apiVersions, 'unstable'],\n          appName,\n          appUrl,\n          randomKey,\n          storeFqdn,\n        }),\n        {\n          url: namespacedShopifyUrl,\n          defaultQueries: [{query: defaultQuery}],\n        },\n      ),\n    )\n  })\n\n  app.use(bodyParser.json())\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  app.post('/graphiql/graphql.json', async (req, res) => {\n    outputDebug('Handling /graphiql/graphql.json request', stdout)\n    if (failIfUnmatchedKey(req.query.key as string, res)) return\n\n    const graphqlUrl = adminUrl(storeFqdn, req.query.api_version as string)\n    try {\n      const reqBody = JSON.stringify(req.body)\n\n      const runRequest = async () => {\n        const headers = {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'X-Shopify-Access-Token': await token(),\n        }\n\n        return fetch(graphqlUrl, {\n          method: req.method,\n          headers,\n          body: reqBody,\n        })\n      }\n\n      let result = await runRequest()\n      if (result.status === 401) {\n        outputDebug('Token expired, fetching new token', stdout)\n        await refreshToken()\n        result = await runRequest()\n      }\n\n      res.setHeader('Content-Type', 'application/json')\n      res.statusCode = result.status\n      const responseBody = await result.json()\n      res.json(responseBody)\n      // eslint-disable-next-line no-catch-all/no-catch-all\n    } catch (error: unknown) {\n      res.statusCode = 500\n      if (error instanceof Error) {\n        res.json({errors: [error.message]})\n      } else {\n        res.json({errors: ['Unknown error']})\n      }\n    }\n    res.end()\n  })\n  return app.listen(port, () => stdout.write('GraphiQL server started'))\n}\n"]}