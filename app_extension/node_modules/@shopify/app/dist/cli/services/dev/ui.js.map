{"version":3,"file":"ui.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/ui.tsx"],"names":[],"mappings":"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","sourcesContent":["import {PartnersURLs} from './urls.js'\nimport {Dev, DevProps} from './ui/components/Dev.js'\nimport {AppInterface, isCurrentAppSchema} from '../../models/app/app.js'\nimport {OrganizationApp} from '../../models/organization.js'\nimport {getAppConfigurationShorthand} from '../../models/app/loader.js'\nimport React from 'react'\nimport {partnersFqdn} from '@shopify/cli-kit/node/context/fqdn'\nimport {render, renderInfo} from '@shopify/cli-kit/node/ui'\nimport {basename} from '@shopify/cli-kit/node/path'\nimport {formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\nimport {terminalSupportsRawMode} from '@shopify/cli-kit/node/system'\n\nexport async function outputUpdateURLsResult(\n  updated: boolean,\n  urls: PartnersURLs,\n  remoteApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'> & {apiSecret?: string},\n  localApp: AppInterface,\n) {\n  const dashboardURL = await partnersURL(remoteApp.organizationId, remoteApp.id)\n  if (remoteApp.newApp) {\n    renderInfo({\n      headline: `For your convenience, we've given your app a default URL: ${urls.applicationUrl}.`,\n      body: [\n        \"You can update your app's URL anytime in the\",\n        dashboardURL,\n        'But once your app is live, updating its URL will disrupt user access.',\n      ],\n    })\n  } else if (!updated) {\n    if (isCurrentAppSchema(localApp.configuration)) {\n      const fileName = basename(localApp.configuration.path)\n      const configName = getAppConfigurationShorthand(fileName)\n      const pushCommandArgs = configName ? [`--config=${configName}`] : []\n\n      renderInfo({\n        body: [\n          `To update URLs manually, add the following URLs to ${fileName} under auth > redirect_urls and run\\n`,\n          {\n            command: formatPackageManagerCommand(\n              localApp.packageManager,\n              `shopify app config push`,\n              ...pushCommandArgs,\n            ),\n          },\n          '\\n\\n',\n          {list: {items: urls.redirectUrlWhitelist}},\n        ],\n      })\n    } else {\n      renderInfo({\n        body: [\n          'To make URL updates manually, you can add the following URLs as redirects in your',\n          dashboardURL,\n          {char: ':'},\n          '\\n\\n',\n          {list: {items: urls.redirectUrlWhitelist}},\n        ],\n      })\n    }\n  }\n}\n\nexport async function renderDev({\n  processes,\n  previewUrl,\n  app,\n  abortController,\n  graphiqlUrl,\n  developerPreview,\n}: DevProps) {\n  if (terminalSupportsRawMode(process.stdin)) {\n    return render(\n      <Dev\n        processes={processes}\n        abortController={abortController}\n        previewUrl={previewUrl}\n        app={app}\n        graphiqlUrl={graphiqlUrl}\n        developerPreview={developerPreview}\n      />,\n      {\n        exitOnCtrlC: false,\n      },\n    )\n  } else {\n    await renderDevNonInteractive({processes, app, abortController, developerPreview})\n  }\n}\n\nasync function partnersURL(organizationId: string, appId: string) {\n  return {\n    link: {\n      label: 'Partners Dashboard',\n      url: `https://${await partnersFqdn()}/${organizationId}/apps/${appId}/edit`,\n    },\n  }\n}\n\nasync function renderDevNonInteractive({\n  processes,\n  app: {canEnablePreviewMode},\n  abortController,\n  developerPreview,\n}: Omit<DevProps, 'previewUrl'>) {\n  if (canEnablePreviewMode) {\n    await developerPreview.enable()\n    abortController?.signal.addEventListener('abort', async () => {\n      await developerPreview.disable()\n    })\n  }\n  return Promise.all(\n    processes.map(async (concurrentProcess) => {\n      await concurrentProcess.action(process.stdout, process.stderr, abortController.signal)\n    }),\n  )\n}\n"]}