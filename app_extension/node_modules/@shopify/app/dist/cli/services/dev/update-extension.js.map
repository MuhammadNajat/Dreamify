{"version":3,"file":"update-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/update-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ExtensionUpdateDraftInput,\n  ExtensionUpdateDraftMutation,\n  ExtensionUpdateSchema,\n} from '../../api/graphql/update_draft.js'\nimport {loadConfigurationFile, parseConfigurationFile, parseConfigurationObject} from '../../models/app/loader.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {ExtensionsArraySchema, UnifiedSchema} from '../../models/extensions/schemas.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {readFile} from '@shopify/cli-kit/node/fs'\nimport {OutputMessage, outputInfo} from '@shopify/cli-kit/node/output'\nimport {relativizePath} from '@shopify/cli-kit/node/path'\nimport {Writable} from 'stream'\n\ninterface UpdateExtensionDraftOptions {\n  extension: ExtensionInstance\n  token: string\n  apiKey: string\n  registrationId: string\n  stdout: Writable\n  stderr: Writable\n}\n\nexport async function updateExtensionDraft({\n  extension,\n  token,\n  apiKey,\n  registrationId,\n  stdout,\n  stderr,\n}: UpdateExtensionDraftOptions) {\n  let encodedFile: string | undefined\n  if (extension.features.includes('esbuild')) {\n    const content = await readFile(extension.outputPath)\n    if (!content) return\n    encodedFile = Buffer.from(content).toString('base64')\n  }\n\n  const configValue = (await extension.deployConfig({apiKey, token})) || {}\n  const {handle, ...remainingConfigs} = configValue\n  const extensionInput: ExtensionUpdateDraftInput = {\n    apiKey,\n    config: JSON.stringify({\n      ...remainingConfigs,\n      serialized_script: encodedFile,\n    }),\n    handle: extension.handle,\n    context: handle as string,\n    registrationId,\n  }\n  const mutation = ExtensionUpdateDraftMutation\n\n  const mutationResult: ExtensionUpdateSchema = await partnersRequest(mutation, token, extensionInput)\n  if (mutationResult.extensionUpdateDraft?.userErrors?.length > 0) {\n    const errors = mutationResult.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n    stderr.write(`Error while updating drafts: ${errors}`)\n  } else {\n    outputInfo(`Draft updated successfully for extension: ${extension.localIdentifier}`, stdout)\n  }\n}\n\ninterface UpdateExtensionConfigOptions {\n  extension: ExtensionInstance\n  stdout: Writable\n}\n\nexport async function reloadExtensionConfig({extension, stdout}: UpdateExtensionConfigOptions) {\n  const abort = (errorMessage: OutputMessage) => {\n    stdout.write(errorMessage)\n    throw new AbortError(errorMessage)\n  }\n\n  let configObject = await loadConfigurationFile(extension.configuration.path)\n  const {extensions} = ExtensionsArraySchema.parse(configObject)\n\n  if (extensions) {\n    // If the config has an array, find our extension using the handle.\n    const configuration = await parseConfigurationFile(UnifiedSchema, extension.configuration.path, abort)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const extensionConfig = configuration.extensions.find((config: any) => config.handle === extension.handle)\n    if (!extensionConfig) {\n      abort(\n        `ERROR: Invalid handle\n  - Expected handle: \"${extension.handle}\"\n  - Configuration file path: ${relativizePath(extension.configuration.path)}.\n  - Handles are immutable, you can't change them once they are set.`,\n      )\n    }\n\n    configObject = {...configuration, ...extensionConfig}\n  }\n\n  const newConfig = await parseConfigurationObject(\n    extension.specification.schema,\n    extension.configuration.path,\n    configObject,\n    abort,\n  )\n\n  // eslint-disable-next-line require-atomic-updates\n  extension.configuration = newConfig\n}\n"]}