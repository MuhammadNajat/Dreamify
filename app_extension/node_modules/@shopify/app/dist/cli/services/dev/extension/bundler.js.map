{"version":3,"file":"bundler.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/bundler.ts"],"names":[],"mappings":"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","sourcesContent":["import {ExtensionsPayloadStore} from './payload/store.js'\nimport {ExtensionDevOptions} from '../extension.js'\nimport {bundleExtension} from '../../extensions/bundle.js'\n\nimport {AppInterface} from '../../../models/app/app.js'\nimport {reloadExtensionConfig} from '../update-extension.js'\nimport {ExtensionInstance} from '../../../models/extensions/extension-instance.js'\nimport {ExtensionBuildOptions} from '../../build/extension.js'\nimport {AbortController, AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {outputDebug, outputWarn} from '@shopify/cli-kit/node/output'\nimport {fileExists} from '@shopify/cli-kit/node/fs'\nimport {FSWatcher} from 'chokidar'\nimport micromatch from 'micromatch'\nimport {Writable} from 'stream'\n\nexport interface WatchEvent {\n  path: string\n  type: 'build' | 'localization'\n}\n\nexport interface FileWatcherOptions {\n  devOptions: ExtensionDevOptions\n  payloadStore: ExtensionsPayloadStore\n}\n\nexport interface FileWatcher {\n  close: () => void\n}\n\nexport async function setupBundlerAndFileWatcher(options: FileWatcherOptions) {\n  const {default: chokidar} = await import('chokidar')\n  const abortController = new AbortController()\n\n  const bundlers: Promise<void>[] = []\n\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  options.devOptions.extensions.forEach(async (extension) => {\n    bundlers.push(\n      bundleExtension({\n        minify: false,\n        outputPath: extension.outputPath,\n        environment: 'development',\n        env: {\n          ...(options.devOptions.appDotEnvFile?.variables ?? {}),\n          APP_URL: options.devOptions.url,\n        },\n        stdin: {\n          contents: extension.getBundleExtensionStdinContent(),\n          resolveDir: extension.directory,\n          loader: 'tsx',\n        },\n        stderr: options.devOptions.stderr,\n        stdout: options.devOptions.stdout,\n        watchSignal: abortController.signal,\n        watch: async (result) => {\n          const error = (result?.errors?.length ?? 0) > 0\n          outputDebug(\n            `The Javascript bundle of the UI extension with ID ${extension.devUUID} has ${\n              error ? 'an error' : 'changed'\n            }`,\n            error ? options.devOptions.stderr : options.devOptions.stdout,\n          )\n\n          try {\n            await options.payloadStore.updateExtension(extension, options.devOptions, {\n              status: error ? 'error' : 'success',\n            })\n            // eslint-disable-next-line no-catch-all/no-catch-all\n          } catch {\n            // ESBuild handles error output\n          }\n        },\n        sourceMaps: true,\n      }),\n    )\n\n    const localeWatcher = chokidar\n      .watch(joinPath(extension.directory, 'locales', '**.json'))\n      .on('change', (_event, path) => {\n        outputDebug(`Locale file at path ${path} changed`, options.devOptions.stdout)\n        options.payloadStore\n          .updateExtension(extension, options.devOptions)\n          .then((_closed) => {\n            outputDebug(`Notified extension ${extension.devUUID} about the locale change.`, options.devOptions.stdout)\n          })\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .catch((_: any) => {})\n      })\n\n    abortController.signal.addEventListener('abort', () => {\n      outputDebug(`Closing locale file watching for extension with ID ${extension.devUUID}`, options.devOptions.stdout)\n      localeWatcher\n        .close()\n        .then(() => {\n          outputDebug(`Locale file watching closed for extension with ${extension.devUUID}`, options.devOptions.stdout)\n        })\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .catch((error: any) => {\n          outputDebug(\n            `Locale file watching failed to close for extension with ${extension.devUUID}: ${error.message}`,\n            options.devOptions.stderr,\n          )\n        })\n    })\n  })\n\n  await Promise.all(bundlers)\n\n  return {\n    close: () => {\n      abortController.abort()\n    },\n  }\n}\n\nexport interface SetupExtensionWatcherOptions {\n  extension: ExtensionInstance\n  app: AppInterface\n  url: string\n  stdout: Writable\n  stderr: Writable\n  signal: AbortSignal\n  onChange: () => Promise<void>\n}\n\nexport async function setupExtensionWatcher({\n  extension,\n  app,\n  url,\n  stdout,\n  stderr,\n  signal,\n  onChange,\n}: SetupExtensionWatcherOptions) {\n  const {default: chokidar} = await import('chokidar')\n\n  const rebuildAndRedeployWatchPaths = extension.watchPaths\n  const redeployWatchPaths: string[] = []\n\n  if (!rebuildAndRedeployWatchPaths) {\n    outputWarn(\n      `Extension ${extension.localIdentifier} is missing the 'build.watch' setting, automatic builds are disabled.`,\n      stdout,\n    )\n    return\n  }\n\n  if (await fileExists(joinPath(extension.directory, 'locales'))) {\n    redeployWatchPaths.push(joinPath(extension.directory, 'locales', '**.json'))\n  }\n  redeployWatchPaths.push(joinPath(extension.directory, '**.toml'))\n\n  outputDebug(\n    `\nWatching extension: ${extension.localIdentifier} for:\nRebuild and Redeploy Paths:\n\\t${rebuildAndRedeployWatchPaths.join('\\n\\t')}\n\nRedeploy Paths:\n\\t${redeployWatchPaths.join('\\n\\t')}\n`.trim(),\n    stdout,\n  )\n\n  const listenForAbortOnWatcher = (watcher: FSWatcher) => {\n    signal.addEventListener('abort', () => {\n      outputDebug(`Closing file watching for extension with ID ${extension.devUUID}`, stdout)\n      watcher\n        .close()\n        .then(() => {\n          outputDebug(`File watching closed for extension with ${extension.devUUID}`, stdout)\n        })\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .catch((error: any) => {\n          outputDebug(`File watching failed to close for extension with ${extension.devUUID}: ${error.message}`, stderr)\n        })\n    })\n  }\n\n  let buildController: AbortController | null\n  const allPaths = [...rebuildAndRedeployWatchPaths, ...redeployWatchPaths]\n  const functionRebuildAndRedeployWatcher = chokidar.watch(allPaths, {ignored: '**/*.test.*'}).on('change', (path) => {\n    outputDebug(`Extension file at path ${path} changed`, stdout)\n    if (buildController) {\n      // terminate any existing builds\n      buildController.abort()\n    }\n    buildController = new AbortController()\n    const buildSignal = buildController.signal\n    const shouldBuild = micromatch.isMatch(path, rebuildAndRedeployWatchPaths)\n\n    reloadAndbuildIfNecessary(extension, shouldBuild, {\n      app,\n      stdout,\n      stderr,\n      useTasks: false,\n      signal: buildSignal,\n      environment: 'development',\n      appURL: url,\n    })\n      .then(() => {\n        if (!buildSignal.aborted) {\n          return onChange()\n        }\n      })\n      .catch((updateError: unknown) => {\n        outputWarn(`Error while deploying updated extension draft: ${JSON.stringify(updateError, null, 2)}`, stdout)\n      })\n  })\n  listenForAbortOnWatcher(functionRebuildAndRedeployWatcher)\n}\n\nexport async function reloadAndbuildIfNecessary(\n  extension: ExtensionInstance,\n  build: boolean,\n  options: ExtensionBuildOptions,\n) {\n  await reloadExtensionConfig({extension, stdout: options.stdout})\n  if (!build) return\n  return extension.build(options)\n}\n"]}