{"version":3,"file":"Dev.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/ui/components/Dev.tsx"],"names":[],"mappings":"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","sourcesContent":["import metadata from '../../../../metadata.js'\nimport {OutputProcess} from '@shopify/cli-kit/node/output'\nimport {ConcurrentOutput} from '@shopify/cli-kit/node/ui/components'\nimport {useAbortSignal} from '@shopify/cli-kit/node/ui/hooks'\nimport React, {FunctionComponent, useEffect, useMemo, useRef, useState} from 'react'\nimport {AbortController, AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {Box, Text, useInput, useStdin} from 'ink'\nimport {handleCtrlC} from '@shopify/cli-kit/node/ui'\nimport {openURL} from '@shopify/cli-kit/node/system'\nimport figures from '@shopify/cli-kit/node/figures'\nimport {isUnitTest} from '@shopify/cli-kit/node/context/local'\nimport {treeKill} from '@shopify/cli-kit/node/tree-kill'\nimport {Writable} from 'stream'\n\nexport interface DeveloperPreviewController {\n  fetchMode: () => Promise<boolean>\n  enable: () => Promise<void>\n  disable: () => Promise<void>\n  update: (state: boolean) => Promise<boolean>\n}\n\nexport interface DevProps {\n  processes: OutputProcess[]\n  abortController: AbortController\n  previewUrl: string\n  graphiqlUrl?: string\n  app: {\n    canEnablePreviewMode: boolean\n    developmentStorePreviewEnabled?: boolean\n    apiKey: string\n    token: string\n  }\n  pollingTime?: number\n  developerPreview: DeveloperPreviewController\n}\n\nconst Dev: FunctionComponent<DevProps> = ({\n  abortController,\n  processes,\n  previewUrl,\n  graphiqlUrl,\n  app,\n  pollingTime = 5000,\n  developerPreview,\n}) => {\n  const {canEnablePreviewMode, developmentStorePreviewEnabled} = app\n  const {isRawModeSupported: canUseShortcuts} = useStdin()\n  const pollingInterval = useRef<NodeJS.Timeout>()\n  const defaultStatusMessage = `Preview URL: ${previewUrl}${graphiqlUrl ? `\\nGraphiQL URL: ${graphiqlUrl}` : ''}`\n  const [statusMessage, setStatusMessage] = useState(defaultStatusMessage)\n\n  const {isAborted} = useAbortSignal(abortController.signal, async (err) => {\n    if (err) {\n      setStatusMessage('Shutting down dev because of an error ...')\n    } else {\n      setStatusMessage('Shutting down dev ...')\n      setTimeout(() => {\n        if (isUnitTest()) return\n        treeKill(process.pid, 'SIGINT', false, () => {\n          process.exit(0)\n        })\n      }, 2000)\n    }\n    clearInterval(pollingInterval.current)\n    await developerPreview.disable()\n  })\n\n  const [devPreviewEnabled, setDevPreviewEnabled] = useState<boolean>(true)\n  const [error, setError] = useState<string | undefined>(undefined)\n\n  const errorHandledProcesses = useMemo(() => {\n    return processes.map((process) => {\n      return {\n        ...process,\n        action: async (stdout: Writable, stderr: Writable, signal: AbortSignal) => {\n          try {\n            return await process.action(stdout, stderr, signal)\n            // eslint-disable-next-line no-catch-all/no-catch-all\n          } catch (error) {\n            abortController.abort(error)\n          }\n        },\n      }\n    })\n  }, [processes, abortController])\n\n  useEffect(() => {\n    const pollDevPreviewMode = async () => {\n      try {\n        const enabled = await developerPreview.fetchMode()\n        setDevPreviewEnabled(enabled ?? false)\n        setError('')\n        // eslint-disable-next-line no-catch-all/no-catch-all\n      } catch (_) {\n        setError('Failed to fetch the latest status of the development store preview, trying again in 5 seconds.')\n      }\n    }\n\n    const enablePreviewMode = async () => {\n      // Enable dev preview on app dev start\n      try {\n        await developerPreview.enable()\n        setError('')\n        // eslint-disable-next-line no-catch-all/no-catch-all\n      } catch (_) {\n        setError(\n          'Failed to turn on development store preview automatically.\\nTry turning it on manually by pressing `d`.',\n        )\n        setDevPreviewEnabled(Boolean(developmentStorePreviewEnabled))\n      }\n    }\n\n    if (canEnablePreviewMode) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      enablePreviewMode()\n\n      const startPolling = () => {\n        return setInterval(\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          () => pollDevPreviewMode(),\n          pollingTime,\n        )\n      }\n\n      pollingInterval.current = startPolling()\n    }\n\n    return () => {\n      clearInterval(pollingInterval.current)\n    }\n  }, [canEnablePreviewMode])\n\n  useInput(\n    (input, key) => {\n      handleCtrlC(input, key, () => abortController.abort())\n\n      const onInput = async () => {\n        try {\n          setError('')\n\n          if (input === 'p' && previewUrl) {\n            await metadata.addPublicMetadata(() => ({\n              cmd_dev_preview_url_opened: true,\n            }))\n            await openURL(previewUrl)\n          } else if (input === 'g' && graphiqlUrl) {\n            await metadata.addPublicMetadata(() => ({\n              cmd_dev_graphiql_opened: true,\n            }))\n            await openURL(graphiqlUrl)\n          } else if (input === 'q') {\n            abortController.abort()\n          } else if (input === 'd' && canEnablePreviewMode) {\n            await metadata.addPublicMetadata(() => ({\n              cmd_dev_dev_preview_toggle_used: true,\n            }))\n            const newDevPreviewEnabled = !devPreviewEnabled\n            setDevPreviewEnabled(newDevPreviewEnabled)\n            try {\n              const developerPreviewUpdateSucceded = await developerPreview.update(newDevPreviewEnabled)\n              if (!developerPreviewUpdateSucceded) {\n                throw new Error(`Failed to turn ${newDevPreviewEnabled ? 'on' : 'off'} development store preview.`)\n              }\n              // eslint-disable-next-line no-catch-all/no-catch-all\n            } catch (_) {\n              setDevPreviewEnabled(devPreviewEnabled)\n              setError(`Failed to turn ${newDevPreviewEnabled ? 'on' : 'off'} development store preview.`)\n            }\n          }\n          // eslint-disable-next-line no-catch-all/no-catch-all\n        } catch (_) {\n          setError('Failed to handle your input.')\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      onInput()\n    },\n    {isActive: Boolean(canUseShortcuts)},\n  )\n\n  return (\n    <>\n      <ConcurrentOutput\n        processes={errorHandledProcesses}\n        abortSignal={abortController.signal}\n        keepRunningAfterProcessesResolve={true}\n      />\n      {/* eslint-disable-next-line no-negated-condition */}\n      {!isAborted ? (\n        <Box\n          marginY={1}\n          paddingTop={1}\n          flexDirection=\"column\"\n          flexGrow={1}\n          borderStyle=\"single\"\n          borderBottom={false}\n          borderLeft={false}\n          borderRight={false}\n          borderTop\n        >\n          {canUseShortcuts ? (\n            <Box flexDirection=\"column\">\n              {canEnablePreviewMode ? (\n                <Text>\n                  {figures.pointerSmall} Press <Text bold>d</Text> {figures.lineVertical} toggle development store\n                  preview: {}\n                  {devPreviewEnabled ? <Text color=\"green\">✔ on</Text> : <Text color=\"red\">✖ off</Text>}\n                </Text>\n              ) : null}\n              {graphiqlUrl ? (\n                <Text>\n                  {figures.pointerSmall} Press <Text bold>g</Text> {figures.lineVertical} open the GraphiQL Explorer in\n                  your browser\n                </Text>\n              ) : null}\n              <Text>\n                {figures.pointerSmall} Press <Text bold>p</Text> {figures.lineVertical} preview in your browser\n              </Text>\n              <Text>\n                {figures.pointerSmall} Press <Text bold>q</Text> {figures.lineVertical} quit\n              </Text>\n            </Box>\n          ) : null}\n          <Box marginTop={canUseShortcuts ? 1 : 0}>\n            <Text>{statusMessage}</Text>\n          </Box>\n          {error ? <Text color=\"red\">{error}</Text> : null}\n        </Box>\n      ) : null}\n    </>\n  )\n}\n\nexport {Dev}\n"]}