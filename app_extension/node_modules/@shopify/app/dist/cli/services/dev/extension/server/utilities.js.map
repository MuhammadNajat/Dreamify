{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/extension/server/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import {ExtensionInstance} from '../../../../models/extensions/extension-instance.js'\nimport {getUIExtensionResourceURL} from '../../../../utilities/extensions/configuration.js'\nimport {ExtensionDevOptions} from '../../extension.js'\nimport {getExtensionPointTargetSurface} from '../utilities.js'\nimport {createError, H3Error, ServerResponse, sendError as h3SendError} from 'h3'\nimport {isSpinEnvironment} from '@shopify/cli-kit/node/context/spin'\n\nexport function getRedirectUrl(extension: ExtensionInstance, options: ExtensionDevOptions): string {\n  const {url: resourceUrl} = getUIExtensionResourceURL(extension.configuration.type, options)\n\n  if (extension.surface === 'checkout' && resourceUrl) {\n    const rawUrl = new URL(`https://${options.storeFqdn}/`)\n    rawUrl.pathname = resourceUrl\n    rawUrl.searchParams.append('dev', `${options.url}/extensions`)\n\n    return rawUrl.toString()\n  } else if (extension.surface === 'customer_accounts') {\n    const rawUrl = getCustomerAccountsRedirectUrl(extension, options)\n    return rawUrl.toString()\n  } else {\n    const rawUrl = new URL(`https://${options.storeFqdn}/`)\n    rawUrl.pathname = 'admin/extensions-dev'\n    rawUrl.searchParams.append('url', getExtensionUrl(extension, options))\n\n    return rawUrl.toString()\n  }\n}\n\nexport function getExtensionPointRedirectUrl(\n  requestedTarget: string,\n  extension: ExtensionInstance,\n  options: ExtensionDevOptions,\n): string | undefined {\n  const surface = getExtensionPointTargetSurface(requestedTarget)\n  let rawUrl = new URL(`https://${options.storeFqdn}/`)\n\n  switch (surface) {\n    case 'checkout':\n      // This can never be null because we always generate it\n      // whenever there is an extension point targeting Checkout\n      rawUrl.pathname = options.checkoutCartUrl!\n      rawUrl.searchParams.append('dev', `${options.url}/extensions`)\n      break\n    case 'admin':\n      rawUrl.pathname = 'admin/extensions-dev'\n      rawUrl.searchParams.append('url', getExtensionUrl(extension, options))\n      rawUrl.searchParams.append('target', requestedTarget)\n      break\n    case 'customer-accounts':\n      rawUrl = getCustomerAccountsRedirectUrl(extension, options, requestedTarget)\n      break\n    default:\n      return undefined\n  }\n\n  return rawUrl.toString()\n}\n\nfunction getCustomerAccountsRedirectUrl(\n  extension: ExtensionInstance,\n  options: ExtensionDevOptions,\n  requestedTarget = '',\n): URL {\n  const origin = `${options.url}/extensions`\n  const storeId = options.storeId\n  const [_, ...storeDomainParts] = options.storeFqdn.split('.')\n  const customerAccountHost = isSpinEnvironment() ? storeDomainParts.join('.') : 'shopify.com'\n  const rawUrl = new URL(`https://${customerAccountHost}/${storeId}/account/extensions-development`)\n\n  rawUrl.searchParams.append('origin', origin)\n  rawUrl.searchParams.append('extensionId', extension.devUUID)\n  rawUrl.searchParams.append('source', 'CUSTOMER_ACCOUNT_EXTENSION')\n  if (requestedTarget !== '') {\n    rawUrl.searchParams.append('target', requestedTarget)\n  }\n  return rawUrl\n}\n\nexport function getExtensionUrl(extension: ExtensionInstance, options: ExtensionDevOptions): string {\n  const extensionUrl = new URL(options.url)\n  extensionUrl.pathname = `/extensions/${extension.devUUID}`\n  return extensionUrl.toString()\n}\n\nexport function sendError(response: ServerResponse, error: Partial<H3Error>) {\n  h3SendError(response.event, createError(error))\n}\n"]}