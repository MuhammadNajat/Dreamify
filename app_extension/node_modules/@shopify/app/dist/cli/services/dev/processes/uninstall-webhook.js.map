{"version":3,"file":"uninstall-webhook.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/processes/uninstall-webhook.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,qBAAqB,EAAC,MAAM,YAAY,CAAA;AAChD,OAAO,EAAC,+BAA+B,EAAC,MAAM,+CAA+C,CAAA;AAe7F,MAAM,CAAC,MAAM,WAAW,GAA2C,KAAK,EAAE,EAAC,MAAM,EAAC,EAAE,OAAO,EAAE,EAAE;IAC7F,MAAM,+BAA+B,CAAC;QACpC,MAAM;QACN,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,OAAO,EAAE,oBAAoB,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,EAAE;QAC1E,YAAY,EAAE,OAAO,CAAC,SAAS;QAC/B,SAAS,EAAE,OAAO,CAAC,SAAS;KAC7B,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM,UAAU,gCAAgC,CAAC,EAC/C,IAAI,EACJ,gBAAgB,EAChB,WAAW,EACX,YAAY,EACZ,GAAG,OAAO,EAMX;IACC,MAAM,EAAC,aAAa,EAAE,cAAc,EAAC,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAA;IACnE,MAAM,YAAY,GAChB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAC,aAAa,EAAC,EAAE,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,eAAe,CAAA;IACpG,MAAM,oBAAoB,GAAG,OAAO,CAAC,YAAY,CAAC,IAAI,gBAAgB,IAAI,OAAO,CAAC,cAAc,IAAI,aAAa,CAAC,CAAA;IAClH,IAAI,CAAC,oBAAoB,EAAE;QACzB,OAAM;KACP;IACD,OAAO;QACL,IAAI,EAAE,cAAc;QACpB,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,WAAW;QACrB,OAAO,EAAE;YACP,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY;YACxD,YAAY;YACZ,GAAG,OAAO;SACX;KACF,CAAA;AACH,CAAC","sourcesContent":["import {BaseProcess, DevProcessFunction} from './types.js'\nimport {frontAndBackendConfig} from './utils.js'\nimport {sendUninstallWebhookToAppServer} from '../../webhook/send-app-uninstalled-webhook.js'\nimport {Web} from '../../../models/app/app.js'\n\nexport interface SendWebhookOptions {\n  deliveryPort: number\n  token: string\n  storeFqdn: string\n  apiSecret: string\n  webhooksPath: string\n}\n\nexport interface SendWebhookProcess extends BaseProcess<SendWebhookOptions> {\n  type: 'send-webhook'\n}\n\nexport const sendWebhook: DevProcessFunction<SendWebhookOptions> = async ({stdout}, options) => {\n  await sendUninstallWebhookToAppServer({\n    stdout,\n    token: options.token,\n    address: `http://localhost:${options.deliveryPort}${options.webhooksPath}`,\n    sharedSecret: options.apiSecret,\n    storeFqdn: options.storeFqdn,\n  })\n}\n\nexport function setupSendUninstallWebhookProcess({\n  webs,\n  remoteAppUpdated,\n  backendPort,\n  frontendPort,\n  ...options\n}: Pick<SendWebhookOptions, 'token' | 'storeFqdn' | 'apiSecret'> & {\n  remoteAppUpdated: boolean\n  backendPort: number\n  frontendPort: number\n  webs: Web[]\n}): SendWebhookProcess | undefined {\n  const {backendConfig, frontendConfig} = frontAndBackendConfig(webs)\n  const webhooksPath =\n    webs.map(({configuration}) => configuration.webhooks_path).find((path) => path) || '/api/webhooks'\n  const sendUninstallWebhook = Boolean(webhooksPath) && remoteAppUpdated && Boolean(frontendConfig || backendConfig)\n  if (!sendUninstallWebhook) {\n    return\n  }\n  return {\n    type: 'send-webhook',\n    prefix: 'webhooks',\n    function: sendWebhook,\n    options: {\n      deliveryPort: backendConfig ? backendPort : frontendPort,\n      webhooksPath,\n      ...options,\n    },\n  }\n}\n"]}