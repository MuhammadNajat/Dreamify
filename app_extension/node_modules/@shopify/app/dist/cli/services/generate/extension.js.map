{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {versions} from '../../constants.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {buildGraphqlTypes} from '../function/build.js'\nimport {GenerateExtensionContentOutput} from '../../prompts/generate/extension.js'\nimport {ExtensionFlavor, ExtensionTemplate} from '../../models/app/template.js'\nimport {\n  ensureDownloadedExtensionFlavorExists,\n  ensureExtensionDirectoryExists,\n  ensureLocalExtensionFlavorExists,\n} from '../extensions/common.js'\nimport {\n  addNPMDependenciesIfNeeded,\n  addResolutionOrOverride,\n  DependencyVersion,\n  installNodeModules,\n  readAndParsePackageJson,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {recursiveLiquidTemplateCopy} from '@shopify/cli-kit/node/liquid'\nimport {renderTasks} from '@shopify/cli-kit/node/ui'\nimport {downloadGitRepository} from '@shopify/cli-kit/node/git'\nimport {fileExists, inTemporaryDirectory, mkdir, moveFile, removeFile, glob} from '@shopify/cli-kit/node/fs'\nimport {joinPath, relativizePath} from '@shopify/cli-kit/node/path'\nimport {slugify} from '@shopify/cli-kit/common/string'\n\nexport interface GenerateExtensionTemplateOptions {\n  app: AppInterface\n  cloneUrl?: string\n  extensionChoices: GenerateExtensionContentOutput[]\n  extensionTemplate: ExtensionTemplate\n}\n\nexport type ExtensionFlavorValue =\n  | 'vanilla-js'\n  | 'react'\n  | 'typescript'\n  | 'typescript-react'\n  | 'rust'\n  | 'wasm'\n  | 'liquid'\n  | 'config-only'\n\nexport type TemplateLanguage = 'javascript' | 'rust' | 'wasm' | undefined\nfunction getTemplateLanguage(flavor: ExtensionFlavorValue | undefined): TemplateLanguage {\n  switch (flavor) {\n    case 'vanilla-js':\n    case 'react':\n    case 'typescript':\n    case 'typescript-react':\n      return 'javascript'\n    case 'rust':\n    case 'wasm':\n      return flavor\n    default:\n      return undefined\n  }\n}\n\nexport interface GeneratedExtension {\n  directory: string\n  extensionTemplate: ExtensionTemplate\n}\n\ninterface ExtensionInitOptions {\n  directory: string\n  url: string\n  app: AppInterface\n  type: string\n  name: string\n  extensionFlavor: ExtensionFlavor | undefined\n}\n\nexport async function generateExtensionTemplate(\n  options: GenerateExtensionTemplateOptions,\n): Promise<GeneratedExtension[]> {\n  return Promise.all(\n    options.extensionTemplate.types.flatMap(async (spec, index) => {\n      const extensionName: string = options.extensionChoices[index]!.name\n      const extensionFlavorValue = options.extensionChoices[index]?.flavor\n      const extensionFlavor = spec.supportedFlavors.find((flavor) => flavor.value === extensionFlavorValue)\n      const directory = await ensureExtensionDirectoryExists({app: options.app, name: extensionName})\n      const url = options.cloneUrl || spec.url\n      const initOptions: ExtensionInitOptions = {\n        directory,\n        url,\n        app: options.app,\n        type: spec.type,\n        name: extensionName,\n        extensionFlavor,\n      }\n      await extensionInit(initOptions)\n      return {directory: relativizePath(directory), extensionTemplate: options.extensionTemplate}\n    }),\n  )\n}\n\nasync function extensionInit(options: ExtensionInitOptions) {\n  try {\n    switch (options.type) {\n      case 'theme':\n        await themeExtensionInit(options)\n        break\n      case 'function':\n        await functionExtensionInit(options)\n        break\n      default:\n        await uiExtensionInit(options)\n        break\n    }\n  } catch (error) {\n    await removeFile(options.directory)\n    throw error\n  }\n}\n\nasync function themeExtensionInit({directory, url, type, name, extensionFlavor}: ExtensionInitOptions) {\n  return inTemporaryDirectory(async (tmpDir) => {\n    const templateDirectory = await downloadOrFindTemplateDirectory(url, extensionFlavor, tmpDir)\n    await recursiveLiquidTemplateCopy(templateDirectory, directory, {name, type})\n  })\n}\n\nasync function functionExtensionInit({directory, url, app, name, extensionFlavor}: ExtensionInitOptions) {\n  const templateLanguage = getTemplateLanguage(extensionFlavor?.value)\n  const taskList = []\n\n  taskList.push({\n    title: `Generating function extension`,\n    task: async () => {\n      await inTemporaryDirectory(async (tmpDir) => {\n        const templateDirectory = await downloadOrFindTemplateDirectory(url, extensionFlavor, tmpDir)\n        await recursiveLiquidTemplateCopy(templateDirectory, directory, {\n          name,\n          handle: slugify(name),\n          flavor: extensionFlavor?.value,\n        })\n      })\n\n      if (templateLanguage === 'javascript') {\n        const srcFileExtension = getSrcFileExtension(extensionFlavor?.value || 'rust')\n        await changeIndexFileExtension(directory, srcFileExtension, '!(*.graphql)')\n      }\n    },\n  })\n\n  if (templateLanguage === 'javascript') {\n    taskList.push({\n      title: 'Installing additional dependencies',\n      task: async () => {\n        // We need to run `npm install` once to setup the workspace correctly\n        if (app.usesWorkspaces && app.packageManager === 'npm') {\n          await installNodeModules({packageManager: 'npm', directory: app.directory})\n        }\n\n        const requiredDependencies = getFunctionRuntimeDependencies(templateLanguage)\n        await addNPMDependenciesIfNeeded(requiredDependencies, {\n          packageManager: app.packageManager,\n          type: 'prod',\n          directory: app.usesWorkspaces ? directory : app.directory,\n        })\n      },\n    })\n  }\n\n  if (templateLanguage === 'javascript') {\n    taskList.push({\n      title: `Building GraphQL types`,\n      task: async () => {\n        await buildGraphqlTypes({directory, isJavaScript: true}, {stdout: process.stdout, stderr: process.stderr, app})\n      },\n    })\n  }\n\n  await renderTasks(taskList)\n}\n\nasync function uiExtensionInit({directory, url, app, name, extensionFlavor}: ExtensionInitOptions) {\n  const templateLanguage = getTemplateLanguage(extensionFlavor?.value)\n\n  const tasks = [\n    {\n      title: `Generating extension`,\n      task: async () => {\n        const srcFileExtension = getSrcFileExtension(extensionFlavor?.value ?? 'vanilla-js')\n\n        await inTemporaryDirectory(async (tmpDir) => {\n          const templateDirectory = await downloadOrFindTemplateDirectory(url, extensionFlavor, tmpDir)\n          await recursiveLiquidTemplateCopy(templateDirectory, directory, {\n            srcFileExtension,\n            name,\n            handle: slugify(name),\n            flavor: extensionFlavor?.value ?? '',\n          })\n        })\n\n        if (templateLanguage === 'javascript') {\n          await changeIndexFileExtension(directory, srcFileExtension)\n          await removeUnwantedTemplateFilesPerFlavor(directory, extensionFlavor!.value)\n        }\n      },\n    },\n    {\n      title: 'Installing dependencies',\n      task: async () => {\n        const packageManager = app.packageManager\n        if (app.usesWorkspaces) {\n          // Only install dependencies if the extension is javascript\n          if (getTemplateLanguage(extensionFlavor?.value) === 'javascript') {\n            await installNodeModules({\n              packageManager,\n              directory: app.directory,\n            })\n          }\n        } else {\n          await addResolutionOrOverrideIfNeeded(app.directory, extensionFlavor?.value)\n          const extensionPackageJsonPath = joinPath(directory, 'package.json')\n          const requiredDependencies = await getProdDependencies(extensionPackageJsonPath)\n          await addNPMDependenciesIfNeeded(requiredDependencies, {\n            packageManager,\n            type: 'prod',\n            directory: app.directory,\n          })\n          await removeFile(extensionPackageJsonPath)\n        }\n      },\n    },\n  ]\n  await renderTasks(tasks)\n}\n\ntype SrcFileExtension = 'ts' | 'tsx' | 'js' | 'jsx' | 'rs' | 'wasm' | 'liquid' | ''\nfunction getSrcFileExtension(extensionFlavor: ExtensionFlavorValue): SrcFileExtension {\n  const flavorToSrcFileExtension: {[key in ExtensionFlavorValue]: SrcFileExtension} = {\n    'vanilla-js': 'js',\n    react: 'jsx',\n    typescript: 'ts',\n    'typescript-react': 'tsx',\n    rust: 'rs',\n    wasm: 'wasm',\n    liquid: 'liquid',\n    'config-only': '',\n  }\n\n  return flavorToSrcFileExtension[extensionFlavor] ?? 'js'\n}\n\nexport function getFunctionRuntimeDependencies(templateLanguage: string): DependencyVersion[] {\n  const dependencies: DependencyVersion[] = []\n  if (templateLanguage === 'javascript') {\n    dependencies.push({name: '@shopify/shopify_function', version: '0.1.0'}, {name: 'javy', version: '0.1.1'})\n  }\n  return dependencies\n}\n\nasync function changeIndexFileExtension(extensionDirectory: string, fileExtension: SrcFileExtension, renameGlob = '*') {\n  const srcFilePaths = await glob(joinPath(extensionDirectory, 'src', renameGlob))\n  const srcFileExensionsToChange = []\n\n  for (const srcFilePath of srcFilePaths) {\n    srcFileExensionsToChange.push(moveFile(srcFilePath, `${srcFilePath}.${fileExtension}`))\n  }\n\n  await Promise.all(srcFileExensionsToChange)\n}\n\nasync function removeUnwantedTemplateFilesPerFlavor(extensionDirectory: string, extensionFlavor: ExtensionFlavorValue) {\n  // tsconfig.json file is only needed in extension folder to inform the IDE\n  // About the `react-jsx` tsconfig option, so IDE don't complain about missing react import\n  if (extensionFlavor !== 'typescript-react') {\n    await removeFile(joinPath(extensionDirectory, 'tsconfig.json'))\n  }\n}\n\nasync function addResolutionOrOverrideIfNeeded(directory: string, extensionFlavor: ExtensionFlavorValue | undefined) {\n  if (extensionFlavor === 'typescript-react') {\n    await addResolutionOrOverride(directory, {'@types/react': versions.reactTypes})\n  }\n}\n\nasync function getProdDependencies(packageJsonPath: string): Promise<DependencyVersion[]> {\n  if (!(await fileExists(packageJsonPath))) return []\n\n  const packageJsonContent = await readAndParsePackageJson(packageJsonPath)\n  return Object.entries(packageJsonContent?.dependencies ?? {}).map(([name, version]) => ({name, version}))\n}\n\nasync function downloadOrFindTemplateDirectory(\n  url: string,\n  extensionFlavor: ExtensionFlavor | undefined,\n  tmpDir: string,\n) {\n  if (url === 'https://github.com/Shopify/cli') {\n    return ensureLocalExtensionFlavorExists(extensionFlavor)\n  } else {\n    const templateDownloadDir = joinPath(tmpDir, 'download')\n    await mkdir(templateDownloadDir)\n    await downloadGitRepository({\n      repoUrl: url,\n      destination: templateDownloadDir,\n      shallow: true,\n    })\n    return ensureDownloadedExtensionFlavorExists(extensionFlavor, templateDownloadDir)\n  }\n}\n"]}