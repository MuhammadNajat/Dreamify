{"version":3,"file":"fetch-template-specifications.js","sourceRoot":"","sources":["../../../../src/cli/services/generate/fetch-template-specifications.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iCAAiC,GAElC,MAAM,8CAA8C,CAAA;AAErD,OAAO,cAAc,MAAM,sDAAsD,CAAA;AACjF,OAAO,8BAA8B,MAAM,kEAAkE,CAAA;AAC7G,OAAO,mBAAmB,MAAM,iEAAiE,CAAA;AACjG,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAElE,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,KAAa,EACb,MAAc,EACd,uBAAiC;IAEjC,MAAM,eAAe,GAA4C,MAAM,eAAe,CACpF,iCAAiC,EACjC,KAAK,EACL,EAAC,MAAM,EAAC,CACT,CAAA;IACD,MAAM,SAAS,GAAG,eAAe,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;IAC/F,qFAAqF;IACrF,MAAM,cAAc,GAAG,uBAAuB,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAA;IAC/G,MAAM,YAAY,GAAG,eAAe,CAAC,sBAAsB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;IAClF,OAAO,YAAY,CAAC,MAAM,CACxB,CAAC,QAAQ,EAAE,EAAE,CACX,uBAAuB,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;QACrD,uBAAuB,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE,CAAC,IAAI,CAAC,CAC5D,CAAA;AACH,CAAC;AAED,MAAM,UAAU,uBAAuB;IACrC,OAAO,CAAC,cAAc,EAAE,8BAA8B,EAAE,mBAAmB,CAAC,CAAA;AAC9E,CAAC","sourcesContent":["import {\n  RemoteTemplateSpecificationsQuery,\n  RemoteTemplateSpecificationsQuerySchema,\n} from '../../api/graphql/template_specifications.js'\nimport {ExtensionTemplate} from '../../models/app/template.js'\nimport themeExtension from '../../models/templates/theme-specifications/theme.js'\nimport productSubscriptionUIExtension from '../../models/templates/ui-specifications/product_subscription.js'\nimport webPixelUIExtension from '../../models/templates/ui-specifications/web_pixel_extension.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\n\nexport async function fetchExtensionTemplates(\n  token: string,\n  apiKey: string,\n  availableSpecifications: string[],\n): Promise<ExtensionTemplate[]> {\n  const remoteTemplates: RemoteTemplateSpecificationsQuerySchema = await partnersRequest(\n    RemoteTemplateSpecificationsQuery,\n    token,\n    {apiKey},\n  )\n  const remoteIDs = remoteTemplates.templateSpecifications.map((template) => template.identifier)\n  // Filter out local templates that are already available remotely to avoid duplicates\n  const lcoalTemplates = localExtensionTemplates().filter((template) => !remoteIDs.includes(template.identifier))\n  const allTemplates = remoteTemplates.templateSpecifications.concat(lcoalTemplates)\n  return allTemplates.filter(\n    (template) =>\n      availableSpecifications.includes(template.identifier) ||\n      availableSpecifications.includes(template.types[0]!.type),\n  )\n}\n\nexport function localExtensionTemplates(): ExtensionTemplate[] {\n  return [themeExtension, productSubscriptionUIExtension, webPixelUIExtension]\n}\n"]}