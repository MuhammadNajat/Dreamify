{"version":3,"file":"fetch-extension-specifications.js","sourceRoot":"","sources":["../../../../src/cli/services/generate/fetch-extension-specifications.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iCAAiC,EAAC,MAAM,gDAAgD,CAAA;AAChG,OAAO,EACL,4BAA4B,GAG7B,MAAM,+CAA+C,CAAA;AAGtD,OAAO,EAAC,0BAA0B,EAAC,MAAM,+BAA+B,CAAA;AAExE,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAOlE;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,EACxC,KAAK,EACL,MAAM,EACN,MAAM,GACqB;IAC3B,MAAM,MAAM,GAAuC,MAAM,eAAe,CAAC,4BAA4B,EAAE,KAAK,EAAE;QAC5G,OAAO,EAAE,MAAM;KAChB,CAAC,CAAA;IAEF,MAAM,uBAAuB,GAAmC,MAAM,CAAC,uBAAuB;SAC3F,MAAM,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,oBAAoB,KAAK,KAAK,CAAC;SAC/E,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACZ,MAAM,OAAO,GAAG,IAAoC,CAAA;QACpD,gGAAgG;QAChG,gGAAgG;QAChG,IAAI,IAAI,CAAC,UAAU,KAAK,qBAAqB;YAAE,IAAI,CAAC,UAAU,GAAG,OAAO,CAAA;QACxE,IAAI,IAAI,CAAC,UAAU,KAAK,yBAAyB;YAAE,IAAI,CAAC,UAAU,GAAG,sBAAsB,CAAA;QAC3F,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAA;QAC1D,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAA;QAE9C,wFAAwF;QACxF,IAAI,IAAI,CAAC,UAAU,KAAK,wBAAwB;YAAE,OAAO,CAAC,OAAO,GAAG,eAAe,CAAA;QAEnF,OAAO,OAAO,CAAA;IAChB,CAAC,CAAC,CAAA;IAEJ,MAAM,KAAK,GAAG,MAAM,iCAAiC,CAAC,MAAM,CAAC,CAAA;IAC7D,MAAM,YAAY,GAAG,wBAAwB,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAA;IAC7E,OAAO,CAAC,GAAG,YAAY,CAAC,CAAA;AAC1B,CAAC;AAED,SAAS,wBAAwB,CAC/B,KAA+B,EAC/B,MAAsC;IAEtC,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACjC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,CAAA;QACjF,IAAI,UAAU;YAAE,OAAO,EAAC,GAAG,IAAI,EAAE,GAAG,UAAU,EAA2B,CAAA;QACzE,OAAO,SAAS,CAAA;IAClB,CAAC,CAAC,CAAA;IAEF,OAAO,0BAA0B,CAAyB,OAAO,CAAC,CAAA;AACpE,CAAC","sourcesContent":["import {loadLocalExtensionsSpecifications} from '../../models/extensions/load-specifications.js'\nimport {\n  ExtensionSpecificationsQuery,\n  ExtensionSpecificationsQuerySchema,\n  FlattenedRemoteSpecification,\n} from '../../api/graphql/extension_specifications.js'\n\nimport {ExtensionSpecification} from '../../models/extensions/specification.js'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {Config} from '@oclif/core'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\n\nexport interface FetchSpecificationsOptions {\n  token: string\n  apiKey: string\n  config: Config\n}\n/**\n * Returns all extension specifications the user has access to.\n * This includes:\n * - UI extensions\n * - Theme extensions\n *\n * Will return a merge of the local and remote specifications (remote values override local ones)\n * Will only return the specifications that are also defined locally\n *\n * @param token - Token to access partners API\n * @returns List of extension specifications\n */\nexport async function fetchSpecifications({\n  token,\n  apiKey,\n  config,\n}: FetchSpecificationsOptions): Promise<ExtensionSpecification[]> {\n  const result: ExtensionSpecificationsQuerySchema = await partnersRequest(ExtensionSpecificationsQuery, token, {\n    api_key: apiKey,\n  })\n\n  const extensionSpecifications: FlattenedRemoteSpecification[] = result.extensionSpecifications\n    .filter((specification) => specification.options.managementExperience === 'cli')\n    .map((spec) => {\n      const newSpec = spec as FlattenedRemoteSpecification\n      // WORKAROUND: The identifiers in the API are different for these extensions to the ones the CLI\n      // has been using so far. This is a workaround to keep the CLI working until the API is updated.\n      if (spec.identifier === 'theme_app_extension') spec.identifier = 'theme'\n      if (spec.identifier === 'subscription_management') spec.identifier = 'product_subscription'\n      newSpec.registrationLimit = spec.options.registrationLimit\n      newSpec.surface = spec.features?.argo?.surface\n\n      // Hardcoded value for the post purchase extension because the value is wrong in the API\n      if (spec.identifier === 'checkout_post_purchase') newSpec.surface = 'post_purchase'\n\n      return newSpec\n    })\n\n  const local = await loadLocalExtensionsSpecifications(config)\n  const updatedSpecs = mergeLocalAndRemoteSpecs(local, extensionSpecifications)\n  return [...updatedSpecs]\n}\n\nfunction mergeLocalAndRemoteSpecs(\n  local: ExtensionSpecification[],\n  remote: FlattenedRemoteSpecification[],\n): ExtensionSpecification[] {\n  const updated = local.map((spec) => {\n    const remoteSpec = remote.find((remote) => remote.identifier === spec.identifier)\n    if (remoteSpec) return {...spec, ...remoteSpec} as ExtensionSpecification\n    return undefined\n  })\n\n  return getArrayRejectingUndefined<ExtensionSpecification>(updated)\n}\n"]}