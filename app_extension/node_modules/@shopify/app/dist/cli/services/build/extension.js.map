{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/services/build/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {bundleExtension} from '../extensions/bundle.js'\nimport {buildJSFunction} from '../function/build.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {FunctionConfigType} from '../../models/extensions/specifications/function.js'\nimport {execThemeCheckCLI} from '@shopify/cli-kit/node/ruby'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {AbortSignal} from '@shopify/cli-kit/node/abort'\nimport {AbortSilentError} from '@shopify/cli-kit/node/error'\nimport {Writable} from 'stream'\n\nexport interface ExtensionBuildOptions {\n  /**\n   * Standard output stream to send the output through.\n   */\n  stdout: Writable\n  /**\n   * Standard error stream to send the error output through.\n   */\n  stderr: Writable\n\n  /**\n   * Signal to abort the build process.\n   */\n  signal?: AbortSignal\n\n  /**\n   * Overrides the default build directory.\n   */\n  buildDirectory?: string\n\n  /**\n   * Use tasks to build the extension.\n   */\n  useTasks?: boolean\n\n  /**\n   * The app that contains the extensions.\n   */\n  app: AppInterface\n\n  /**\n   * The environment to build the extension.\n   * Default value: production\n   */\n  environment: 'production' | 'development'\n\n  /**\n   * The URL where the app is running.\n   */\n  appURL?: string\n}\n\n/**\n * It builds the theme extensions.\n * @param options - Build options.\n */\nexport async function buildThemeExtension(extension: ExtensionInstance, options: ExtensionBuildOptions): Promise<void> {\n  options.stdout.write(`Running theme check on your Theme app extension...`)\n  await execThemeCheckCLI({\n    directories: [extension.directory],\n    args: ['-C', ':theme_app_extension'],\n    stdout: options.stdout,\n    stderr: options.stderr,\n  })\n}\n\n/**\n * It builds the UI extensions.\n * @param options - Build options.\n */\nexport async function buildUIExtension(extension: ExtensionInstance, options: ExtensionBuildOptions): Promise<void> {\n  options.stdout.write(`Bundling UI extension ${extension.localIdentifier}...`)\n  const env = options.app.dotenv?.variables ?? {}\n  if (options.appURL) {\n    env.APP_URL = options.appURL\n  }\n\n  await bundleExtension({\n    minify: true,\n    outputPath: extension.outputPath,\n    stdin: {\n      contents: extension.getBundleExtensionStdinContent(),\n      resolveDir: extension.directory,\n      loader: 'tsx',\n    },\n    environment: options.environment,\n    env,\n    stderr: options.stderr,\n    stdout: options.stdout,\n  })\n\n  await extension.buildValidation()\n\n  options.stdout.write(`${extension.localIdentifier} successfully built`)\n}\n\nexport interface BuildFunctionExtensionOptions extends ExtensionBuildOptions {}\n\n/**\n * Builds a function extension\n * @param extension - The function extension to build.\n * @param options - Options to configure the build of the extension.\n */\nexport async function buildFunctionExtension(\n  extension: ExtensionInstance,\n  options: BuildFunctionExtensionOptions,\n): Promise<void> {\n  if (extension.isJavaScript) {\n    return runCommandOrBuildJSFunction(extension, options)\n  } else {\n    return buildOtherFunction(extension, options)\n  }\n}\n\nasync function runCommandOrBuildJSFunction(extension: ExtensionInstance, options: BuildFunctionExtensionOptions) {\n  if (extension.buildCommand) {\n    return runCommand(extension.buildCommand, extension, options)\n  } else {\n    return buildJSFunction(extension as ExtensionInstance<FunctionConfigType>, options)\n  }\n}\n\nasync function buildOtherFunction(extension: ExtensionInstance, options: BuildFunctionExtensionOptions) {\n  if (!extension.buildCommand) {\n    options.stderr.write(\n      `The function extension ${extension.localIdentifier} doesn't have a build command or it's empty`,\n    )\n    options.stderr.write(`\n    Edit the shopify.function.extension.toml configuration file and set how to build the extension.\n\n    [build]\n    command = \"{COMMAND}\"\n\n    Note that the command must output a dist/index.wasm file.\n    `)\n    throw new AbortSilentError()\n  }\n  return runCommand(extension.buildCommand, extension, options)\n}\n\nasync function runCommand(buildCommand: string, extension: ExtensionInstance, options: BuildFunctionExtensionOptions) {\n  const buildCommandComponents = buildCommand.split(' ')\n  options.stdout.write(`Building function ${extension.localIdentifier}...`)\n  await exec(buildCommandComponents[0]!, buildCommandComponents.slice(1), {\n    stdout: options.stdout,\n    stderr: options.stderr,\n    cwd: extension.directory,\n    signal: options.signal,\n  })\n}\n"]}