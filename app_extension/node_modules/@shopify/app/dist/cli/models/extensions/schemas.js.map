{"version":3,"file":"schemas.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/schemas.ts"],"names":[],"mappings":"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","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ZodSchemaType<T> = zod.ZodType<T, any, any>\n\nexport const MetafieldSchema = zod.object({\n  namespace: zod.string(),\n  key: zod.string(),\n})\n\nexport const CollectBuyerConsentCapabilitySchema = zod.object({\n  sms_marketing: zod.boolean().optional(),\n})\n\nexport const CapabilitiesSchema = zod.object({\n  network_access: zod.boolean().optional(),\n  block_progress: zod.boolean().optional(),\n  api_access: zod.boolean().optional(),\n  collect_buyer_consent: CollectBuyerConsentCapabilitySchema.optional(),\n})\n\nexport const ExtensionsArraySchema = zod.object({\n  type: zod.string().optional(),\n  extensions: zod.array(zod.any()).optional(),\n})\n\nexport const NewExtensionPointSchema = zod.object({\n  target: zod.string(),\n  module: zod.string(),\n  metafields: zod.array(MetafieldSchema).optional(),\n})\n\nexport const OldExtensionPointsSchema = zod.array(zod.string()).default([])\nexport const NewExtensionPointsSchema = zod.array(NewExtensionPointSchema)\nexport const ExtensionPointSchema = zod.union([OldExtensionPointsSchema, NewExtensionPointsSchema])\nexport const ApiVersionSchema = zod.string()\n\nexport type ApiVersionSchemaType = zod.infer<typeof ApiVersionSchema>\n\nexport const FieldSchema = zod.object({\n  key: zod.string().optional(),\n  name: zod.string().optional(),\n  description: zod.string().optional(),\n  required: zod.boolean().optional(),\n  type: zod.string(),\n  validations: zod.array(zod.any()).optional(),\n})\n\nexport const SettingsSchema = zod.object({\n  fields: zod.array(FieldSchema).optional(),\n})\n\nexport const HandleSchema = zod\n  .string()\n  .trim()\n  .nonempty(\"Handle can't be empty\")\n  .max(30, \"Handle can't exceed 30 characters\")\n  .regex(/^[a-zA-Z0-9-]*$/, 'Handle can only contain alphanumeric characters and hyphens')\n  .refine((handle) => !handle.startsWith('-') && !handle.endsWith('-'), \"Handle can't start or end with a hyphen\")\n  .refine((handle) => [...handle].some((char) => char !== '-'), \"Handle can't be all hyphens\")\n\nexport const BaseSchema = zod.object({\n  name: zod.string(),\n  type: zod.string(),\n  handle: HandleSchema.optional(),\n  description: zod.string().optional(),\n  api_version: ApiVersionSchema.optional(),\n  extension_points: zod.any().optional(),\n  capabilities: CapabilitiesSchema.optional(),\n  metafields: zod.array(MetafieldSchema).optional().default([]),\n  categories: zod.array(zod.string()).optional(),\n  settings: SettingsSchema.optional(),\n})\n\nexport const BaseSchemaWithHandle = BaseSchema.extend({\n  handle: HandleSchema,\n})\n\nexport const UnifiedSchema = zod.object({\n  api_version: ApiVersionSchema.optional(),\n  description: zod.string().optional(),\n  extensions: zod.array(zod.any()),\n  settings: SettingsSchema.optional(),\n})\n\nexport type NewExtensionPointSchemaType = zod.infer<typeof NewExtensionPointSchema>\n\n// Base config type that all config schemas must extend.\nexport type BaseConfigType = zod.infer<typeof BaseSchema>\n"]}