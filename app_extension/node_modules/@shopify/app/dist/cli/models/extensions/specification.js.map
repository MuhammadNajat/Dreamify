{"version":3,"file":"specification.js","sourceRoot":"","sources":["../../../../src/cli/models/extensions/specification.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgC,UAAU,EAAC,MAAM,cAAc,CAAA;AAEtE,OAAO,EAAC,MAAM,EAAC,MAAM,oBAAoB,CAAA;AAGzC,OAAO,EAAC,UAAU,EAAC,MAAM,gCAAgC,CAAA;AA8DzD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,UAAU,4BAA4B,CAC1C,IAA6C;IAE7C,MAAM,QAAQ,GAAG;QACf,2FAA2F;QAC3F,qDAAqD;QACrD,kBAAkB,EAAE,GAAG,IAAI,CAAC,UAAU,WAAW;QACjD,qBAAqB,EAAE,EAAE;QACzB,YAAY,EAAE,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5D,OAAO,EAAE,cAAc;QACvB,qBAAqB,EAAE,IAAI,CAAC,UAAU;QACtC,MAAM,EAAE,UAA2C;QACnD,iBAAiB,EAAE,MAAM,CAAC,UAAU,CAAC,wBAAwB;KAC9D,CAAA;IACD,OAAO,EAAC,GAAG,QAAQ,EAAE,GAAG,IAAI,EAAC,CAAA;AAC/B,CAAC","sourcesContent":["import {ZodSchemaType, BaseConfigType, BaseSchema} from './schemas.js'\nimport {ExtensionInstance} from './extension-instance.js'\nimport {blocks} from '../../constants.js'\n\nimport {Result} from '@shopify/cli-kit/node/result'\nimport {capitalize} from '@shopify/cli-kit/common/string'\n\nexport type ExtensionFeature =\n  | 'ui_preview'\n  | 'function'\n  | 'theme'\n  | 'bundling'\n  | 'cart_url'\n  | 'esbuild'\n  | 'single_js_entry_path'\n\n/**\n * Extension specification with all the needed properties and methods to load an extension.\n */\nexport interface ExtensionSpecification<TConfiguration extends BaseConfigType = BaseConfigType> {\n  identifier: string\n  externalIdentifier: string\n  externalName: string\n  group?: string\n  additionalIdentifiers: string[]\n  partnersWebIdentifier: string\n  surface: string\n  registrationLimit: number\n  dependency?: string\n  graphQLType?: string\n  schema: ZodSchemaType<TConfiguration>\n  getBundleExtensionStdinContent?: (config: TConfiguration) => string\n  deployConfig?: (\n    config: TConfiguration,\n    directory: string,\n    apiKey: string,\n    moduleId?: string,\n  ) => Promise<{[key: string]: unknown} | undefined>\n  validate?: (config: TConfiguration & {path: string}, directory: string) => Promise<Result<unknown, string>>\n  preDeployValidation?: (extension: ExtensionInstance<TConfiguration>) => Promise<void>\n  buildValidation?: (extension: ExtensionInstance<TConfiguration>) => Promise<void>\n  hasExtensionPointTarget?(config: TConfiguration, target: string): boolean\n  appModuleFeatures: (config?: TConfiguration) => ExtensionFeature[]\n}\n\n/**\n * These fields are forbidden when creating a new ExtensionSpec\n * They belong to the ExtensionSpec interface, but the values are obtained from the API\n * and should not be set by us locally\n */\nexport type ForbiddenFields =\n  | 'registrationLimit'\n  | 'category'\n  | 'externalIdentifier'\n  | 'externalName'\n  | 'name'\n  | 'surface'\n\n/**\n * Partial ExtensionSpec type used when creating a new ExtensionSpec, the only mandatory field is the identifier\n */\nexport interface CreateExtensionSpecType<TConfiguration extends BaseConfigType = BaseConfigType>\n  extends Partial<Omit<ExtensionSpecification<TConfiguration>, ForbiddenFields>> {\n  identifier: string\n  appModuleFeatures: (config?: TConfiguration) => ExtensionFeature[]\n}\n\n/**\n * Create a new ui extension spec.\n *\n * Everything but \"identifer\" is optional.\n * ```ts\n * identifier: string // unique identifier for the extension type\n * externalIdentifier: string // identifier used externally (default: same as \"identifier\")\n * partnersWebIdentifier: string // identifier used in the partners web UI (default: same as \"identifier\")\n * surface?: string // surface where the extension is going to be rendered (default: 'unknown')\n * dependency?: {name: string; version: string} // dependency to be added to the extension's package.json\n * graphQLType?: string // GraphQL type of the extension (default: same as \"identifier\")\n * schema?: ZodSchemaType<TConfiguration> // schema used to validate the extension's configuration (default: BaseUIExtensionSchema)\n * getBundleExtensionStdinContent?: (configuration: TConfiguration) => string // function to generate the content of the stdin file used to bundle the extension\n * validate?: (configuration: TConfiguration, directory: string) => Promise<Result<undefined, Error>> // function to validate the extension's configuration\n * preDeployValidation?: (configuration: TConfiguration) => Promise<void> // function to validate the extension's configuration before deploying it\n * deployConfig?: (configuration: TConfiguration, directory: string) => Promise<{[key: string]: unknown}> // function to generate the extensions configuration payload to be deployed\n * hasExtensionPointTarget?: (configuration: TConfiguration, target: string) => boolean // function to determine if the extension has a given extension point target\n * ```\n */\nexport function createExtensionSpecification<TConfiguration extends BaseConfigType = BaseConfigType>(\n  spec: CreateExtensionSpecType<TConfiguration>,\n): ExtensionSpecification<TConfiguration> {\n  const defaults = {\n    // these two fields are going to be overridden by the extension specification API response,\n    // but we need them to have a default value for tests\n    externalIdentifier: `${spec.identifier}_external`,\n    additionalIdentifiers: [],\n    externalName: capitalize(spec.identifier.replace(/_/g, ' ')),\n    surface: 'test-surface',\n    partnersWebIdentifier: spec.identifier,\n    schema: BaseSchema as ZodSchemaType<TConfiguration>,\n    registrationLimit: blocks.extensions.defaultRegistrationLimit,\n  }\n  return {...defaults, ...spec}\n}\n"]}