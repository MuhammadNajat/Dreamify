{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../src/cli/models/app/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Web,\n  WebConfigurationSchema,\n  App,\n  AppInterface,\n  WebType,\n  isCurrentAppSchema,\n  getAppScopesArray,\n  AppConfigurationInterface,\n  AppSchema,\n  LegacyAppSchema,\n} from './app.js'\nimport {configurationFileNames, dotEnvFileNames} from '../../constants.js'\nimport metadata from '../../metadata.js'\nimport {ExtensionInstance} from '../extensions/extension-instance.js'\nimport {ExtensionsArraySchema, UnifiedSchema} from '../extensions/schemas.js'\nimport {ExtensionSpecification} from '../extensions/specification.js'\nimport {getCachedAppInfo} from '../../services/local-storage.js'\nimport use from '../../services/app/config/use.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\nimport {fileExists, readFile, glob, findPathUp, fileExistsSync} from '@shopify/cli-kit/node/fs'\nimport {readAndParseDotEnv, DotEnvFile} from '@shopify/cli-kit/node/dot-env'\nimport {\n  getDependencies,\n  getPackageManager,\n  getPackageName,\n  usesWorkspaces as appUsesWorkspaces,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {resolveFramework} from '@shopify/cli-kit/node/framework'\nimport {hashString} from '@shopify/cli-kit/node/crypto'\nimport {decodeToml} from '@shopify/cli-kit/node/toml'\nimport {joinPath, dirname, basename, relativePath, relativizePath} from '@shopify/cli-kit/node/path'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputDebug, OutputMessage, outputToken} from '@shopify/cli-kit/node/output'\nimport {joinWithAnd, slugify} from '@shopify/cli-kit/common/string'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {checkIfIgnoredInGitRepository} from '@shopify/cli-kit/node/git'\n\nconst defaultExtensionDirectory = 'extensions/*'\n\nexport type AppLoaderMode = 'strict' | 'report'\n\ntype AbortOrReport = <T>(errorMessage: OutputMessage, fallback: T, configurationPath: string) => T\nconst noopAbortOrReport: AbortOrReport = (errorMessage, fallback, configurationPath) => fallback\n\nexport async function loadConfigurationFile(\n  filepath: string,\n  abortOrReport: AbortOrReport = (errorMessage) => {\n    throw new AbortError(errorMessage)\n  },\n  decode: (input: string) => object = decodeToml,\n): Promise<unknown> {\n  if (!(await fileExists(filepath))) {\n    return abortOrReport(\n      outputContent`Couldn't find the configuration file at ${outputToken.path(filepath)}`,\n      '',\n      filepath,\n    )\n  }\n\n  try {\n    const configurationContent = await readFile(filepath)\n    return decode(configurationContent)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (err: any) {\n    // TOML errors have line, pos and col properties\n    if (err.line && err.pos && err.col) {\n      return abortOrReport(\n        outputContent`Fix the following error in ${outputToken.path(filepath)}:\\n${err.message}`,\n        null,\n        filepath,\n      )\n    } else {\n      throw err\n    }\n  }\n}\n\nconst isCurrentSchema = (schema: unknown) => {\n  const currentSchemaOptions: {[key: string]: string} = AppSchema.keyof().Values\n  const legacySchemaOptions: {[key: string]: string} = LegacyAppSchema.keyof().Values\n\n  // prioritize the current schema, assuming if any fields for current schema exist that don't exist in legacy, it's a current schema\n  for (const field in schema as {[key: string]: unknown}) {\n    if (currentSchemaOptions[field] && !legacySchemaOptions[field]) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport async function parseConfigurationFile<TSchema extends zod.ZodType>(\n  schema: TSchema,\n  filepath: string,\n  abortOrReport: AbortOrReport = (errorMessage) => {\n    throw new AbortError(errorMessage)\n  },\n  decode: (input: string) => object = decodeToml,\n): Promise<zod.TypeOf<TSchema> & {path: string}> {\n  const fallbackOutput = {} as zod.TypeOf<TSchema>\n\n  const configurationObject = await loadConfigurationFile(filepath, abortOrReport, decode)\n\n  if (!configurationObject) return fallbackOutput\n\n  return parseConfigurationObject(schema, filepath, configurationObject, abortOrReport)\n}\n\nexport async function parseConfigurationObject<TSchema extends zod.ZodType>(\n  schema: TSchema,\n  filepath: string,\n  configurationObject: unknown,\n  abortOrReport: AbortOrReport,\n): Promise<zod.TypeOf<TSchema> & {path: string}> {\n  const fallbackOutput = {} as zod.TypeOf<TSchema>\n\n  const parseResult = schema.safeParse(configurationObject)\n  if (!parseResult.success) {\n    const formattedError = JSON.stringify(parseResult.error.issues, null, 2)\n    return abortOrReport(\n      outputContent`Fix a schema error in ${outputToken.path(filepath)}:\\n${formattedError}`,\n      fallbackOutput,\n      filepath,\n    )\n  }\n  return {...parseResult.data, path: filepath}\n}\n\nexport function findSpecificationForType(specifications: ExtensionSpecification[], type: string) {\n  return specifications.find(\n    (spec) =>\n      spec.identifier === type || spec.externalIdentifier === type || spec.additionalIdentifiers?.includes(type),\n  )\n}\n\nexport class AppErrors {\n  private errors: {\n    [key: string]: OutputMessage\n  } = {}\n\n  addError(path: string, message: OutputMessage): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string) {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): OutputMessage[] {\n    return Object.values(this.errors)\n  }\n}\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode?: AppLoaderMode\n  configName?: string\n  specifications: ExtensionSpecification[]\n}\n\n/**\n * Load the local app from the given directory and using the provided extensions/functions specifications.\n * If the App contains extensions not supported by the current specs and mode is strict, it will throw an error.\n */\nexport async function loadApp(options: AppLoaderConstructorArgs): Promise<AppInterface> {\n  const loader = new AppLoader(options)\n  return loader.loaded()\n}\n\nexport function getDotEnvFileName(configurationPath: string) {\n  const configurationShorthand: string | undefined = getAppConfigurationShorthand(configurationPath)\n  return configurationShorthand ? `${dotEnvFileNames.production}.${configurationShorthand}` : dotEnvFileNames.production\n}\n\nexport async function loadDotEnv(appDirectory: string, configurationPath: string): Promise<DotEnvFile | undefined> {\n  let dotEnvFile: DotEnvFile | undefined\n  const dotEnvPath = joinPath(appDirectory, getDotEnvFileName(configurationPath))\n  if (await fileExists(dotEnvPath)) {\n    dotEnvFile = await readAndParseDotEnv(dotEnvPath)\n  }\n  return dotEnvFile\n}\n\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private configName?: string\n  private errors: AppErrors = new AppErrors()\n  private specifications: ExtensionSpecification[]\n\n  constructor({directory, configName, mode, specifications}: AppLoaderConstructorArgs) {\n    this.mode = mode ?? 'strict'\n    this.directory = directory\n    this.specifications = specifications\n    this.configName = configName\n  }\n\n  findSpecificationForType(type: string) {\n    return findSpecificationForType(this.specifications, type)\n  }\n\n  parseConfigurationFile<TSchema extends zod.ZodType>(\n    schema: TSchema,\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = decodeToml,\n  ) {\n    return parseConfigurationFile(schema, filepath, this.abortOrReport.bind(this), decode)\n  }\n\n  async loaded() {\n    const configurationLoader = new AppConfigurationLoader({\n      directory: this.directory,\n      configName: this.configName,\n    })\n    const {directory: appDirectory, configuration, configurationLoadResultMetadata} = await configurationLoader.loaded()\n    await logMetadataFromAppLoadingProcess(configurationLoadResultMetadata)\n\n    const dotenv = await loadDotEnv(appDirectory, configuration.path)\n\n    const {allExtensions, usedCustomLayout} = await this.loadExtensions(\n      appDirectory,\n      configuration.extension_directories,\n    )\n\n    const packageJSONPath = joinPath(appDirectory, 'package.json')\n    const name = await loadAppName(appDirectory)\n    const nodeDependencies = await getDependencies(packageJSONPath)\n    const packageManager = await getPackageManager(appDirectory)\n    const {webs, usedCustomLayout: usedCustomLayoutForWeb} = await this.loadWebs(\n      appDirectory,\n      configuration.web_directories,\n    )\n    const usesWorkspaces = await appUsesWorkspaces(appDirectory)\n\n    const appClass = new App(\n      name,\n      'SHOPIFY_API_KEY',\n      appDirectory,\n      packageManager,\n      configuration,\n      nodeDependencies,\n      webs,\n      allExtensions,\n      usesWorkspaces,\n      dotenv,\n    )\n\n    if (!this.errors.isEmpty()) appClass.errors = this.errors\n\n    await logMetadataForLoadedApp(appClass, {\n      usedCustomLayoutForWeb,\n      usedCustomLayoutForExtensions: usedCustomLayout,\n    })\n\n    return appClass\n  }\n\n  async loadWebs(appDirectory: string, webDirectories?: string[]): Promise<{webs: Web[]; usedCustomLayout: boolean}> {\n    const defaultWebDirectory = '**'\n    const webConfigGlobs = [...(webDirectories ?? [defaultWebDirectory])].map((webGlob) => {\n      return joinPath(appDirectory, webGlob, configurationFileNames.web)\n    })\n    webConfigGlobs.push(`!${joinPath(appDirectory, '**/node_modules/**')}`)\n    const webTomlPaths = await glob(webConfigGlobs)\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n    this.validateWebs(webs)\n\n    const webTomlsInStandardLocation = await glob(joinPath(appDirectory, `web/**/${configurationFileNames.web}`))\n    const usedCustomLayout = webDirectories !== undefined || webTomlsInStandardLocation.length !== webTomlPaths.length\n\n    return {webs, usedCustomLayout}\n  }\n\n  validateWebs(webs: Web[]): void {\n    ;[WebType.Backend, WebType.Frontend].forEach((webType) => {\n      const websOfType = webs.filter((web) => web.configuration.roles.includes(webType))\n      if (websOfType.length > 1) {\n        this.abortOrReport(\n          outputContent`You can only have one web with the ${outputToken.yellow(webType)} role in your app`,\n          undefined,\n          joinPath(websOfType[1]!.directory, configurationFileNames.web),\n        )\n      }\n    })\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    const config = await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile)\n    const roles = new Set('roles' in config ? config.roles : [])\n    if ('type' in config) roles.add(config.type)\n    const {type, ...processedWebConfiguration} = {...config, roles: Array.from(roles), type: undefined}\n    return {\n      directory: dirname(WebConfigurationFile),\n      configuration: processedWebConfiguration,\n      framework: await resolveFramework(dirname(WebConfigurationFile)),\n    }\n  }\n\n  async createExtensionInstance(\n    type: string,\n    configurationObject: unknown,\n    configurationPath: string,\n    directory: string,\n  ): Promise<ExtensionInstance | undefined> {\n    const specification = findSpecificationForType(this.specifications, type)\n    if (!specification) {\n      return this.abortOrReport(\n        outputContent`Invalid extension type \"${type}\" in \"${relativizePath(configurationPath)}\"`,\n        undefined,\n        configurationPath,\n      )\n    }\n\n    const configuration = await parseConfigurationObject(\n      specification.schema,\n      configurationPath,\n      configurationObject,\n      this.abortOrReport.bind(this),\n    )\n\n    const entryPath = await this.findEntryPath(directory, specification)\n\n    const extensionInstance = new ExtensionInstance({\n      configuration,\n      configurationPath,\n      entryPath,\n      directory,\n      specification,\n    })\n\n    const validateResult = await extensionInstance.validate()\n    if (validateResult.isErr()) {\n      this.abortOrReport(outputContent`\\n${validateResult.error}`, undefined, configurationPath)\n    }\n    return extensionInstance\n  }\n\n  async loadExtensions(\n    appDirectory: string,\n    extensionDirectories?: string[],\n  ): Promise<{allExtensions: ExtensionInstance[]; usedCustomLayout: boolean}> {\n    const extensionConfigPaths = [...(extensionDirectories ?? [defaultExtensionDirectory])].map((extensionPath) => {\n      return joinPath(appDirectory, extensionPath, '*.extension.toml')\n    })\n    extensionConfigPaths.push(`!${joinPath(appDirectory, '**/node_modules/**')}`)\n    const configPaths = await glob(extensionConfigPaths)\n\n    const extensionPromises = configPaths.map(async (configurationPath) => {\n      const directory = dirname(configurationPath)\n      const obj = await loadConfigurationFile(configurationPath)\n      const {extensions, type} = ExtensionsArraySchema.parse(obj)\n\n      if (extensions) {\n        // If the extension is an array, it's a unified toml file.\n        // Parse all extensions by merging each extension config with the global unified configuration.\n        const configuration = await this.parseConfigurationFile(UnifiedSchema, configurationPath)\n        const extensionsInstancesPromises = configuration.extensions.map(async (extensionConfig) => {\n          const mergedConfig = {...configuration, ...extensionConfig}\n          const {extensions, ...restConfig} = mergedConfig\n          if (!restConfig.handle) {\n            // Handle is required for unified config extensions.\n            this.abortOrReport(\n              outputContent`Missing handle for extension \"${restConfig.name}\" at ${relativePath(\n                appDirectory,\n                configurationPath,\n              )}`,\n              undefined,\n              configurationPath,\n            )\n            restConfig.handle = 'unknown-handle'\n          }\n          return this.createExtensionInstance(mergedConfig.type, restConfig, configurationPath, directory)\n        })\n        return Promise.all(extensionsInstancesPromises)\n      } else if (type) {\n        // Legacy toml file with a single extension.\n        return this.createExtensionInstance(type, obj, configurationPath, directory)\n      } else {\n        return this.abortOrReport(\n          outputContent`Invalid extension type at \"${outputToken.path(\n            relativePath(appDirectory, configurationPath),\n          )}\". Please specify a type.`,\n          undefined,\n          configurationPath,\n        )\n      }\n    })\n\n    const extensions = await Promise.all(extensionPromises)\n    const allExtensions = getArrayRejectingUndefined(extensions.flat())\n\n    // Validate that all extensions have a unique handle.\n    const handles = new Set()\n    allExtensions.forEach((extension) => {\n      if (extension.handle && handles.has(extension.handle)) {\n        const matchingExtensions = allExtensions.filter((ext) => ext.handle === extension.handle)\n        const result = joinWithAnd(matchingExtensions.map((ext) => ext.configuration.name))\n        const handle = outputToken.cyan(extension.handle)\n\n        this.abortOrReport(\n          outputContent`Duplicated handle \"${handle}\" in extensions ${result}. Handle needs to be unique per extension.`,\n          undefined,\n          extension.configuration.path,\n        )\n      } else if (extension.handle) {\n        handles.add(extension.handle)\n      }\n    })\n\n    return {allExtensions, usedCustomLayout: extensionDirectories !== undefined}\n  }\n\n  async findEntryPath(directory: string, specification: ExtensionSpecification) {\n    let entryPath\n    if (specification.appModuleFeatures().includes('single_js_entry_path')) {\n      entryPath = (\n        await Promise.all(\n          ['index']\n            .flatMap((name) => [`${name}.js`, `${name}.jsx`, `${name}.ts`, `${name}.tsx`])\n            .flatMap((fileName) => [`src/${fileName}`, `${fileName}`])\n            .map((relativePath) => joinPath(directory, relativePath))\n            .map(async (sourcePath) => ((await fileExists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n      if (!entryPath) {\n        this.abortOrReport(\n          outputContent`Couldn't find an index.{js,jsx,ts,tsx} file in the directories ${outputToken.path(\n            directory,\n          )} or ${outputToken.path(joinPath(directory, 'src'))}`,\n          undefined,\n          directory,\n        )\n      }\n    } else if (specification.identifier === 'function') {\n      entryPath = (\n        await Promise.all(\n          ['src/index.js', 'src/index.ts', 'src/main.rs']\n            .map((relativePath) => joinPath(directory, relativePath))\n            .map(async (sourcePath) => ((await fileExists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n    }\n    return entryPath\n  }\n\n  abortOrReport<T>(errorMessage: OutputMessage, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new AbortError(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\n/**\n * Parse the app configuration file from the given directory.\n * If the app configuration does not match any known schemas, it will throw an error.\n */\nexport async function loadAppConfiguration(\n  options: AppConfigurationLoaderConstructorArgs,\n): Promise<AppConfigurationInterface> {\n  const loader = new AppConfigurationLoader(options)\n  const result = await loader.loaded()\n  await logMetadataFromAppLoadingProcess(result.configurationLoadResultMetadata)\n  return result\n}\n\ninterface AppConfigurationLoaderConstructorArgs {\n  directory: string\n  configName?: string\n}\n\ntype LinkedConfigurationSource =\n  // Config file was passed via a flag to a command\n  | 'flag'\n  // Config file came from the cache (i.e. app use)\n  | 'cached'\n\ntype ConfigurationLoadResultMetadata = {\n  allClientIdsByConfigName: {[key: string]: string}\n} & (\n  | {\n      usesLinkedConfig: false\n    }\n  | {\n      usesLinkedConfig: true\n      name: string\n      gitTracked: boolean\n      source: LinkedConfigurationSource\n      usesCliManagedUrls?: boolean\n    }\n)\n\nclass AppConfigurationLoader {\n  private directory: string\n  private configName?: string\n\n  constructor({directory, configName}: AppConfigurationLoaderConstructorArgs) {\n    this.directory = directory\n    this.configName = configName\n  }\n\n  async loaded() {\n    const appDirectory = await this.getAppDirectory()\n    const configSource: LinkedConfigurationSource = this.configName ? 'flag' : 'cached'\n    const cachedCurrentConfig = getCachedAppInfo(appDirectory)?.configFile\n    const cachedCurrentConfigPath = cachedCurrentConfig ? joinPath(appDirectory, cachedCurrentConfig) : null\n\n    if (!this.configName && cachedCurrentConfigPath && !fileExistsSync(cachedCurrentConfigPath)) {\n      const warningContent = {\n        headline: `Couldn't find ${cachedCurrentConfig}`,\n        body: [\n          \"If you have multiple config files, select a new one. If you only have one config file, it's been selected as your default.\",\n        ],\n      }\n      this.configName = await use({directory: appDirectory, warningContent, shouldRenderSuccess: false})\n    }\n\n    this.configName = this.configName ?? cachedCurrentConfig\n\n    const {configurationPath, configurationFileName} = await this.getConfigurationPath(appDirectory)\n    const file = await loadConfigurationFile(configurationPath)\n    const appSchema = isCurrentSchema(file) ? AppSchema : LegacyAppSchema\n    const configuration = await parseConfigurationFile(appSchema, configurationPath)\n    const allClientIdsByConfigName = await this.getAllLinkedConfigClientIds(appDirectory)\n\n    let configurationLoadResultMetadata: ConfigurationLoadResultMetadata = {\n      usesLinkedConfig: false,\n      allClientIdsByConfigName,\n    }\n\n    if (isCurrentAppSchema(configuration)) {\n      let gitTracked = false\n      try {\n        gitTracked = !(await checkIfIgnoredInGitRepository(appDirectory, [configurationPath]))[0]\n        // eslint-disable-next-line no-catch-all/no-catch-all\n      } catch {\n        // leave as false\n      }\n\n      configurationLoadResultMetadata = {\n        ...configurationLoadResultMetadata,\n        usesLinkedConfig: true,\n        name: configurationFileName,\n        gitTracked,\n        source: configSource,\n        usesCliManagedUrls: configuration.build?.automatically_update_urls_on_dev,\n      }\n    }\n\n    return {directory: appDirectory, configuration, configurationLoadResultMetadata}\n  }\n\n  // Sometimes we want to run app commands from a nested folder (for example within an extension). So we need to\n  // traverse up the filesystem to find the root app directory.\n  async getAppDirectory() {\n    if (!(await fileExists(this.directory))) {\n      throw new AbortError(outputContent`Couldn't find directory ${outputToken.path(this.directory)}`)\n    }\n\n    // In order to find the chosen config for the app, we need to find the directory of the app.\n    // But we can't know the chosen config because the cache key is the directory itself. So we\n    // look for all possible `shopify.app.*toml` files and stop at the first directory that contains one.\n    const appDirectory = await findPathUp(\n      async (directory) => {\n        const found = await glob(joinPath(directory, appConfigurationFileNameGlob))\n        if (found.length > 0) {\n          return directory\n        }\n      },\n      {\n        cwd: this.directory,\n        type: 'directory',\n      },\n    )\n\n    if (appDirectory) {\n      return appDirectory\n    } else {\n      throw new AbortError(\n        outputContent`Couldn't find the configuration file for ${outputToken.path(\n          this.directory,\n        )}, are you in an app directory?`,\n      )\n    }\n  }\n\n  async getConfigurationPath(appDirectory: string) {\n    const configurationFileName = getAppConfigurationFileName(this.configName)\n    const configurationPath = joinPath(appDirectory, configurationFileName)\n\n    if (await fileExists(configurationPath)) {\n      return {configurationPath, configurationFileName}\n    } else {\n      throw new AbortError(\n        outputContent`Couldn't find ${configurationFileName} in ${outputToken.path(this.directory)}.`,\n      )\n    }\n  }\n\n  /**\n   * Looks for all likely linked config files in the app folder, parses, and returns a mapping of name to client ID.\n   */\n  async getAllLinkedConfigClientIds(appDirectory: string): Promise<{[key: string]: string}> {\n    const configNamesToClientId: {[key: string]: string} = {}\n    const candidates = await glob(joinPath(appDirectory, appConfigurationFileNameGlob))\n\n    const entries = (\n      await Promise.all(\n        candidates.map(async (candidateFile) => {\n          try {\n            const configuration = await parseConfigurationFile(\n              // we only care about the client ID, so no need to parse the entire file\n              zod.object({client_id: zod.string().optional()}),\n              candidateFile,\n              // we're not interested in error reporting at all\n              noopAbortOrReport,\n            )\n            if (configuration.client_id !== undefined) {\n              configNamesToClientId[basename(candidateFile)] = configuration.client_id\n              return [basename(candidateFile), configuration.client_id] as [string, string]\n            }\n            // eslint-disable-next-line no-catch-all/no-catch-all\n          } catch {\n            // can ignore errors in parsing\n          }\n        }),\n      )\n    ).filter((entry) => entry !== undefined) as [string, string][]\n    return Object.fromEntries(entries)\n  }\n}\n\nexport async function loadAppName(appDirectory: string): Promise<string> {\n  const packageJSONPath = joinPath(appDirectory, 'package.json')\n  return (await getPackageName(packageJSONPath)) ?? basename(appDirectory)\n}\n\nasync function getProjectType(webs: Web[]): Promise<'node' | 'php' | 'ruby' | 'frontend' | undefined> {\n  const backendWebs = webs.filter((web) => isWebType(web, WebType.Backend))\n  const frontendWebs = webs.filter((web) => isWebType(web, WebType.Frontend))\n  if (backendWebs.length > 1) {\n    outputDebug('Unable to decide project type as multiple web backends')\n    return\n  } else if (backendWebs.length === 0 && frontendWebs.length > 0) {\n    return 'frontend'\n  } else if (backendWebs.length === 0) {\n    outputDebug('Unable to decide project type as no web backend')\n    return\n  }\n  const {directory} = backendWebs[0]!\n\n  const nodeConfigFile = joinPath(directory, 'package.json')\n  const rubyConfigFile = joinPath(directory, 'Gemfile')\n  const phpConfigFile = joinPath(directory, 'composer.json')\n\n  if (await fileExists(nodeConfigFile)) {\n    return 'node'\n  } else if (await fileExists(rubyConfigFile)) {\n    return 'ruby'\n  } else if (await fileExists(phpConfigFile)) {\n    return 'php'\n  }\n  return undefined\n}\n\nexport function isWebType(web: Web, type: WebType): boolean {\n  return web.configuration.roles.includes(type)\n}\n\nasync function logMetadataForLoadedApp(\n  app: App,\n  loadingStrategy: {\n    usedCustomLayoutForWeb: boolean\n    usedCustomLayoutForExtensions: boolean\n  },\n) {\n  await metadata.addPublicMetadata(async () => {\n    const projectType = await getProjectType(app.webs)\n\n    const extensionFunctionCount = app.allExtensions.filter((extension) => extension.isFunctionExtension).length\n    const extensionUICount = app.allExtensions.filter((extension) => extension.isESBuildExtension).length\n    const extensionThemeCount = app.allExtensions.filter((extension) => extension.isThemeExtension).length\n\n    const extensionTotalCount = app.allExtensions.length\n\n    const webBackendCount = app.webs.filter((web) => isWebType(web, WebType.Backend)).length\n    const webBackendFramework =\n      webBackendCount === 1 ? app.webs.filter((web) => isWebType(web, WebType.Backend))[0]?.framework : undefined\n    const webFrontendCount = app.webs.filter((web) => isWebType(web, WebType.Frontend)).length\n\n    const extensionsBreakdownMapping: {[key: string]: number} = {}\n    for (const extension of app.allExtensions) {\n      if (extensionsBreakdownMapping[extension.type] === undefined) {\n        extensionsBreakdownMapping[extension.type] = 1\n      } else {\n        extensionsBreakdownMapping[extension.type]++\n      }\n    }\n\n    return {\n      project_type: projectType,\n      app_extensions_any: extensionTotalCount > 0,\n      app_extensions_breakdown: JSON.stringify(extensionsBreakdownMapping),\n      app_extensions_count: extensionTotalCount,\n      app_extensions_custom_layout: loadingStrategy.usedCustomLayoutForExtensions,\n      app_extensions_function_any: extensionFunctionCount > 0,\n      app_extensions_function_count: extensionFunctionCount,\n      app_extensions_theme_any: extensionThemeCount > 0,\n      app_extensions_theme_count: extensionThemeCount,\n      app_extensions_ui_any: extensionUICount > 0,\n      app_extensions_ui_count: extensionUICount,\n      app_name_hash: hashString(app.name),\n      app_path_hash: hashString(app.directory),\n      app_scopes: JSON.stringify(getAppScopesArray(app.configuration).sort()),\n      app_web_backend_any: webBackendCount > 0,\n      app_web_backend_count: webBackendCount,\n      app_web_custom_layout: loadingStrategy.usedCustomLayoutForWeb,\n      app_web_framework: webBackendFramework,\n      app_web_frontend_any: webFrontendCount > 0,\n      app_web_frontend_count: webFrontendCount,\n      env_package_manager_workspaces: app.usesWorkspaces,\n    }\n  })\n\n  await metadata.addSensitiveMetadata(async () => {\n    return {\n      app_name: app.name,\n    }\n  })\n}\n\nasync function logMetadataFromAppLoadingProcess(loadMetadata: ConfigurationLoadResultMetadata) {\n  await metadata.addPublicMetadata(async () => {\n    return {\n      // Generic config as code instrumentation\n      cmd_app_all_configs_any: Object.keys(loadMetadata.allClientIdsByConfigName).length > 0,\n      cmd_app_all_configs_clients: JSON.stringify(loadMetadata.allClientIdsByConfigName),\n      cmd_app_linked_config_used: loadMetadata.usesLinkedConfig,\n      ...(loadMetadata.usesLinkedConfig\n        ? {\n            cmd_app_linked_config_name: loadMetadata.name,\n            cmd_app_linked_config_git_tracked: loadMetadata.gitTracked,\n            cmd_app_linked_config_source: loadMetadata.source,\n            cmd_app_linked_config_uses_cli_managed_urls: loadMetadata.usesCliManagedUrls,\n          }\n        : {}),\n    }\n  })\n}\n\nexport const appConfigurationFileNameRegex = /^shopify\\.app(\\.[-\\w]+)?\\.toml$/\nconst appConfigurationFileNameGlob = 'shopify.app*.toml'\n\nexport function getAppConfigurationFileName(configName?: string) {\n  if (!configName) {\n    return configurationFileNames.app\n  }\n\n  if (appConfigurationFileNameRegex.test(configName)) {\n    return configName\n  } else {\n    return `shopify.app.${slugify(configName)}.toml`\n  }\n}\n\nexport function getAppConfigurationShorthand(path: string) {\n  const match = basename(path).match(appConfigurationFileNameRegex)\n  return match?.[1]?.slice(1)\n}\n"]}