{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../../../src/cli/commands/app/function/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,qBAAqB,EAAC,MAAM,sCAAsC,CAAA;AAC1E,OAAO,EAAC,aAAa,EAAE,iBAAiB,EAAC,MAAM,sCAAsC,CAAA;AACrF,OAAO,EAAC,4BAA4B,EAAC,MAAM,0CAA0C,CAAA;AACrF,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAA;AAC1C,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAA;AACrD,OAAO,OAAO,MAAM,oCAAoC,CAAA;AAExD,MAAqB,WAAY,SAAQ,OAAO;IA4BvC,KAAK,CAAC,GAAG;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;QAC7C,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE;YACpB,MAAM,4BAA4B,EAAE,CAAA;SACrC;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAA;QAErD,MAAM,iBAAiB,CAAC;YACtB,aAAa,EAAE,IAAI,CAAC,MAAM;YAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE,EAAE;gBACnC,MAAM,qBAAqB,CAAC;oBAC1B,GAAG;oBACH,SAAS,EAAE,WAAW;oBACtB,MAAM;oBACN,MAAM,EAAE,KAAK,CAAC,MAAM;oBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;iBACjB,CAAC,CAAA;YACJ,CAAC;SACF,CAAC,CAAA;IACJ,CAAC;;AAhDM,uBAAW,GAAG,iDAAiD,CAAA;AAE/D,iBAAK,GAAG;IACb,GAAG,WAAW;IACd,GAAG,QAAQ;IACX,GAAG,aAAa;IAChB,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC;QACtB,MAAM,EAAE,IAAI;QACZ,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,uCAAuC;QACpD,GAAG,EAAE,0BAA0B;QAC/B,SAAS,EAAE,CAAC,QAAQ,CAAC;KACtB,CAAC;IACF,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC;QACxB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,yCAAyC;QACtD,GAAG,EAAE,wBAAwB;QAC7B,SAAS,EAAE,CAAC,QAAQ,CAAC;KACtB,CAAC;IACF,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC;QACpB,WAAW,EAAE,2DAA2D;QACxE,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,KAAK;QACd,GAAG,EAAE,qBAAqB;KAC3B,CAAC;CACH,CAAA;eA1BkB,WAAW","sourcesContent":["import {generateSchemaService} from '../../../services/generate-schema.js'\nimport {functionFlags, inFunctionContext} from '../../../services/function/common.js'\nimport {showApiKeyDeprecationWarning} from '../../../prompts/deprecation-warnings.js'\nimport {appFlags} from '../../../flags.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport Command from '@shopify/cli-kit/node/base-command'\n\nexport default class FetchSchema extends Command {\n  static description = 'Fetch the latest GraphQL schema for a function.'\n\n  static flags = {\n    ...globalFlags,\n    ...appFlags,\n    ...functionFlags,\n    'api-key': Flags.string({\n      hidden: true,\n      name: 'API key',\n      description: 'The API key to fetch the schema with.',\n      env: 'SHOPIFY_FLAG_APP_API_KEY',\n      exclusive: ['config'],\n    }),\n    'client-id': Flags.string({\n      hidden: false,\n      description: 'The Client ID to fetch the schema with.',\n      env: 'SHOPIFY_FLAG_CLIENT_ID',\n      exclusive: ['config'],\n    }),\n    stdout: Flags.boolean({\n      description: 'Output the schema to stdout instead of writing to a file.',\n      required: false,\n      default: false,\n      env: 'SHOPIFY_FLAG_STDOUT',\n    }),\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(FetchSchema)\n    if (flags['api-key']) {\n      await showApiKeyDeprecationWarning()\n    }\n    const apiKey = flags['client-id'] || flags['api-key']\n\n    await inFunctionContext({\n      commandConfig: this.config,\n      path: flags.path,\n      configName: flags.configName,\n      callback: async (app, ourFunction) => {\n        await generateSchemaService({\n          app,\n          extension: ourFunction,\n          apiKey,\n          stdout: flags.stdout,\n          path: flags.path,\n        })\n      },\n    })\n  }\n}\n"]}