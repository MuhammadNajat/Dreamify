{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppInterface} from '../../models/app/app.js'\nimport {ExtensionFlavorValue} from '../../services/generate/extension.js'\nimport {ExtensionTemplate, TemplateType} from '../../models/app/template.js'\nimport {fileExistsSync} from '@shopify/cli-kit/node/fs'\nimport {renderAutocompletePrompt, renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {slugify} from '@shopify/cli-kit/common/string'\n\nexport interface GenerateExtensionPromptOptions {\n  name?: string\n  templateType?: string\n  extensionFlavor?: ExtensionFlavorValue\n  directory: string\n  app: AppInterface\n  extensionTemplates: ExtensionTemplate[]\n  unavailableExtensions: ExtensionTemplate[]\n  reset: boolean\n}\n\nexport interface GenerateExtensionPromptOutput {\n  extensionTemplate: ExtensionTemplate\n  extensionContent: GenerateExtensionContentOutput[]\n}\n\nexport interface GenerateExtensionContentOutput {\n  index: number\n  name: string\n  flavor?: ExtensionFlavorValue\n}\n\nexport function buildChoices(extensionTemplates: ExtensionTemplate[], unavailableExtensions: ExtensionTemplate[] = []) {\n  type ArrElement<TArrType> = TArrType extends ReadonlyArray<infer ElementType> ? ElementType : never\n\n  const templateSpecChoices = [\n    ...extensionTemplates.map((spec) => {\n      return {\n        label: spec.name,\n        value: spec.identifier,\n        group: spec.group || 'Other',\n        sortPriority: spec.sortPriority ?? Number.MAX_SAFE_INTEGER,\n      }\n    }),\n    ...unavailableExtensions.map((spec) => {\n      const label = `${spec.name} (limit reached)`\n      return {\n        label,\n        value: spec.identifier,\n        group: spec.group || 'Other',\n        disabled: true,\n        sortPriority: spec.sortPriority ?? Number.MAX_SAFE_INTEGER,\n      }\n    }),\n  ]\n\n  const compareChoices = (c1: ArrElement<typeof templateSpecChoices>, c2: ArrElement<typeof templateSpecChoices>) => {\n    if (c1.sortPriority === c2.sortPriority) {\n      return c1.label.localeCompare(c2.label)\n    } else {\n      return c1.sortPriority - c2.sortPriority\n    }\n  }\n\n  return templateSpecChoices.sort(compareChoices)\n}\n\nconst generateExtensionPrompts = async (\n  options: GenerateExtensionPromptOptions,\n): Promise<GenerateExtensionPromptOutput> => {\n  let extensionTemplates = options.extensionTemplates\n  let templateType = options.templateType\n  const extensionFlavor = options.extensionFlavor\n\n  if (!templateType) {\n    if (extensionFlavor) {\n      extensionTemplates = extensionTemplates.filter((template) =>\n        template.types[0]?.supportedFlavors.map((elem) => elem.value as string).includes(extensionFlavor),\n      )\n    }\n\n    if (extensionTemplates.length === 0) {\n      throw new AbortError('You have reached the limit for the number of extensions you can create.')\n    }\n\n    // eslint-disable-next-line require-atomic-updates\n    templateType = await renderAutocompletePrompt({\n      message: 'Type of extension?',\n      choices: buildChoices(extensionTemplates, options.unavailableExtensions),\n    })\n  }\n\n  const extensionTemplate = extensionTemplates.find((template) => template.identifier === templateType)!\n\n  const extensionContent: GenerateExtensionContentOutput[] = []\n  /* eslint-disable no-await-in-loop */\n  for (const [index, templateType] of extensionTemplate.types.entries()) {\n    const name =\n      (extensionTemplate.types.length === 1 && options.name) ||\n      (await promptName(options.directory, extensionTemplate.defaultName))\n    const flavor = options.extensionFlavor ?? (await promptFlavor(templateType))\n    extensionContent.push({index, name, flavor})\n  }\n  /* eslint-enable no-await-in-loop */\n\n  return {extensionTemplate, extensionContent}\n}\n\nasync function promptName(directory: string, defaultName: string, number = 1): Promise<string> {\n  const separator = defaultName.includes(' ') ? ' ' : '-'\n  const name = number <= 1 ? defaultName : `${defaultName}${separator}${number}`\n  const fullPath = joinPath(directory, slugify(name))\n\n  if (fileExistsSync(fullPath)) {\n    return promptName(directory, defaultName, number + 1)\n  }\n  return renderTextPrompt({\n    message: 'Name your extension:',\n    defaultValue: name,\n  })\n}\n\nasync function promptFlavor(templateType: TemplateType): Promise<ExtensionFlavorValue | undefined> {\n  if (templateType.supportedFlavors.length === 0) {\n    return undefined\n  }\n\n  if (templateType.supportedFlavors.length === 1 && templateType.supportedFlavors[0]) {\n    return templateType.supportedFlavors[0].value\n  }\n\n  return renderSelectPrompt({\n    message: 'What would you like to work in?',\n    choices: templateType.supportedFlavors.map((flavor) => {\n      return {\n        label: flavor.name,\n        value: flavor.value,\n      }\n    }),\n    defaultValue: 'react',\n  })\n}\n\nexport default generateExtensionPrompts\n"]}