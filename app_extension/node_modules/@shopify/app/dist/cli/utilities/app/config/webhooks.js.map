{"version":3,"file":"webhooks.js","sourceRoot":"","sources":["../../../../../src/cli/utilities/app/config/webhooks.ts"],"names":[],"mappings":"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","sourcesContent":["import {zod} from '@shopify/cli-kit/node/schema'\nimport type {NormalizedWebhookSubscriptions, WebhookConfig} from '../../../models/app/app.js'\n\n// used in tandem with declarativeWebhooks beta when we are not in the context of an app\nexport const TEMP_OMIT_DECLARATIVE_WEBHOOKS_SCHEMA = true\n\n// eslint-disable-next-line no-warning-comments\n// TODO - remove this when mutation is ready\nexport function fakedWebhookSubscriptionsMutation(subscriptions: NormalizedWebhookSubscriptions) {\n  return subscriptions\n}\nexport const httpsRegex = /^(https:\\/\\/)/\n\nconst duplicateSubscriptionsError = 'You canâ€™t have duplicate subscriptions with the exact same `topic` and `endpoint`'\n\nexport function filterFalsey(values: (string | boolean | undefined)[]) {\n  return values.filter(Boolean)\n}\n\nconst generateSubscriptionKey = (topic: string, endpoint: string) => `${topic}::${endpoint}`\n\nexport function validateTopLevelSubscriptions(schema: WebhookConfig) {\n  const hasEndpoint = Boolean(schema.endpoint)\n  const hasTopics = Boolean(schema.topics?.length)\n\n  if (hasEndpoint && !hasTopics && !schema.subscriptions?.length) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: 'To use a top-level `endpoint`, you must also provide a `topics` array or `[[webhooks.subscriptions]]`',\n      fatal: true,\n    }\n  }\n\n  if (!hasEndpoint && hasTopics) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: 'To use top-level topics, you must also provide a top-level `endpoint`',\n      fatal: true,\n      path: ['topics'],\n    }\n  }\n\n  // given the endpoint will be static, the only way to have duplicate top-level subscriptions is if there are multiple identical topics\n  if (hasTopics && schema.topics?.length !== new Set(schema.topics).size) {\n    return {\n      code: zod.ZodIssueCode.custom,\n      message: duplicateSubscriptionsError,\n      fatal: true,\n      path: ['topics'],\n    }\n  }\n}\n\nexport function validateInnerSubscriptions({endpoint, subscriptions = [], ...schema}: WebhookConfig) {\n  const uniqueSubscriptionEndpointSet = new Set()\n\n  // add validated unique top level subscriptions to set\n  if (endpoint && schema.topics?.length) {\n    for (const topic of schema.topics) {\n      uniqueSubscriptionEndpointSet.add(generateSubscriptionKey(topic, endpoint))\n    }\n  }\n\n  if (!subscriptions.length) return\n\n  for (const [i, subscription] of subscriptions.entries()) {\n    const path = ['subscriptions', i]\n\n    // If no top-level endpoints are provided, ensure each subscription has at least one endpoint\n    if (!endpoint && !subscription.endpoint) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: 'You must include either a top-level endpoint or an endpoint per `[[webhooks.subscriptions]]`',\n        fatal: true,\n        path,\n      }\n    }\n\n    let finalEndpoint = subscription.endpoint\n\n    // if there is no endpoint override, use top level endpoint. we are sure there will be one from earlier validation\n    if (!finalEndpoint) {\n      finalEndpoint = endpoint\n    }\n\n    if (subscription.path && !httpsRegex.test(finalEndpoint!)) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: 'You must use an https `endpoint` to use a relative path',\n        fatal: true,\n        path,\n      }\n    }\n\n    // concat the path to the endpoint if it exists to ensure uniqueness\n    if (subscription.path) {\n      finalEndpoint = `${finalEndpoint}${subscription.path}`\n    }\n\n    const key = generateSubscriptionKey(subscription.topic, finalEndpoint!)\n\n    if (uniqueSubscriptionEndpointSet.has(key)) {\n      return {\n        code: zod.ZodIssueCode.custom,\n        message: duplicateSubscriptionsError,\n        fatal: true,\n        path: [...path, subscription.topic],\n      }\n    }\n\n    uniqueSubscriptionEndpointSet.add(key)\n  }\n}\n"]}