{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../../../src/cli/utilities/extensions/theme.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,IAAI,EAAE,oBAAoB,EAAE,cAAc,EAAC,MAAM,0BAA0B,CAAA;AACnF,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AACnD,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAA;AAExC,MAAM,mBAAmB,GAAG;IAC1B,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,QAAQ;IACR,KAAK;IACL,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,aAAa;IACb,YAAY;IACZ,cAAc;IACd,UAAU;IACV,gBAAgB;IAChB,QAAQ;CACT,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,cAAiC;IACzE,MAAM,QAAQ,GAAG,gBAAgB,CAAA;IACjC,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAC7D,MAAM,MAAM,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;IAE3E,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC5B,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAA;QAChD,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAA;KACzB;IAED,OAAO,IAAI,CAAC,KAAK,EAAE;QACjB,QAAQ,EAAE,IAAI;QACd,GAAG,EAAE,cAAc,CAAC,SAAS;QAC7B,MAAM;KACP,CAAC,CAAA;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,QAAgB;IAC9C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,QAAQ,GAAa,EAAE,CAAA;QAE7B,MAAM,iBAAiB,GAAG,eAAe,CAAC;YACxC,KAAK,EAAE,oBAAoB,CAAC,QAAQ,CAAC;YACrC,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAA;QAEF,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;YAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;YAC/B,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC1D,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;aAC3B;QACH,CAAC,CAAC,CAAA;QAEF,iBAAiB,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACnB,CAAC,CAAC,CAAA;QAEF,iBAAiB,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;YAC7C,MAAM,CAAC,KAAK,CAAC,CAAA;QACf,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {glob, createFileReadStream, fileExistsSync} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {createInterface} from 'readline'\n\nconst ignoredFilePatterns = [\n  '.git',\n  '.hg',\n  '.bzr',\n  '.svn',\n  '_darcs',\n  'CVS',\n  '.sublime-(project|workspace)',\n  '.DS_Store',\n  '.sass-cache',\n  'Thumbs.db',\n  'desktop.ini',\n  'config.yml',\n  'node_modules',\n  '.gitkeep',\n  '.shopifyignore',\n  '*.toml',\n]\n\nexport async function themeExtensionFiles(themeExtension: ExtensionInstance): Promise<string[]> {\n  const filename = '.shopifyignore'\n  const filepath = joinPath(themeExtension.directory, filename)\n  const ignore = ignoredFilePatterns.map((pattern) => joinPath('*', pattern))\n\n  if (fileExistsSync(filepath)) {\n    const patterns = await parseIgnoreFile(filepath)\n    ignore.push(...patterns)\n  }\n\n  return glob('*/*', {\n    absolute: true,\n    cwd: themeExtension.directory,\n    ignore,\n  })\n}\n\n/**\n * Parses the ignore file and returns the patterns that should be ignored.\n * @param filepath - Filepath to the ignore file.\n * @returns A promise that resolves with the patterns that should be ignored.\n */\nexport function parseIgnoreFile(filepath: string): Promise<string[]> {\n  return new Promise((resolve, reject) => {\n    const patterns: string[] = []\n\n    const readLineInterface = createInterface({\n      input: createFileReadStream(filepath),\n      crlfDelay: Infinity,\n    })\n\n    readLineInterface.on('line', (line: string) => {\n      const trimmedLine = line.trim()\n      if (trimmedLine.length > 0 && !trimmedLine.startsWith('#')) {\n        patterns.push(trimmedLine)\n      }\n    })\n\n    readLineInterface.on('close', () => {\n      resolve(patterns)\n    })\n\n    readLineInterface.on('error', (error: Error) => {\n      reject(error)\n    })\n  })\n}\n"]}