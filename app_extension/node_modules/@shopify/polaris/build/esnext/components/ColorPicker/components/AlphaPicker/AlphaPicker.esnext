import React, { PureComponent } from 'react';
import { hsbToRgb } from '../../../../utilities/color-transformers.esnext';
import styles from '../../ColorPicker.scss.esnext';
import { calculateDraggerY, alphaForDraggerY } from './utilities.esnext';
import { Slidable } from '../Slidable/Slidable.esnext';

class AlphaPicker extends PureComponent {
  state = {
    sliderHeight: 0,
    draggerHeight: 0
  };
  render() {
    const {
      color,
      alpha
    } = this.props;
    const {
      sliderHeight,
      draggerHeight
    } = this.state;
    const draggerY = calculateDraggerY(alpha, sliderHeight, draggerHeight);
    const background = alphaGradientForColor(color);
    return /*#__PURE__*/React.createElement("div", {
      className: styles.AlphaPicker,
      ref: this.setSliderHeight
    }, /*#__PURE__*/React.createElement("div", {
      className: styles.ColorLayer,
      style: {
        background
      }
    }), /*#__PURE__*/React.createElement(Slidable, {
      draggerY: draggerY,
      draggerX: 0,
      onChange: this.handleChange,
      onDraggerHeight: this.setDraggerHeight
    }));
  }
  setSliderHeight = node => {
    if (node == null) {
      return;
    }
    this.setState({
      sliderHeight: node.clientHeight
    });
    if (process.env.NODE_ENV === 'development') {
      setTimeout(() => {
        this.setState({
          sliderHeight: node.clientHeight
        });
      }, 0);
    }
  };
  setDraggerHeight = height => {
    this.setState({
      draggerHeight: height
    });
  };
  handleChange = ({
    y
  }) => {
    const {
      onChange
    } = this.props;
    const {
      sliderHeight
    } = this.state;
    const alpha = alphaForDraggerY(y, sliderHeight);
    onChange(alpha);
  };
}
function alphaGradientForColor(color) {
  const {
    red,
    green,
    blue
  } = hsbToRgb(color);
  const rgb = `${red}, ${green}, ${blue}`;
  return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
}

export { AlphaPicker };
