{"version":3,"file":"tunnel.js","sourceRoot":"","sources":["../src/tunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import {TUNNEL_PROVIDER} from './provider.js'\nimport {\n  startTunnel,\n  TunnelError,\n  TunnelStartReturn,\n  TunnelStatusType,\n  TunnelClient,\n} from '@shopify/cli-kit/node/plugins/tunnel'\nimport {err, ok} from '@shopify/cli-kit/node/result'\nimport {exec, sleep} from '@shopify/cli-kit/node/system'\nimport {AbortController} from '@shopify/cli-kit/node/abort'\nimport {joinPath, dirname} from '@shopify/cli-kit/node/path'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\nimport {isUnitTest} from '@shopify/cli-kit/node/context/local'\nimport {BugError} from '@shopify/cli-kit/node/error'\nimport {Writable} from 'stream'\nimport {fileURLToPath} from 'url'\n\nexport default startTunnel({provider: TUNNEL_PROVIDER, action: hookStart})\n\n// How much time to wait for a tunnel to be established. in seconds.\nconst TUNNEL_TIMEOUT = isUnitTest() ? 0.2 : 40\n\n// if the tunnel process crashes, we'll retry this many times before giving up\n// If we retry too many times, we might get rate limited by cloudflare\nconst MAX_RETRIES = 5\n\nexport async function hookStart(port: number): Promise<TunnelStartReturn> {\n  try {\n    const client = new TunnelClientInstance(port)\n    return ok(client)\n    // eslint-disable-next-line no-catch-all/no-catch-all, @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    const tunnelError = new TunnelError('unknown', error.message)\n    return err(tunnelError)\n  }\n}\n\nclass TunnelClientInstance implements TunnelClient {\n  port: number\n  provider = TUNNEL_PROVIDER\n\n  private currentStatus: TunnelStatusType = {status: 'not-started'}\n  private abortController: AbortController | undefined = undefined\n\n  constructor(port: number) {\n    this.port = port\n    this.tunnel()\n  }\n\n  getTunnelStatus(): TunnelStatusType {\n    return this.currentStatus\n  }\n\n  stopTunnel() {\n    this.abortController?.abort()\n  }\n\n  tunnel(retries = 0) {\n    this.abortController = new AbortController()\n    let resolved = false\n\n    if (retries >= MAX_RETRIES) {\n      resolved = true\n      this.currentStatus = {\n        status: 'error',\n        message: 'Could not start Cloudflare tunnel: max retries reached.',\n        tryMessage: whatToTry(),\n      }\n      return\n    }\n\n    const args: string[] = ['tunnel', '--url', `http://localhost:${this.port}`, '--no-autoupdate']\n    const errors: string[] = []\n\n    let connected = false\n    let url: string | undefined\n    this.currentStatus = {status: 'starting'}\n\n    setTimeout(() => {\n      if (!resolved) {\n        resolved = true\n        const lastErrors = [...new Set(errors)].slice(-5).join('\\n')\n        if (lastErrors === '') {\n          this.currentStatus = {\n            status: 'error',\n            message: 'Could not start Cloudflare tunnel: unknown error.',\n            tryMessage: whatToTry(),\n          }\n        } else {\n          this.currentStatus = {status: 'error', message: lastErrors, tryMessage: whatToTry()}\n        }\n        this.abortController?.abort()\n      }\n    }, TUNNEL_TIMEOUT * 1000)\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this\n\n    const customStdout = new Writable({\n      write(chunk, _, callback) {\n        outputDebug(chunk.toString())\n        if (resolved) return\n        if (!url) url = findUrl(chunk)\n        if (findConnection(chunk)) connected = true\n        if (connected) {\n          if (url) {\n            resolved = true\n            self.currentStatus = {status: 'connected', url}\n          } else {\n            self.currentStatus = {status: 'error', message: 'Could not start Cloudflare tunnel: URL not found.'}\n          }\n        }\n        const errorMessage = findError(chunk)\n        if (errorMessage) errors.push(errorMessage)\n        callback()\n      },\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    exec(getBinPathTarget(), args, {\n      stdout: customStdout,\n      stderr: customStdout,\n      signal: this.abortController.signal,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      externalErrorHandler: async (error: any) => {\n        if (error.message.includes('Unknown system error -86')) {\n          // Cloudflare crashed because Rosetta 2 is not installed\n          this.currentStatus = {\n            status: 'error',\n            message: `Could not start Cloudflare tunnel: Missing Rosetta 2.`,\n            tryMessage: \"Install it by running 'softwareupdate --install-rosetta' and try again\",\n          }\n          return\n        }\n        // If already resolved, means that the CLI already received the tunnel URL.\n        // Can't retry because the CLI is running with an invalid URL\n        if (resolved) {\n          throw new BugError(\n            `Could not start Cloudflare tunnel: process crashed after stablishing a connection: ${error.message}`,\n            whatToTry(),\n          )\n        }\n\n        outputDebug(`Cloudflare tunnel crashed: ${error.message}, restarting...`)\n\n        // wait 1 second before restarting the tunnel, to avoid rate limiting\n        if (!isUnitTest()) await sleep(1)\n        this.tunnel(retries + 1)\n      },\n    })\n  }\n}\n\nfunction whatToTry() {\n  return [\n    'What to try:',\n    {\n      list: {\n        items: [\n          ['Run the command again'],\n          ['Add the flag', {command: '--tunnel-url {URL}'}, 'to use a custom tunnel URL'],\n        ],\n      },\n    },\n  ]\n}\n\nfunction findUrl(data: Buffer): string | undefined {\n  const regex = new RegExp(`(https:\\\\/\\\\/[^\\\\s]+\\\\.${getTunnelDomain()})`)\n  const match = data.toString().match(regex) ?? undefined\n  return match && match[1]\n}\n\nfunction findError(data: Buffer): string | undefined {\n  const knownErrors = [\n    /failed to request quick Tunnel/,\n    /failed to unmarshal quick Tunnel/,\n    /failed to parse quick Tunnel ID/,\n    /failed to provision routing/,\n    /ERR Couldn't start tunnel/,\n    /ERR Failed to serve quic connection/,\n    /ERR Failed to create new quic connection error/,\n  ]\n  const match = knownErrors.some((error) => error.test(data.toString()))\n  if (!match) return undefined\n\n  return `Could not start Cloudflare tunnel: ${cleanCloudflareLog(data.toString())}`\n}\n\nfunction cleanCloudflareLog(input: string): string {\n  const prefixRegex = /^[0-9TZ:-]+ (ERR )?/g\n  const suffixRegex = /connIndex.*/g\n  return input.replace(prefixRegex, '').replace(suffixRegex, '')\n}\n\nfunction findConnection(data: Buffer): string | undefined {\n  const match = data.toString().match(/(INF Registered tunnel connection|INF Connection)/) ?? undefined\n  return match && match[0]\n}\n\n/**\n * Get the path where the binary was installed.\n * If the environment variable SHOPIFY_CLI_CLOUDFLARED_PATH is set, use that.\n */\nfunction getBinPathTarget() {\n  if (process.env.SHOPIFY_CLI_CLOUDFLARED_PATH) {\n    return process.env.SHOPIFY_CLI_CLOUDFLARED_PATH\n  }\n  return joinPath(\n    dirname(fileURLToPath(import.meta.url)),\n    '..',\n    'bin',\n    process.platform === 'win32' ? 'cloudflared.exe' : 'cloudflared',\n  )\n}\n\nfunction getTunnelDomain() {\n  return process.env.SHOPIFY_CLI_CLOUDFLARED_DOMAIN ?? 'trycloudflare.com'\n}\n"]}